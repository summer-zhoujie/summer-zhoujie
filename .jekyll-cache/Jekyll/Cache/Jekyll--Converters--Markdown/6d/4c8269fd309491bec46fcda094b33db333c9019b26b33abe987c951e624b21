I"1<<h1 id="一为什么bitmap需要资源重用">一、为什么Bitmap需要资源重用</h1>
<p>Android 中图片显示的实体其实是一个 Bitmap 对象, 每次图片显示时, 都会构建一个 Bitmap 对象, 不用时再销毁, 假设, 在一个长列表且列表的每项都有一个图片显示, 持续滑动这个列表, 内存中的行为就是, 持续的创建 Bitmap 对象和产生不用的 Bitmap 对象, 当量级到达一定程度, 会触发 GC, 这样持续滑动界面, 势必会频繁触发 GC, 导致界面卡顿</p>

<h1 id="二bitmap-内存管理的演变">二、Bitmap 内存管理的演变</h1>
<blockquote>
  <p>以下内容参考官文: <a href="https://developer.android.com/topic/performance/graphics/manage-memory#inBitmap">管理位图内存</a></p>
</blockquote>

<ul>
  <li><strong>Android Android 2.2（API 级别 8）及以下</strong>，当发生垃圾回收时，应用的线程会停止。这会导致延迟，从而降低性能。</li>
  <li><strong>Android 2.3</strong> 添加了并发垃圾回收功能，这意味着系统不再引用位图后，很快就会回收内存。</li>
  <li><strong>Android 2.3.3（API 级别 10）及以下</strong>，位图的后备像素数据存储在本地内存 ( 不是在虚拟机中是在Native中, 可以简单理解为Android设备内存 ) 中。它与存储在 Dalvik 堆中的位图本身是分开的。本地内存中的像素数据并不以可预测的方式释放，可能会导致应用短暂超出其内存限制并崩溃。</li>
  <li><strong>Android 3.0（API 级别 11）~ Android 7.1（API 级别 25）</strong>，像素数据会与关联的位图一起存储在 Dalvik 堆上。</li>
  <li><strong>Android 8.0（API 级别 26）及以上</strong>，位图像素数据存储在原生堆 ( 又存回了Native ) 中。
<img src="https://img-blog.csdnimg.cn/20210330153900146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
</ul>

<p>官文在介绍 Bitmap 重用之前, 为啥介绍内存管理背景?</p>
<ul>
  <li>猜测和资源重用有关, 官方介绍Android 3.0 及以后 Bitmap 才支持重用, 在 2.3.3 以前, 只能在不用的时候调用 Bitmap 的 recycle() 方法, 联想到上面的背景, 可能是当时 Bitmap 存储在 Native 上对重用的实现带来了一些难题, 而 Android 3.0~7.1 Bitmap 存储在 Dalvik中时, 这时候可以利用 BitmapFactory.Options.inBitmap 字段实现资源重用. 至于 Android 8.0 以上还支持重用, 则是难题被攻克了, 以上为猜测, 个中原因有待证实</li>
</ul>

<p>为啥 Android 8.0 以后, Bitmap 的存储又挪回 Native 了呢?</p>
<ul>
  <li>应该是借鉴的 iOS 的操作, iOS的一个APP几乎能用近所有的可用内存（除去系统开支), 8.0之后，Android也向这个方向靠拢， 我们都知道 8.0 及以上的机器的内存高达4~8G, 而 Dalvik 虚拟机才能分配到多少, 至多几百兆, 这样势必会造成资源的浪费, 假设一个 4G 的机器, Dalvik 的 heap 分配了 512M, 那剩下的好几个G都浪费了, 如何解决这个问题? 最好的下手对象就是Bitmap，因为它是耗内存大户。我们把 Bitmap 的存储全部挪到 Native(机器存储) 去, 而不是放在 Dalvik 虚拟机分配了可怜的 heap 大小</li>
</ul>

<h1 id="三如何资源重用">三、如何资源重用</h1>
<p>前文可知, 分两种情况, <strong>3.0以下</strong> 和 <strong>3.0及以上</strong></p>

<h2 id="30以下">3.0以下</h2>
<p>只能使用 <strong>Bitmap 的 recycle()</strong> 方法来释放 Bitmap 对象, 并且需要自己管理 Bitmap 的生命周期( 自己记 Bitmap 的引用计数 ), 很麻烦, 资源利用率也不高</p>

<h2 id="30及以上">3.0及以上</h2>
<p>引入了 <strong>BitmapFactory.Options.inBitmap 字段</strong>, 来完成对 Bitmap 重用的支持</p>
<blockquote>
  <p>参考 <a href="https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inBitmap">inBitmap官方文档</a>
<img src="https://img-blog.csdnimg.cn/20210330155442822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</blockquote>

<p>可得, 区分 <strong>4.4及以上</strong> 和 <strong>3.0及以上~4.4以下</strong> 两种不同的处理方式</p>

<p>4.4 &lt;= api 需要满足如下条件</p>
<ul>
  <li>被重用的 Bitmap 对象是 mutable 的</li>
  <li>被重用的 Bitmap 对象的 size &gt;= 当前准备解析的</li>
</ul>

<p>3.0 &lt;= api  &lt; 4.4</p>
<ul>
  <li>被重用的 Bitmap 对象是 mutable 的</li>
  <li>被重用的 Bitmap 对象的 width 和 height 需要和当前准备解析的严格匹配</li>
  <li>BitmapFactory.Options.inSampleSize == 1</li>
  <li>被解析的图片需要是 jpeg 或者 png 格式</li>
</ul>

<p>首先, 我们需要有如下2个 BitmapPool, Bitmap 的缓存池子,分别对应上面的两种情况, 不用的 Bitmap都缓存在这里, 并限制缓存的上限, 和规定淘汰算法LRU</p>
<blockquote>
  <p>具体实现原理参照 <a href="/2021/03/20/markdown-glide3.7.0_4/index.html">Android Glide 3.7.0 源码解析(四) , BitmapPool作用及原理</a> 一文</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BitmapPoolSize</span> <span class="o">{</span>

	<span class="c1">// 从池子里获取一个大于等于指定大小的, 且config匹配的 Bitmap 实例</span>
	<span class="nc">Bitmap</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">Config</span> <span class="n">config</span><span class="o">);</span>

	<span class="c1">// 放置一个不使用的 Bitmap 到池子里</span>
	<span class="kt">boolean</span> <span class="nf">put</span><span class="o">(</span><span class="nc">Bitmap</span> <span class="n">bitmap</span><span class="o">);</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BitmapPoolAttribute</span> <span class="o">{</span>

	<span class="c1">// 从池子里获取一个宽高严格, 且config匹配的 Bitmap 实例</span>
	<span class="nc">Bitmap</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">Config</span> <span class="n">config</span><span class="o">);</span>

	<span class="c1">// 放置一个不使用的 Bitmap 到池子里</span>
	<span class="kt">boolean</span> <span class="nf">put</span><span class="o">(</span><span class="nc">Bitmap</span> <span class="n">bitmap</span><span class="o">);</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>下面是一个需要重用旧的 Bitmap 的代码示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">Bitmap</span> <span class="nf">decodeBitmapFromFile</span><span class="o">(</span><span class="nc">String</span> <span class="n">pathName</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 获取待解析图片的配置信息</span>
        <span class="kd">final</span> <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span><span class="o">();</span>
        <span class="n">options</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">pathName</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
        <span class="n">options</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">targetWidth</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="na">outWidth</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">targetHeight</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="na">outHeight</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">targetWidth</span> <span class="o">*</span> <span class="n">targetHeight</span><span class="o">;</span>

        <span class="nc">Bitmap</span> <span class="n">cache</span><span class="o">;</span>
        <span class="c1">// 适配第一种情况</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="nc">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">KITKAT</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">options</span><span class="o">.</span><span class="na">inMutable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="nc">BitmapPoolSize</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">options</span><span class="o">.</span><span class="na">outConfig</span><span class="o">);</span>
            <span class="n">options</span><span class="o">.</span><span class="na">inBitmap</span> <span class="o">=</span> <span class="n">cache</span><span class="o">;</span>
        <span class="o">}</span>

		<span class="c1">// 适配第二种情况</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="nc">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="nc">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">HONEYCOMB</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">options</span><span class="o">.</span><span class="na">inMutable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="nc">BitmapPoolAttribute</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">targetWidth</span><span class="o">,</span> <span class="n">targetHeight</span><span class="o">,</span> <span class="n">options</span><span class="o">.</span><span class="na">outConfig</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">options</span><span class="o">.</span><span class="na">inSampleSize</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
                <span class="o">(</span><span class="n">options</span><span class="o">.</span><span class="na">outMimeType</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"image/jpeg"</span><span class="o">)</span> <span class="o">||</span> <span class="n">options</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"image/png"</span><span class="o">)))</span> <span class="o">{</span>
                <span class="n">options</span><span class="o">.</span><span class="na">inBitmap</span> <span class="o">=</span> <span class="n">cache</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 数据都被写入缓存的 cache 对象里去了</span>
        <span class="k">return</span> <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">pathName</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>至此重用解释完毕</p>

<h1 id="四faq">四、FAQ</h1>
<p><strong>inJustDecodeBounds</strong> 这个属性好像没提到</p>
<blockquote>
  <p><img src="https://img-blog.csdnimg.cn/20210330170712826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</blockquote>

<p>直译过来就是设置了这个属性之后, 在 decode 时, 不会真正的去解析 Bitmap, 而是去给 BitmapFactory.Options 中 out 打头的变量赋值, 来看看都有哪些变量</p>
<ul>
  <li>outWidth 宽度</li>
  <li>outHeight 高度</li>
  <li>outMimeType 图片类型</li>
  <li>outConfig 图片配置</li>
  <li>outColorSpace pixed 数组 ( byte[] ) 的像素排列方式说明</li>
</ul>

<h1 id="五参考">五、参考</h1>
<ul>
  <li>官文_管理位图内存: <a href="https://developer.android.com/topic/performance/graphics/manage-memory#inBitmap">https://developer.android.com/topic/performance/graphics/manage-memory#inBitmap</a></li>
  <li>官文_inBitmap: <a href="https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inBitmap">https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inBitmap</a></li>
  <li>Android Developers 论坛: <a href="https://groups.google.com/g/android-developers/c/Mp0MFVFi1Fo/m/e8ZQ9FGdWdEJ?pli=1">https://groups.google.com/g/android-developers/c/Mp0MFVFi1Fo/m/e8ZQ9FGdWdEJ?pli=1</a></li>
  <li>Android Bitmap变迁与原理解析（4.x-8.x）: <a href="https://toutiao.io/posts/ptdi4q/preview">https://toutiao.io/posts/ptdi4q/preview</a></li>
</ul>

:ET