I")<h1 id="一概览">一、概览</h1>
<p><img src="https://img-blog.csdnimg.cn/20210330135711769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>

<p>Glide 3.7.0 里面涉及的解码/图形变换主要是 <strong>大小缩放</strong>, <strong>CenterCrop</strong> , <strong>FitCenter</strong>, 其中大小缩放是基于<strong>Downsampler(解码工具)</strong> 实现的, 而剩余两个则是 <strong>Transformation(图形变换)</strong> 接口的两个实现类.
所以本文主要介绍3点:</p>
<ul>
  <li><strong>CenterCrop</strong></li>
  <li><strong>FitCenter</strong></li>
  <li><strong>大小缩放</strong></li>
</ul>

<blockquote>
  <p><a href="/2021/03/14/markdown-glide3.7.0_2/index.html">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a>文中的流程可以看出是在 DecodeJob 里面进行 解码 –&gt; 图形变换 的
<img src="https://img-blog.csdnimg.cn/20210330135823576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
关于 fitCenter 和 centerCrop 的理解可以参考这篇文章的描述 <a href="https://www.jianshu.com/p/32e335d5b842">Android ImageView 的scaleType 属性图解</a></p>
</blockquote>

<p>按照惯例先介绍原理框架, 免得看源码时候迷路
<img src="https://img-blog.csdnimg.cn/20210331101008287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
解码流程详述</p>
<ul>
  <li>读取图片的配置, width, height, config, orientation,</li>
  <li>根据传入的目标 targetWidth  和 targetHeight , 计算出来目标采样率, 就是<code class="language-plaintext highlighter-rouge">缩放比例</code></li>
  <li>根据缩放比例开始解析原始图片流, 解析出缩放尺寸的图片</li>
  <li>根据方向 ( <code class="language-plaintext highlighter-rouge">orientation</code> ) 信息对图片进行矩阵变换, 翻转/旋转图片</li>
</ul>

<blockquote>
  <p>解码的过程会伴随着大量对象池思想的使用, 关于对象池概念,参看<a href="/2021/03/20/markdown-glide3.7.0_4/index.html">Android Glide 3.7.0 源码解析(四) , BitmapPool作用及原理</a></p>
</blockquote>

<p>图形转换流程</p>
<ul>
  <li>根据目标宽高计算出来合适的缩放比例和偏移量</li>
  <li>然后通过矩阵变换实现图形变换</li>
</ul>

<h1 id="二解码">二、解码</h1>
<p>还记得<a href="/2021/03/14/markdown-glide3.7.0_2/index.html">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a>文中提到过 <code class="language-plaintext highlighter-rouge">DownSampler 这个类是将原始图片资源流解析成图片</code>, 我们的解码过程就是在这个类中进行的</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="rouge-code"><pre><span class="c1">// Downsampler</span>
	<span class="kd">public</span> <span class="nc">Bitmap</span> <span class="nf">decode</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">is</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">pool</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outHeight</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">ByteArrayPool</span> <span class="n">byteArrayPool</span> <span class="o">=</span> <span class="nc">ByteArrayPool</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytesForOptions</span> <span class="o">=</span> <span class="n">byteArrayPool</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
        <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytesForStream</span> <span class="o">=</span> <span class="n">byteArrayPool</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
        <span class="kd">final</span> <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span> <span class="o">=</span> <span class="n">getDefaultOptions</span><span class="o">();</span>

        <span class="c1">// Use to fix the mark limit to avoid allocating buffers that fit entire images.</span>
        <span class="nc">RecyclableBufferedInputStream</span> <span class="n">bufferedStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RecyclableBufferedInputStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">bytesForStream</span><span class="o">);</span>
        <span class="c1">// Use to retrieve exceptions thrown while reading.</span>
        <span class="c1">// TODO(#126): when the framework no longer returns partially decoded Bitmaps or provides a way to determine</span>
        <span class="c1">// if a Bitmap is partially decoded, consider removing.</span>
        <span class="nc">ExceptionCatchingInputStream</span> <span class="n">exceptionStream</span> <span class="o">=</span> <span class="nc">ExceptionCatchingInputStream</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">bufferedStream</span><span class="o">);</span>
        <span class="c1">// Use to read data.</span>
        <span class="c1">// Ensures that we can always reset after reading an image header so that we can still attempt to decode the</span>
        <span class="c1">// full image even when the header decode fails and/or overflows our read buffer. See #283.</span>
        <span class="nc">MarkEnforcingInputStream</span> <span class="n">invalidatingStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MarkEnforcingInputStream</span><span class="o">(</span><span class="n">exceptionStream</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">exceptionStream</span><span class="o">.</span><span class="na">mark</span><span class="o">(</span><span class="no">MARK_POSITION</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">orientation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">orientation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageHeaderParser</span><span class="o">(</span><span class="n">exceptionStream</span><span class="o">).</span><span class="na">getOrientation</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">WARN</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Cannot determine the image orientation from header"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">exceptionStream</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">WARN</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Cannot reset the input stream"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="n">options</span><span class="o">.</span><span class="na">inTempStorage</span> <span class="o">=</span> <span class="n">bytesForOptions</span><span class="o">;</span>

            <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">inDimens</span> <span class="o">=</span> <span class="n">getDimensions</span><span class="o">(</span><span class="n">invalidatingStream</span><span class="o">,</span> <span class="n">bufferedStream</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
            <span class="kd">final</span> <span class="kt">int</span> <span class="n">inWidth</span> <span class="o">=</span> <span class="n">inDimens</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="kd">final</span> <span class="kt">int</span> <span class="n">inHeight</span> <span class="o">=</span> <span class="n">inDimens</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

            <span class="kd">final</span> <span class="kt">int</span> <span class="n">degreesToRotate</span> <span class="o">=</span> <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">getExifOrientationDegrees</span><span class="o">(</span><span class="n">orientation</span><span class="o">);</span>
            <span class="kd">final</span> <span class="kt">int</span> <span class="n">sampleSize</span> <span class="o">=</span> <span class="n">getRoundedSampleSize</span><span class="o">(</span><span class="n">degreesToRotate</span><span class="o">,</span> <span class="n">inWidth</span><span class="o">,</span> <span class="n">inHeight</span><span class="o">,</span> <span class="n">outWidth</span><span class="o">,</span> <span class="n">outHeight</span><span class="o">);</span>

            <span class="kd">final</span> <span class="nc">Bitmap</span> <span class="n">downsampled</span> <span class="o">=</span> <span class="n">downsampleWithSize</span><span class="o">(</span><span class="n">invalidatingStream</span><span class="o">,</span> <span class="n">bufferedStream</span><span class="o">,</span> <span class="n">options</span><span class="o">,</span>
            											  <span class="n">pool</span><span class="o">,</span> <span class="n">inWidth</span><span class="o">,</span> <span class="n">inHeight</span><span class="o">,</span> <span class="n">sampleSize</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>

            <span class="c1">// BitmapFactory swallows exceptions during decodes and in some cases when inBitmap is non null, may catch</span>
            <span class="c1">// and log a stack trace but still return a non null bitmap. To avoid displaying partially decoded bitmaps,</span>
            <span class="c1">// we catch exceptions reading from the stream in our ExceptionCatchingInputStream and throw them here.</span>
            <span class="kd">final</span> <span class="nc">Exception</span> <span class="n">streamException</span> <span class="o">=</span> <span class="n">exceptionStream</span><span class="o">.</span><span class="na">getException</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">streamException</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">streamException</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nc">Bitmap</span> <span class="n">rotated</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">downsampled</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">rotated</span> <span class="o">=</span> <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">rotateImageExif</span><span class="o">(</span><span class="n">downsampled</span><span class="o">,</span> <span class="n">pool</span><span class="o">,</span> <span class="n">orientation</span><span class="o">);</span>

                <span class="k">if</span> <span class="o">(!</span><span class="n">downsampled</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">rotated</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">pool</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">downsampled</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">downsampled</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="n">rotated</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">byteArrayPool</span><span class="o">.</span><span class="na">releaseBytes</span><span class="o">(</span><span class="n">bytesForOptions</span><span class="o">);</span>
            <span class="n">byteArrayPool</span><span class="o">.</span><span class="na">releaseBytes</span><span class="o">(</span><span class="n">bytesForStream</span><span class="o">);</span>
            <span class="n">exceptionStream</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
            <span class="n">releaseOptions</span><span class="o">(</span><span class="n">options</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>这个函数还蛮长的, 一个片段一个片段看</p>

<p><strong>对象池狂魔</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ByteArrayPool</code>典型的对象池的实现, bytesForOptions 赋值给了<strong>options.inTempStorage</strong>, <a href="https://developer.android.com/reference/kotlin/android/graphics/BitmapFactory.Options?hl=en#intempstorage">inTempStorage</a>官方给的解释是解码的时候会用到的缓存, 这里用对象池管理回收,防止内存抖动, 看到此处回收的代码了吗 <code class="language-plaintext highlighter-rouge">byteArrayPool.releaseBytes(bytesForOptions)</code> ;</li>
  <li>同理 bytesForStream 也被安排了, <strong>RecyclableBufferedInputStream</strong> 看名称就很容易能猜到了, 我们知道在解析流的时候, 如果要求这个流可以回溯读取(读过的内容再读取一遍), 一般需要一个Buffer来缓存从流中读出的数据, 而这里就把这个 Buffer 抽象出来交给 <code class="language-plaintext highlighter-rouge">ByteArrayPool</code> 管理了</li>
  <li>再来看 <code class="language-plaintext highlighter-rouge">ExceptionCatchingInputStream exceptionStream = ExceptionCatchingInputStream.obtain(bufferedStream);</code> 这行代码, 是不是联想到 Message.obtain(), 没错这里也是个典型的对象池的概念, <code class="language-plaintext highlighter-rouge">exceptionStream.release();</code> 在此处回收进入对象池, 这里就不详述了,感兴趣可以自行跟进 <strong>ExceptionCatchingInputStream</strong> 看看</li>
  <li>最后, 再来看 <code class="language-plaintext highlighter-rouge">final BitmapFactory.Options options = getDefaultOptions();</code> 和 <code class="language-plaintext highlighter-rouge">releaseOptions(options);</code> 这一组, 也是一个对象池实现</li>
  <li>还没有结束 <code class="language-plaintext highlighter-rouge">downsampleWithSize(invalidatingStream, bufferedStream, options, pool, inWidth, inHeight, sampleSize, decodeFormat);</code> 这行里面的 <strong>pool</strong> , 就是一个 BitmapPool , 是 Bitmap 的对象池</li>
</ul>

<blockquote>
  <p>Android 3.0 之后可以将流中的图像数据解码在一个不用的已创建的 Bitmap 实例里面, 具体参见 <a href="/2021/03/30/markdown-bitmap_1/index.html">Android Bitmap(一), 资源重用</a></p>
</blockquote>

<h2 id="读取图片配置">读取图片配置</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">// DownSampler.decode</span>

        <span class="nc">RecyclableBufferedInputStream</span> <span class="n">bufferedStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RecyclableBufferedInputStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">bytesForStream</span><span class="o">);</span>
        <span class="nc">ExceptionCatchingInputStream</span> <span class="n">exceptionStream</span> <span class="o">=</span> <span class="nc">ExceptionCatchingInputStream</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">bufferedStream</span><span class="o">);</span>
        <span class="nc">MarkEnforcingInputStream</span> <span class="n">invalidatingStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MarkEnforcingInputStream</span><span class="o">(</span><span class="n">exceptionStream</span><span class="o">);</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>先来三层 InputStream 包装 (设计模式: 装饰者模式),</p>
<ul>
  <li><strong>第一层 RecyclableBufferedInputStream</strong> 实现流的回溯功能(mark/reset), 暴露 Buffer 方便接入外面的对象池管理;</li>
  <li><strong>第二层 ExceptionCatchingInputStream</strong>  担任异常处理功能;</li>
  <li><strong>第三层 MarkEnforcingInputStream</strong> 这一层是为了防止读取图片头部属性等数据的时候读超了 mark 标记的位数, 之后就无法 reset 了
    <blockquote>
      <p>InputStream mark / reset 方法的解释
<img src="https://img-blog.csdnimg.cn/2021033115434729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
mark(int limit) 的作用是标记一段长度为limit的流, 使它可以被重新读取, 而 reset() 就是将当前的读取位置指向之前 mark() 的位置, 但当超限( 例如: readPos_2位置 )时就无法 reset() 了</p>
      <ul>
        <li>在<strong>读取位置是 readPos_0</strong> 时 , mark(int limit) 标记当前读取流的位置</li>
        <li>在<strong>读取位置是 readPos_1</strong> 时 , 调用 reset 回溯有效( readPos_1 &lt;= limitPos ), 没有超出 limit 的限制, 会回到 markPos 再读一遍流</li>
        <li>在<strong>读取位置是 readPos_2</strong> 时, 调用 reset  无效 (readPos_1 &gt; limitPos ), 超出 limit 限制</li>
      </ul>

      <p>关于 RecyclableBufferedInputStream 如何实现 mark 和 reset 方法的, 参考 <a href="/2021/04/01/markdown-glide3.7.0_8/index.html">Android Glide 3.7.0 源码解析(八) , RecyclableBufferedInputStream 的 mark/reset 实现</a></p>
    </blockquote>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c1">// DownSampler.decode</span>

	<span class="k">try</span> <span class="o">{</span>
            <span class="n">exceptionStream</span><span class="o">.</span><span class="na">mark</span><span class="o">(</span><span class="no">MARK_POSITION</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">orientation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">orientation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageHeaderParser</span><span class="o">(</span><span class="n">exceptionStream</span><span class="o">).</span><span class="na">getOrientation</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">WARN</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Cannot determine the image orientation from header"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">exceptionStream</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">WARN</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Cannot reset the input stream"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="o">...</span>
     <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>紧接着就用到了 mark / reset 功能 , 读取头部信息里面存储的<strong>方向信息</strong></p>

<blockquote>
  <p>关于 orientation 值代表的详细含义参考这篇文章:  <a href="https://my.oschina.net/u/4283333/blog/3423645">EXIF 方向参数 Orientation</a></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">// DownSampler.decode</span>

	<span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">inDimens</span> <span class="o">=</span> <span class="n">getDimensions</span><span class="o">(</span><span class="n">invalidatingStream</span><span class="o">,</span> <span class="n">bufferedStream</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">inWidth</span> <span class="o">=</span> <span class="n">inDimens</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">inHeight</span> <span class="o">=</span> <span class="n">inDimens</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

	<span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getDimensions</span><span class="o">(</span><span class="nc">MarkEnforcingInputStream</span> <span class="n">is</span><span class="o">,</span> <span class="nc">RecyclableBufferedInputStream</span> <span class="n">bufferedStream</span><span class="o">,</span>
            <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">options</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">decodeStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">bufferedStream</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
        <span class="n">options</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">options</span><span class="o">.</span><span class="na">outWidth</span><span class="o">,</span> <span class="n">options</span><span class="o">.</span><span class="na">outHeight</span> <span class="o">};</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>这里获取了待解析图片的宽高</p>

<h2 id="计算缩放比例">计算缩放比例</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="rouge-code"><pre><span class="c1">// DownSampler.decode</span>

	<span class="c1">// 计算图片被旋转的角度</span>
	<span class="kd">final</span> <span class="kt">int</span> <span class="n">degreesToRotate</span> <span class="o">=</span> <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">getExifOrientationDegrees</span><span class="o">(</span><span class="n">orientation</span><span class="o">);</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">sampleSize</span> <span class="o">=</span> <span class="n">getRoundedSampleSize</span><span class="o">(</span><span class="n">degreesToRotate</span><span class="o">,</span> <span class="n">inWidth</span><span class="o">,</span> <span class="n">inHeight</span><span class="o">,</span> <span class="n">outWidth</span><span class="o">,</span> <span class="n">outHeight</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getRoundedSampleSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">degreesToRotate</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inHeight</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outHeight</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">targetHeight</span> <span class="o">=</span> <span class="n">outHeight</span> <span class="o">==</span> <span class="nc">Target</span><span class="o">.</span><span class="na">SIZE_ORIGINAL</span> <span class="o">?</span> <span class="n">inHeight</span> <span class="o">:</span> <span class="n">outHeight</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">targetWidth</span> <span class="o">=</span> <span class="n">outWidth</span> <span class="o">==</span> <span class="nc">Target</span><span class="o">.</span><span class="na">SIZE_ORIGINAL</span> <span class="o">?</span> <span class="n">inWidth</span> <span class="o">:</span> <span class="n">outWidth</span><span class="o">;</span>

        <span class="kd">final</span> <span class="kt">int</span> <span class="n">exactSampleSize</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">degreesToRotate</span> <span class="o">==</span> <span class="mi">90</span> <span class="o">||</span> <span class="n">degreesToRotate</span> <span class="o">==</span> <span class="mi">270</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 90 和 270 度 需要把长宽对调来计算缩放比例</span>
            <span class="n">exactSampleSize</span> <span class="o">=</span> <span class="n">getSampleSize</span><span class="o">(</span><span class="n">inHeight</span><span class="o">,</span> <span class="n">inWidth</span><span class="o">,</span> <span class="n">targetWidth</span><span class="o">,</span> <span class="n">targetHeight</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">exactSampleSize</span> <span class="o">=</span> <span class="n">getSampleSize</span><span class="o">(</span><span class="n">inWidth</span><span class="o">,</span> <span class="n">inHeight</span><span class="o">,</span> <span class="n">targetWidth</span><span class="o">,</span> <span class="n">targetHeight</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 去一个最大的 且  &lt;= exactSampleSize 且 是2的次方</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">powerOfTwoSampleSize</span> <span class="o">=</span> <span class="n">exactSampleSize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span>
                <span class="nc">Integer</span><span class="o">.</span><span class="na">highestOneBit</span><span class="o">(</span><span class="n">exactSampleSize</span><span class="o">);</span>

        <span class="c1">// powerOfTwoSampleSize == 0 代表不缩放,也就是返回 1 倍</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">powerOfTwoSampleSize</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Downsampler</span> <span class="no">AT_LEAST</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Downsampler</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getSampleSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">inWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inHeight</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outHeight</span><span class="o">)</span> <span class="o">{</span>
        	<span class="c1">// 按照目标的长宽比判定 至少需要缩放多少倍</span>
            <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">inHeight</span> <span class="o">/</span> <span class="n">outHeight</span><span class="o">,</span> <span class="n">inWidth</span> <span class="o">/</span> <span class="n">outWidth</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"AT_LEAST.com.bumptech.glide.load.data.bitmap"</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">};</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Downsampler</span> <span class="no">AT_MOST</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Downsampler</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getSampleSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">inWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inHeight</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outHeight</span><span class="o">)</span> <span class="o">{</span>
        	<span class="c1">// 按照目标的长宽比判定 至多需要缩放多少倍</span>
            <span class="kt">int</span> <span class="n">maxIntegerFactor</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">inHeight</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">outHeight</span><span class="o">,</span>
                <span class="n">inWidth</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">outWidth</span><span class="o">));</span>
            <span class="kt">int</span> <span class="n">lesserOrEqualSampleSize</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">highestOneBit</span><span class="o">(</span><span class="n">maxIntegerFactor</span><span class="o">));</span>
            <span class="k">return</span> <span class="n">lesserOrEqualSampleSize</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="n">lesserOrEqualSampleSize</span> <span class="o">&lt;</span> <span class="n">maxIntegerFactor</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"AT_MOST.com.bumptech.glide.load.data.bitmap"</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>先根据目标宽高算出整数的缩放比例, 有两种计算方式(但其实查看 3.7.0的代码, 只用到了 AT_LEAST)</p>
<ul>
  <li>AT_LEAST 取 sampleSize 的最小值, 意思是: 至少需要缩放多少倍</li>
  <li>AT_MOST 取 sampleSize 的最大值 (而且还是 ceil 的方式向上取整) 意思是最多需要缩放多少倍</li>
</ul>

<p>这步计算我们拿到的 exactSampleSize 却不是最终的 sampleSize, <a href="https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inSampleSize">官文</a>里面有提到, sampleSize 需要是 2 的整数次方 且 大于一, 所以我们<code class="language-plaintext highlighter-rouge">需要在exactSampleSize 范围内找一个最大的满足 2 的整数次方</code>的最终 sampleSize , 并且与 1 进行比较</p>

<blockquote>
  <p>sampleSize == 4 代表缩小 4 倍
<img src="https://img-blog.csdnimg.cn/20210331163814297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</blockquote>

<p>缩放比例就计算完了, 下一步</p>

<h2 id="解析原图为对应缩放比例">解析原图为对应缩放比例</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="c1">// DownSampler.decode</span>

	<span class="kd">final</span> <span class="nc">Bitmap</span> <span class="n">downsampled</span> <span class="o">=</span> <span class="n">downsampleWithSize</span><span class="o">(</span><span class="n">invalidatingStream</span><span class="o">,</span> <span class="n">bufferedStream</span><span class="o">,</span>
												<span class="n">options</span><span class="o">,</span> <span class="n">pool</span><span class="o">,</span> <span class="n">inWidth</span><span class="o">,</span> <span class="n">inHeight</span><span class="o">,</span>
												<span class="n">sampleSize</span><span class="o">,</span><span class="n">decodeFormat</span><span class="o">);</span>

	<span class="kd">private</span> <span class="nc">Bitmap</span> <span class="nf">downsampleWithSize</span><span class="o">(</span><span class="nc">MarkEnforcingInputStream</span> <span class="n">is</span><span class="o">,</span> <span class="nc">RecyclableBufferedInputStream</span>  <span class="n">bufferedStream</span><span class="o">,</span>
            <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">pool</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inHeight</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sampleSize</span><span class="o">,</span>
            <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">// 读取 config</span>
        <span class="nc">Bitmap</span><span class="o">.</span><span class="na">Config</span> <span class="n">config</span> <span class="o">=</span> <span class="n">getConfig</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
        <span class="c1">// 初始化 options</span>
        <span class="n">options</span><span class="o">.</span><span class="na">inSampleSize</span> <span class="o">=</span> <span class="n">sampleSize</span><span class="o">;</span>
        <span class="n">options</span><span class="o">.</span><span class="na">inPreferredConfig</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>

		<span class="c1">// 这里利用 BitmapPool 对象池 和 Bitmap 的重用机制, 做了一个Bitmap内存重用的东东</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">options</span><span class="o">.</span><span class="na">inSampleSize</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="nc">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">KITKAT</span> <span class="o">&lt;=</span> <span class="nc">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">shouldUsePool</span><span class="o">(</span><span class="n">is</span><span class="o">))</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">targetWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">inWidth</span> <span class="o">/</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">sampleSize</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">targetHeight</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">inHeight</span> <span class="o">/</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">sampleSize</span><span class="o">);</span>
            <span class="n">setInBitmap</span><span class="o">(</span><span class="n">options</span><span class="o">,</span> <span class="n">pool</span><span class="o">.</span><span class="na">getDirty</span><span class="o">(</span><span class="n">targetWidth</span><span class="o">,</span> <span class="n">targetHeight</span><span class="o">,</span> <span class="n">config</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="c1">// 开始解析</span>
        <span class="k">return</span> <span class="nf">decodeStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">bufferedStream</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setInBitmap</span><span class="o">(</span><span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span><span class="o">,</span> <span class="nc">Bitmap</span> <span class="n">recycled</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">HONEYCOMB</span> <span class="o">&lt;=</span> <span class="nc">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span><span class="o">)</span> <span class="o">{</span>
        	<span class="c1">// 给 options 的 inBitmap 字段赋值, 可以将原始图片资源解析到一个不用的 Bitmap 对象中去</span>
            <span class="n">options</span><span class="o">.</span><span class="na">inBitmap</span> <span class="o">=</span> <span class="n">recycled</span><span class="o">;</span>
        <span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">Bitmap</span> <span class="nf">decodeStream</span><span class="o">(</span><span class="nc">MarkEnforcingInputStream</span> <span class="n">is</span><span class="o">,</span> <span class="nc">RecyclableBufferedInputStream</span> <span class="n">bufferedStream</span><span class="o">,</span>
            <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="kd">final</span> <span class="nc">Bitmap</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
		<span class="o">...</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>读取 config</li>
  <li>把 config 和之前算好的 sampleSize 赋值给 options</li>
  <li>给 options 的 inBitmap 字段赋值, 可以将原始图片资源解析到一个不用的 Bitmap 对象中去</li>
  <li>利用 Bitmap 的资源重用机制完成对原始图片的解码操作</li>
</ul>

<blockquote>
  <p>关于Bitmap的重用机制可以参考, <a href="/2021/03/30/markdown-bitmap_1/index.html">Android Bitmap(一), 资源重用</a>
关于对象池的概念可以参考, <a href="/2021/03/20/markdown-glide3.7.0_4/index.html">Android Glide 3.7.0 源码解析(四) , BitmapPool作用及原理</a></p>
</blockquote>

<p>解码过程分析完毕, 接下来的图形转换就很简单了, 一共就两个函数</p>

<h1 id="三图形转换-fitcenter">三、图形转换 fitCenter</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FitCenter</span> <span class="kd">extends</span> <span class="nc">BitmapTransformation</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">FitCenter</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">FitCenter</span><span class="o">(</span><span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Bitmap</span> <span class="nf">transform</span><span class="o">(</span><span class="nc">BitmapPool</span> <span class="n">pool</span><span class="o">,</span> <span class="nc">Bitmap</span> <span class="n">toTransform</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outHeight</span><span class="o">)</span> <span class="o">{</span>
    	<span class="c1">// 关键代码在这里</span>
        <span class="k">return</span> <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">fitCenter</span><span class="o">(</span><span class="n">toTransform</span><span class="o">,</span> <span class="n">pool</span><span class="o">,</span> <span class="n">outWidth</span><span class="o">,</span> <span class="n">outHeight</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"FitCenter.com.bumptech.glide.load.resource.bitmap"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// TransformationUtils</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Bitmap</span> <span class="nf">fitCenter</span><span class="o">(</span><span class="nc">Bitmap</span> <span class="n">toFit</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">pool</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">toFit</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">==</span> <span class="n">width</span> <span class="o">&amp;&amp;</span> <span class="n">toFit</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">==</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">VERBOSE</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"requested target size matches input, returning input"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">toFit</span><span class="o">;</span>
        <span class="o">}</span>

		<span class="c1">// 计算缩放比例 2 代表放大 2 倍, 这里去最小值, 意思是保证能放的进去 ImageView 控件</span>
        <span class="kd">final</span> <span class="kt">float</span> <span class="n">widthPercentage</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">toFit</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
        <span class="kd">final</span> <span class="kt">float</span> <span class="n">heightPercentage</span> <span class="o">=</span> <span class="n">height</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">toFit</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
        <span class="kd">final</span> <span class="kt">float</span> <span class="n">minPercentage</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">widthPercentage</span><span class="o">,</span> <span class="n">heightPercentage</span><span class="o">);</span>


        <span class="kd">final</span> <span class="kt">int</span> <span class="n">targetWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">minPercentage</span> <span class="o">*</span> <span class="n">toFit</span><span class="o">.</span><span class="na">getWidth</span><span class="o">());</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">targetHeight</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">minPercentage</span> <span class="o">*</span> <span class="n">toFit</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">toFit</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">==</span> <span class="n">targetWidth</span> <span class="o">&amp;&amp;</span> <span class="n">toFit</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">==</span> <span class="n">targetHeight</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">VERBOSE</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"adjusted target size matches input, returning input"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">toFit</span><span class="o">;</span>
        <span class="o">}</span>

		<span class="c1">// 对象池获取一个旧的大小匹配的</span>
        <span class="nc">Bitmap</span><span class="o">.</span><span class="na">Config</span> <span class="n">config</span> <span class="o">=</span> <span class="n">getSafeConfig</span><span class="o">(</span><span class="n">toFit</span><span class="o">);</span>
        <span class="nc">Bitmap</span> <span class="n">toReuse</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">targetWidth</span><span class="o">,</span> <span class="n">targetHeight</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">toReuse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">toReuse</span> <span class="o">=</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">targetWidth</span><span class="o">,</span> <span class="n">targetHeight</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 设置透明属性, 官文描述在某些情况下可以提升Bitmap的绘制速度</span>
        <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">toFit</span><span class="o">,</span> <span class="n">toReuse</span><span class="o">);</span>

		<span class="c1">// 矩阵变换控制缩放</span>
        <span class="nc">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Canvas</span><span class="o">(</span><span class="n">toReuse</span><span class="o">);</span>
        <span class="nc">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Matrix</span><span class="o">();</span>
        <span class="n">matrix</span><span class="o">.</span><span class="na">setScale</span><span class="o">(</span><span class="n">minPercentage</span><span class="o">,</span> <span class="n">minPercentage</span><span class="o">);</span>
        <span class="nc">Paint</span> <span class="n">paint</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Paint</span><span class="o">(</span><span class="no">PAINT_FLAGS</span><span class="o">);</span>
        <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">toFit</span><span class="o">,</span> <span class="n">matrix</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">toReuse</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>以上源码,所见即所得,非常简单, 需要注意的是</p>
<ul>
  <li>缩放比例选取最小值, 是为的能放的进去界面组件, 因为是FitCenter</li>
  <li>TransformationUtils.setAlpha 设置是否包含透明像素的标志位, 某些情况下可以提升绘制速度,查看官文描述如下</li>
</ul>

<blockquote>
  <p><img src="https://img-blog.csdnimg.cn/20210331172045203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
</blockquote>

<h1 id="四图形转换-centercrop">四、图形转换 centerCrop</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="rouge-code"><pre><span class="c1">// CenterCrop</span>

	<span class="kd">protected</span> <span class="nc">Bitmap</span> <span class="nf">transform</span><span class="o">(</span><span class="nc">BitmapPool</span> <span class="n">pool</span><span class="o">,</span> <span class="nc">Bitmap</span> <span class="n">toTransform</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outHeight</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">Bitmap</span> <span class="n">toReuse</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">outWidth</span><span class="o">,</span> <span class="n">outHeight</span><span class="o">,</span> <span class="n">toTransform</span><span class="o">.</span><span class="na">getConfig</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span>
                <span class="o">?</span> <span class="n">toTransform</span><span class="o">.</span><span class="na">getConfig</span><span class="o">()</span> <span class="o">:</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">ARGB_8888</span><span class="o">);</span>
        <span class="c1">// 还是在 TransformationUtils 中进行处理</span>
        <span class="nc">Bitmap</span> <span class="n">transformed</span> <span class="o">=</span> <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">centerCrop</span><span class="o">(</span><span class="n">toReuse</span><span class="o">,</span> <span class="n">toTransform</span><span class="o">,</span> <span class="n">outWidth</span><span class="o">,</span> <span class="n">outHeight</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">toReuse</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">toReuse</span> <span class="o">!=</span> <span class="n">transformed</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">pool</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">toReuse</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">toReuse</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">transformed</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Bitmap</span> <span class="nf">centerCrop</span><span class="o">(</span><span class="nc">Bitmap</span> <span class="n">recycled</span><span class="o">,</span> <span class="nc">Bitmap</span> <span class="n">toCrop</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">toCrop</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">toCrop</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">==</span> <span class="n">width</span> <span class="o">&amp;&amp;</span> <span class="n">toCrop</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">==</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">toCrop</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">final</span> <span class="kt">float</span> <span class="n">scale</span><span class="o">;</span>
        <span class="kt">float</span> <span class="n">dx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dy</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Matrix</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Matrix</span><span class="o">();</span>
        <span class="c1">// 这个算式改成除法比较好理解 toCrop.getWidth()/width &gt; toCrop.getHeight()/height, 结合 CenterCrop 的属性理解</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">toCrop</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">*</span> <span class="n">height</span> <span class="o">&gt;</span> <span class="n">width</span> <span class="o">*</span> <span class="n">toCrop</span><span class="o">.</span><span class="na">getHeight</span><span class="o">())</span> <span class="o">{</span>
        	<span class="c1">// 宽度超限了,需要对宽度进行裁剪</span>
        	<span class="c1">// 按照高度比例进行缩放</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">height</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">toCrop</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
            <span class="n">dx</span> <span class="o">=</span> <span class="o">(</span><span class="n">width</span> <span class="o">-</span> <span class="n">toCrop</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">*</span> <span class="n">scale</span><span class="o">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        	<span class="c1">// 高度超限了,需要对高度进行裁剪</span>
        	<span class="c1">// 按照宽度比例进行缩放</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">width</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">toCrop</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
            <span class="n">dy</span> <span class="o">=</span> <span class="o">(</span><span class="n">height</span> <span class="o">-</span> <span class="n">toCrop</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">*</span> <span class="n">scale</span><span class="o">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="o">;</span>
        <span class="o">}</span>

		<span class="c1">// 先缩放</span>
        <span class="n">m</span><span class="o">.</span><span class="na">setScale</span><span class="o">(</span><span class="n">scale</span><span class="o">,</span> <span class="n">scale</span><span class="o">);</span>
        <span class="c1">// 再平移</span>
        <span class="n">m</span><span class="o">.</span><span class="na">postTranslate</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">dx</span> <span class="o">+</span> <span class="mf">0.5f</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">dy</span> <span class="o">+</span> <span class="mf">0.5f</span><span class="o">));</span>


		<span class="c1">// Bitmap重用机制</span>
        <span class="kd">final</span> <span class="nc">Bitmap</span> <span class="n">result</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">recycled</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">recycled</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">getSafeConfig</span><span class="o">(</span><span class="n">toCrop</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// 同前文, 提速用的</span>
        <span class="nc">TransformationUtils</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">toCrop</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>

        <span class="nc">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Canvas</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="nc">Paint</span> <span class="n">paint</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Paint</span><span class="o">(</span><span class="no">PAINT_FLAGS</span><span class="o">);</span>
        <span class="c1">// 绘制到 canvas 上</span>
        <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">toCrop</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>代码比较简单,就是通过缩放和平移,摆好位置后,直接绘制到新的 Bitmap 上, 唯一需要注意的是<code class="language-plaintext highlighter-rouge">toCrop.getWidth()/width &gt; toCrop.getHeight()/height</code>会选取一个比例小的按比例缩放, 把比例大的哪个平移裁剪掉</p>

:ET