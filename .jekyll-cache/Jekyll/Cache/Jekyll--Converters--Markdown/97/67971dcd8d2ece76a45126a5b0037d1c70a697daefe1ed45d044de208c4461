I"Ӯ<h1 id="一加载图片代码">一、加载图片代码</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">Glide</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">activity</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">into</span><span class="o">(</span><span class="n">imageView</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h1 id="二流程图">二、流程图</h1>
<p><img src="https://img-blog.csdnimg.cn/20210310215407519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<blockquote>
  <ol>
    <li>Glide.with 方法, 创建 RequestManager 实例</li>
    <li>
      <p>RequestManager.load 方法, 创建 GenericRequestBuilder 实例, 并打包编/解码, 转码, 图形转换, 下载等工具
解码: File, InputStream 转换成 Bitmap, Drawable
编码: 将数据写入缓存区</p>
    </li>
    <li>GenericRequestBuilder.into 方法, 使用 load 构建的参数构建一个 Request 实例</li>
    <li>Request 实例, 执行下载, 解码, 图形变换, 数据转码, 生成 Resource 图片资源</li>
    <li>onSourceReady 方法, 将处理好的 Resource 回调到 Target 并显示出来</li>
  </ol>
</blockquote>

<h1 id="三源码执行过程">三、源码执行过程</h1>
<h2 id="31-with">[3.1] with()</h2>
<blockquote>
  <ul>
    <li>特别注意: 源码较多, 为了精简不会贴全, 省略部分会以 … 来表示</li>
  </ul>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">// Glide</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">RequestManager</span> <span class="nf">with</span><span class="o">(</span><span class="nc">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RequestManagerRetriever</span> <span class="n">retriever</span> <span class="o">=</span> <span class="nc">RequestManagerRetriever</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">retriever</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>进入 RequestManagerRetriever.get</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManagerRetriever</span>

    <span class="kd">public</span> <span class="nc">RequestManager</span> <span class="nf">get</span><span class="o">(</span><span class="nc">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Util</span><span class="o">.</span><span class="na">isOnBackgroundThread</span><span class="o">()</span> <span class="o">...)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">...;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">FragmentManager</span> <span class="n">fm</span> <span class="o">=</span> <span class="n">activity</span><span class="o">.</span><span class="na">getFragmentManager</span><span class="o">();</span>
            <span class="k">return</span> <span class="nf">fragmentGet</span><span class="o">(</span><span class="n">activity</span><span class="o">,</span> <span class="n">fm</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>两个分支, 假定, 在主线程调用, 则, 进入 fragmentGet</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManagerRetriever</span>

    <span class="nc">RequestManager</span> <span class="nf">fragmentGet</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">FragmentManager</span> <span class="n">fm</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RequestManagerFragment</span> <span class="n">current</span> <span class="o">=</span> <span class="n">getRequestManagerFragment</span><span class="o">(</span><span class="n">fm</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="n">requestManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RequestManager</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">current</span><span class="o">.</span><span class="na">getLifecycle</span><span class="o">(),</span> <span class="n">current</span><span class="o">.</span><span class="na">getRequestManagerTreeNode</span><span class="o">());</span>
        <span class="n">current</span><span class="o">.</span><span class="na">setRequestManager</span><span class="o">(</span><span class="n">requestManager</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">requestManager</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <ul>
    <li>RequestManagerFragment 是用来监测生命周期, 内存的, 另外网络状态 ConnectivityMonitor 也会将自己绑入生命周期, 不是主线这里不做赘述, 详细原理可以点击查看这篇文章, <a href="">Android Glide 3.7.0 源码解析(X), 生命周期(暂未编写,这里做个标记)</a></li>
  </ul>
</blockquote>

<p>创建了一个 RequestManager 实例, 传入<strong>生命周期 ( ActivityFragmentLifecycle ) **和</strong>生命里面的Fragment树结构 ( RequestManagerTreeNode )**</p>
<h3 id="311-requestmanagerglide">[3.1.1] RequestManager.glide</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManager</span>

	<span class="nc">RequestManager</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Lifecycle</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="nc">RequestManagerTreeNode</span> <span class="n">treeNode</span><span class="o">,</span>
            <span class="nc">RequestTracker</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="nc">ConnectivityMonitorFactory</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">this</span><span class="o">.</span><span class="na">glide</span> <span class="o">=</span> <span class="nc">Glide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>这里创建了一个 Glide 单例</strong>, 留作后用</p>
<h2 id="32-load">[3.2] load()</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManager</span>

    <span class="kd">public</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="nc">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;)</span> <span class="n">fromString</span><span class="o">().</span><span class="na">load</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <ul>
    <li><strong>创建了一个 DrawableTypeRequest , 它是个啥?</strong>
继承自 GenericRequestBuilder ( <a href="https://img-blog.csdnimg.cn/20210311195313868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">UML 类图参考</a> ) , <strong>集合了编/解码, 图形变换, 转码, 下载功能</strong> ( 下面的流程中我们需要注意这些功能都是怎么集合进去的 )</li>
    <li>在流程中的位置和功能:
<img src="https://img-blog.csdnimg.cn/20210311193627438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
功能: <strong>调用 GenericRequestBuilder.into 生成真正的 Request 实例</strong>, GenericRequestBuilder 可以理解为一个用户态的 Request</li>
  </ul>
</blockquote>

<p>1 行代码, 2 个分支, 第一 fromString, 第二 load, 先看第 1 个分支</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManager</span>

	<span class="kd">public</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">fromString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">loadGeneric</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">loadGeneric</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamModelLoader</span> <span class="o">=</span> <span class="nc">Glide</span><span class="o">.</span><span class="na">buildStreamModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorModelLoader</span> <span class="o">=</span>
                <span class="nc">Glide</span><span class="o">.</span><span class="na">buildFileDescriptorModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
        <span class="o">...</span>

        <span class="k">return</span> <span class="n">optionsApplier</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span>
                <span class="k">new</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">streamModelLoader</span><span class="o">,</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span>
                        <span class="n">glide</span><span class="o">,</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="n">optionsApplier</span><span class="o">));</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>留意一下这里的 modelClass == String.class
StreamStringLoader 和 FileDescriptorStringLoader 都属于 ModelLoader ( <a href="https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">UML 类图参考</a> ) 类型, 功用: <strong>数据下载</strong></p>
  <ol>
    <li>构建 StreamStringLoader 和 FileDescriptorStringLoader 实例, 属于<strong>下载模块</strong></li>
    <li>以 1 中实例 , 构建 DrawableTypeRequest 实例, <strong>集合了编/解码, 图形变换, 转码, 下载功能</strong></li>
  </ol>
</blockquote>

<p>下面来看看这些个功能模块是怎么初始化, 被打包进 DrawableTypeRequest 的</p>

<h3 id="321-创建request用户态">[3.2.1] 创建Request(用户态)</h3>
<p>创建Request(用户态) DrawableTypeRequest</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManager</span>
	<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">loadGeneric</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamModelLoader</span> <span class="o">=</span> <span class="nc">Glide</span><span class="o">.</span><span class="na">buildStreamModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorModelLoader</span> <span class="o">=</span>
                <span class="nc">Glide</span><span class="o">.</span><span class="na">buildFileDescriptorModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
        <span class="o">...</span>

        <span class="k">return</span> <span class="n">optionsApplier</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span>
                <span class="k">new</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">streamModelLoader</span><span class="o">,</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span>
                        <span class="n">glide</span><span class="o">,</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="n">optionsApplier</span><span class="o">));</span>
    <span class="o">}</span>

<span class="c1">// DrawableTypeRequest</span>

	<span class="nc">DrawableTypeRequest</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamModelLoader</span><span class="o">,</span>
            <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">Glide</span> <span class="n">glide</span><span class="o">,</span>
            <span class="nc">RequestTracker</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="nc">Lifecycle</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="nc">RequestManager</span><span class="o">.</span><span class="na">OptionsApplier</span> <span class="n">optionsApplier</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">modelClass</span><span class="o">,</span>
        		<span class="c1">// 构建一个 FixedLoadProvider</span>
                <span class="n">buildProvider</span><span class="o">(</span><span class="n">glide</span><span class="o">,</span> <span class="n">streamModelLoader</span><span class="o">,</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="nc">GifBitmapWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="nc">GlideDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">null</span><span class="o">),</span>
                <span class="n">glide</span><span class="o">,</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="n">lifecycle</span><span class="o">);</span>
        <span class="c1">// 2 个下载模块, 存储到自己的成员变量中</span>
        <span class="k">this</span><span class="o">.</span><span class="na">streamModelLoader</span> <span class="o">=</span> <span class="n">streamModelLoader</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">fileDescriptorModelLoader</span> <span class="o">=</span> <span class="n">fileDescriptorModelLoader</span><span class="o">;</span>
        <span class="o">...</span>
    <span class="o">}</span>

	<span class="nc">DrawableRequestBuilder</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span>
            <span class="nc">LoadProvider</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">,</span> <span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="nc">GifBitmapWrapper</span><span class="o">,</span> <span class="nc">GlideDrawable</span><span class="o">&gt;</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="nc">Glide</span> <span class="n">glide</span><span class="o">,</span>
            <span class="nc">RequestTracker</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="nc">Lifecycle</span> <span class="n">lifecycle</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">modelClass</span><span class="o">,</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="nc">GlideDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">glide</span><span class="o">,</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="n">lifecycle</span><span class="o">);</span>

        <span class="c1">// 十字星消失动画工厂</span>
        <span class="n">crossFade</span><span class="o">();</span>
    <span class="o">}</span>
	<span class="nc">GenericRequestBuilder</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span>
            <span class="nc">LoadProvider</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">,</span> <span class="nc">DataType</span><span class="o">,</span> <span class="nc">ResourceType</span><span class="o">,</span> <span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">loadProvider</span><span class="o">,</span>
            <span class="nc">Class</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">transcodeClass</span><span class="o">,</span> <span class="nc">Glide</span> <span class="n">glide</span><span class="o">,</span> <span class="nc">RequestTracker</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="nc">Lifecycle</span> <span class="n">lifecycle</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
        <span class="c1">// String.class</span>
        <span class="k">this</span><span class="o">.</span><span class="na">modelClass</span> <span class="o">=</span> <span class="n">modelClass</span><span class="o">;</span>
        <span class="c1">// 转码类型</span>
        <span class="k">this</span><span class="o">.</span><span class="na">transcodeClass</span> <span class="o">=</span> <span class="n">transcodeClass</span><span class="o">;</span>
        <span class="c1">// glide 单例</span>
        <span class="k">this</span><span class="o">.</span><span class="na">glide</span> <span class="o">=</span> <span class="n">glide</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">requestTracker</span> <span class="o">=</span> <span class="n">requestTracker</span><span class="o">;</span>
        <span class="c1">// 生命周期</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lifecycle</span> <span class="o">=</span> <span class="n">lifecycle</span><span class="o">;</span>
        <span class="c1">// ChildLoadProvider</span>
        <span class="k">this</span><span class="o">.</span><span class="na">loadProvider</span> <span class="o">=</span> <span class="n">loadProvider</span> <span class="o">!=</span> <span class="kc">null</span>
                <span class="o">?</span> <span class="k">new</span> <span class="nc">ChildLoadProvider</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">,</span> <span class="nc">DataType</span><span class="o">,</span> <span class="nc">ResourceType</span><span class="o">,</span> <span class="nc">TranscodeType</span><span class="o">&gt;(</span><span class="n">loadProvider</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>

        <span class="o">...</span>
    <span class="o">}</span>

	<span class="kd">public</span> <span class="kd">final</span> <span class="nc">DrawableRequestBuilder</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">&gt;</span> <span class="nf">crossFade</span><span class="o">()</span> <span class="o">{</span>
		<span class="c1">// 十字星消失动画工厂</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">animate</span><span class="o">(</span><span class="k">new</span> <span class="nc">DrawableCrossFadeFactory</span><span class="o">&lt;</span><span class="nc">GlideDrawable</span><span class="o">&gt;());</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="nc">GenericRequestBuilder</span><span class="o">&lt;</span><span class="nc">ModelType</span><span class="o">,</span> <span class="nc">DataType</span><span class="o">,</span> <span class="nc">ResourceType</span><span class="o">,</span> <span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="nf">animate</span><span class="o">(</span>
            <span class="nc">GlideAnimationFactory</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">animationFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">animationFactory</span> <span class="o">=</span> <span class="n">animationFactory</span><span class="o">;</span>

        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>捋一下上面创建了哪些模块</p>
<ul>
  <li>2 个下载模块, StreamStringLoader 和 FileDescriptorStringLoader</li>
  <li>十字星渐变动画工厂 DrawableCrossFadeFactory &lt; GlideDrawable &gt;</li>
  <li>modelClass , 类型是 String.class</li>
  <li>转码类型 transcodeClass , 是 GlideDrawable.class</li>
  <li>生命周期 lifecycle</li>
  <li>ChildLoadProvider</li>
</ul>

<h3 id="322-创建下载模块1">[3.2.2] 创建下载模块1</h3>
<p>创建下载模块1 StreamStringLoader</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1">// Glide</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="nf">buildStreamModelLoader</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">buildModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nf">buildModelLoader</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">,</span>
            <span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
         <span class="o">...</span>
        <span class="k">return</span> <span class="nc">Glide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">getLoaderFactory</span><span class="o">().</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">resourceClass</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">GenericLoaderFactory</span> <span class="nf">getLoaderFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">loaderFactory</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>进入 GenericLoaderFactory.buildModelLoader 查看</p>
<blockquote>
  <p>留意一下这里的 modelClass == String.class , resourceClass == InputStream.class</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericLoaderFactory</span>

	<span class="kd">public</span> <span class="kd">synchronized</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nf">buildModelLoader</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="kd">final</span> <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="n">factory</span> <span class="o">=</span> <span class="n">getFactory</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">resourceClass</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nf">getFactory</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        	<span class="c1">// 从 modelClassToResourceFactories map 里面读取 factory</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">registeredModelClass</span> <span class="o">:</span> <span class="n">modelClassToResourceFactories</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="o">...</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">registeredModelClass</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">modelClass</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Class</span><span class="cm">/*Y*/</span><span class="o">,</span> <span class="nc">ModelLoaderFactory</span><span class="cm">/*T, Y*/</span><span class="o">&gt;</span> <span class="n">currentResourceToFactories</span> <span class="o">=</span>
                            <span class="n">modelClassToResourceFactories</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">registeredModelClass</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">currentResourceToFactories</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="n">currentResourceToFactories</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">resourceClass</span><span class="o">);</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">break</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>找下 modelClassToResourceFactories.put 看看在哪赋的值</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericLoaderFactory</span>
	<span class="kd">public</span> <span class="kd">synchronized</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nf">register</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">,</span>
            <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">modelClassToResourceFactories</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">resourceToFactories</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="nc">ModelLoaderFactory</span><span class="cm">/*T, Y*/</span> <span class="n">previous</span> <span class="o">=</span> <span class="n">resourceToFactories</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">resourceClass</span><span class="o">,</span> <span class="n">factory</span><span class="o">);</span>
		<span class="o">...</span>
        <span class="k">return</span> <span class="n">previous</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// Glide</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">,</span> <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="n">removed</span> <span class="o">=</span> <span class="n">loaderFactory</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">resourceClass</span><span class="o">,</span> <span class="n">factory</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>

	<span class="nc">Glide</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">,</span> <span class="nc">MemoryCache</span> <span class="n">memoryCache</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">register</span><span class="o">(</span><span class="nc">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorFileLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamFileLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorStringLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="c1">// 匹配到此 Factory</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamStringLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorUriLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamUriLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="no">URL</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamUrlLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">GlideUrl</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">HttpUrlGlideUrlLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="kt">byte</span><span class="o">[].</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamByteArrayLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
	<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>留意一下这里的 modelClass == String.class , resourceClass == InputStream.class</p>
</blockquote>

<p>可以看到在 Glide 单例构建的时候, 注册了一系列 Factory ,  根据上面我们传入的参数, 匹配到 <strong>StreamStringLoader.Factory</strong>, 回到上面我们开始找 Factory 的地方 ( <em>直接复制过来, 避免上下翻找文章</em> )</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericLoaderFactory</span>
	<span class="kd">public</span> <span class="kd">synchronized</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nf">buildModelLoader</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="kd">final</span> <span class="nc">ModelLoaderFactory</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="n">factory</span> <span class="o">=</span> <span class="n">getFactory</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">resourceClass</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// StreamStringLoader.Factory</span>
	<span class="kd">public</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">GenericLoaderFactory</span> <span class="n">factories</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">StreamStringLoader</span><span class="o">(</span><span class="n">factories</span><span class="o">.</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="o">}</span>

	<span class="c1">// 装饰者模式, 传入另一个 ModelLoader</span>
	<span class="kd">public</span> <span class="nf">StreamStringLoader</span><span class="o">(</span><span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">uriLoader</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>查看 StreamStringLoader ( 也是 ModelLoader 类型 ) 的构造函数, 得, 装饰了另外一个 ModelLoader 类型 ( 功能: <strong>数据下载</strong> )</li>
  <li>另外一个是谁 ? 追踪 GenericLoaderFactory.buildModelLoader(Uri.class, InputStream.class)</li>
  <li>又回到上面找 Factory 的步骤, 根据 Glide 构造函数里面的注册代码得, Factory == new StreamUriLoader.Factory()</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// StreamUriLoader.Factory</span>

	<span class="kd">public</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">GenericLoaderFactory</span> <span class="n">factories</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">StreamUriLoader</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">factories</span><span class="o">.</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">GlideUrl</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
        <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>又来了, 找 Factory , 根据 Glide 的注册代码得, Factory == HttpUrlGlideUrlLoader.Factory</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// HttpUrlGlideUrlLoader.Factory</span>

        <span class="kd">public</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">GlideUrl</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">GenericLoaderFactory</span> <span class="n">factories</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpUrlGlideUrlLoader</span><span class="o">(</span><span class="n">modelCache</span><span class="o">);</span>
        <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>找了 3 个 Factory, 梳理一下</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">//Glide</span>
	<span class="nc">Glide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">getLoaderFactory</span><span class="o">().</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>

<span class="c1">// StreamStringLoader.Factory</span>
    <span class="n">factories</span><span class="o">.</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>

<span class="c1">// StreamUriLoader.Factory</span>
    <span class="n">factories</span><span class="o">.</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">GlideUrl</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>

<span class="c1">// HttpUrlGlideUrlLoader.Factory</span>
	<span class="n">uriLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpUrlGlideUrlLoader</span><span class="o">(</span><span class="n">modelCache</span><span class="o">)</span>

<span class="c1">// StreamStringLoader</span>
	<span class="kd">public</span> <span class="nf">StreamStringLoader</span><span class="o">(</span><span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">uriLoader</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// StringLoader</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">StringLoader</span><span class="o">(</span><span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">uriLoader</span> <span class="o">=</span> <span class="n">uriLoader</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>构建了 HttpUrlGlideUrlLoader 和 StreamStringLoader 实例, 并将 HttpUrlGlideUrlLoader 存放在 StreamStringLoader 实例的 uriLoader 变量中</li>
</ul>

<p>至此, <strong>StreamStringLoader&lt;String, InputStream&gt; 创建完毕</strong> 在其中保存了一个 HttpUrlGlideUrlLoader 实例
<img src="https://img-blog.csdnimg.cn/20210313135738439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>

<h3 id="323-创建下载模块2">[3.2.3] 创建下载模块2</h3>
<p>FileDescriptorStringLoader , 这里回顾一下, 在 load 方法中有提到如下代码</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">// RequestManager.load</span>

	<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">loadGeneric</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamModelLoader</span> <span class="o">=</span> <span class="nc">Glide</span><span class="o">.</span><span class="na">buildStreamModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorModelLoader</span> <span class="o">=</span>
                <span class="nc">Glide</span><span class="o">.</span><span class="na">buildFileDescriptorModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
        <span class="o">...</span>

        <span class="k">return</span> <span class="n">optionsApplier</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span>
                <span class="k">new</span> <span class="nc">DrawableTypeRequest</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">streamModelLoader</span><span class="o">,</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span>
                        <span class="n">glide</span><span class="o">,</span> <span class="n">requestTracker</span><span class="o">,</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="n">optionsApplier</span><span class="o">));</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>留意一下这里的 modelClass == String.class</p>
</blockquote>

<p>下面我们就来查看 FileDescriptorStringLoader 的创建</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="c1">// Glide</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="nf">buildFileDescriptorModelLoader</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span>
            <span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">buildModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Y</span><span class="o">&gt;</span> <span class="nf">buildModelLoader</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">modelClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">,</span>
            <span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
         <span class="o">...</span>
         <span class="c1">// modelClass == String.class , resourceClass == ParcelFileDescriptor.class</span>
        <span class="k">return</span> <span class="nc">Glide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">getLoaderFactory</span><span class="o">().</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="n">modelClass</span><span class="o">,</span> <span class="n">resourceClass</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="nc">Glide</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">,</span> <span class="nc">MemoryCache</span> <span class="n">memoryCache</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">register</span><span class="o">(</span><span class="nc">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorFileLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamFileLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamResourceLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="c1">// 匹配到此 Factory</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorStringLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamStringLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">FileDescriptorUriLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamUriLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="no">URL</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamUrlLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="nc">GlideUrl</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">HttpUrlGlideUrlLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
        <span class="n">register</span><span class="o">(</span><span class="kt">byte</span><span class="o">[].</span><span class="na">class</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamByteArrayLoader</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
	<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>有了上面 StreamStringLoader 创建分析, 找 Factory 相信大家都很熟练了, 直接上结果</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1">// FileDescriptorStringLoader.Factory</span>
	<span class="kd">public</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">GenericLoaderFactory</span> <span class="n">factories</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">FileDescriptorStringLoader</span><span class="o">(</span><span class="n">factories</span><span class="o">.</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">Uri</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="o">}</span>

<span class="c1">// FileDescriptorUriLoader.Factory</span>
	<span class="kd">public</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">GenericLoaderFactory</span> <span class="n">factories</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">FileDescriptorUriLoader</span><span class="o">(</span><span class="n">context</span><span class="o">,</span>
					<span class="c1">// 无匹配项, 返回 null</span>
					<span class="n">factories</span><span class="o">.</span><span class="na">buildModelLoader</span><span class="o">(</span><span class="nc">GlideUrl</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                    <span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>

    <span class="o">}</span>

<span class="c1">// FileDescriptorStringLoader extends StringLoader</span>
	<span class="kd">public</span> <span class="nf">FileDescriptorStringLoader</span><span class="o">(</span><span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 这里 uriLoader == null</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">uriLoader</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// StringLoader</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">StringLoader</span><span class="o">(</span><span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="nc">Uri</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">uriLoader</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">uriLoader</span> <span class="o">=</span> <span class="n">uriLoader</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>至此, <strong>FileDescriptorStringLoader&lt;String, ParcelFileDescriptor&gt;</strong> 创建完毕,</li>
  <li>FileDescriptorStringLoader.uriLoader == FileDescriptorUriLoader</li>
  <li>FileDescriptorUriLoader.uriLoader == null
<img src="https://img-blog.csdnimg.cn/20210313161815572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
    <blockquote>
      <p>FileDescriptorStringLoader 和 StreamStringLoader 是 ModelLoader ( <a href="https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">UML类图结构</a> )</p>
    </blockquote>
  </li>
</ul>

<p>2 个下载模块都创建完了, 我们继续跟进 DrawableTypeRequest 的创建</p>

<h3 id="324-创建工具集合1">[3.2.4] 创建工具集合1</h3>
<p>创建工具集合  ChildLoadProvider , 接着 load() 的代码看</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c1">// DrawableTypeRequest</span>

	<span class="n">buildProvider</span><span class="o">(</span><span class="n">glide</span><span class="o">,</span> <span class="n">streamModelLoader</span><span class="o">,</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="nc">GifBitmapWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="nc">GlideDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">FixedLoadProvider</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nf">buildProvider</span><span class="o">(</span><span class="nc">Glide</span> <span class="n">glide</span><span class="o">,</span>
            <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamModelLoader</span><span class="o">,</span>
            <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">,</span>
            <span class="nc">Class</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="n">transcodedClass</span><span class="o">,</span>
            <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">transcoder</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        	<span class="c1">// 初始化转码工具</span>
            <span class="n">transcoder</span> <span class="o">=</span> <span class="n">glide</span><span class="o">.</span><span class="na">buildTranscoder</span><span class="o">(</span><span class="n">resourceClass</span><span class="o">,</span> <span class="n">transcodedClass</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">dataLoadProvider</span> <span class="o">=</span> <span class="n">glide</span><span class="o">.</span><span class="na">buildDataProvider</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                <span class="n">resourceClass</span><span class="o">);</span>
        <span class="nc">ImageVideoModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">&gt;</span> <span class="n">modelLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageVideoModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">&gt;(</span><span class="n">streamModelLoader</span><span class="o">,</span>
                <span class="n">fileDescriptorModelLoader</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">FixedLoadProvider</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;(</span><span class="n">modelLoader</span><span class="o">,</span> <span class="n">transcoder</span><span class="o">,</span> <span class="n">dataLoadProvider</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>注意
resourceClass == GifBitmapWrapper.class , transcodedClass == GlideDrawable.class
Z == GifBitmapWrapper.class , R == GlideDrawable.class
A == String.class</p>

  <ul>
    <li>构建了一个转码工具 GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt;</li>
    <li>构建 DataLoadProvider &lt; ImageVideoWrapper , GifBitmapWrapper &gt;</li>
    <li>构建 ImageVideoModelLoader &lt; String &gt;</li>
    <li>用上面的三个参数 <strong>构建 FixedLoadProvider &lt; String , ImageVideoWrapper , GifBitmapWrapper , GlideDrawable&gt;</strong>
<img src="https://img-blog.csdnimg.cn/20210313140321453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_20,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
  </ul>
</blockquote>

<h4 id="构建工具集合转码1">构建工具集合(转码1)</h4>
<p>构建转码 ResourceTranscoder 实例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="c1">// DrawableTypeRequest</span>
	<span class="n">transcoder</span> <span class="o">=</span> <span class="n">glide</span><span class="o">.</span><span class="na">buildTranscoder</span><span class="o">(</span><span class="n">resourceClass</span><span class="o">,</span> <span class="n">transcodedClass</span><span class="o">);</span>

<span class="c1">// Glide</span>
	<span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nf">buildTranscoder</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">decodedClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="n">transcodedClass</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 看看 transcoderRegistry 在哪边注册的</span>
        <span class="k">return</span> <span class="n">transcoderRegistry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">decodedClass</span><span class="o">,</span> <span class="n">transcodedClass</span><span class="o">);</span>
    <span class="o">}</span>

   	<span class="nc">Glide</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">,</span> <span class="nc">MemoryCache</span> <span class="n">memoryCache</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
		<span class="o">...</span>
		<span class="c1">// 和下载模块一样, 也是在 Glide 单例实例化的时候注册的</span>
		<span class="n">transcoderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">Bitmap</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">GlideBitmapDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">GlideBitmapDrawableTranscoder</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">(),</span> <span class="n">bitmapPool</span><span class="o">));</span>
        <span class="n">transcoderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">GifBitmapWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">GlideDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">GifBitmapWrapperDrawableTranscoder</span><span class="o">(</span>
                        <span class="k">new</span> <span class="nf">GlideBitmapDrawableTranscoder</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">(),</span> <span class="n">bitmapPool</span><span class="o">)));</span>
		<span class="o">...</span>
	<span class="o">}</span>

<span class="c1">// GifBitmapWrapperDrawableTranscoder</span>
	<span class="kd">public</span> <span class="nf">GifBitmapWrapperDrawableTranscoder</span><span class="o">(</span>
            <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">,</span> <span class="nc">GlideBitmapDrawable</span><span class="o">&gt;</span> <span class="n">bitmapDrawableResourceTranscoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">bitmapDrawableResourceTranscoder</span> <span class="o">=</span> <span class="n">bitmapDrawableResourceTranscoder</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// GlideBitmapDrawableTranscoder</span>
	<span class="kd">public</span> <span class="nf">GlideBitmapDrawableTranscoder</span><span class="o">(</span><span class="nc">Resources</span> <span class="n">resources</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">resources</span> <span class="o">=</span> <span class="n">resources</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">bitmapPool</span> <span class="o">=</span> <span class="n">bitmapPool</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>最后构建了一个 GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt;实例;</li>
  <li>并且包含一个 GlideBitmapDrawableTranscoder 实例, 作用是 GifBitmapWrapper 转换成 GlideDrawable
<img src="https://img-blog.csdnimg.cn/20210313140440482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
</ul>

<h4 id="构建工具集合编解码1">构建工具集合(编/解码1)</h4>
<p>构建工具集合(子类) ImageVideoGifDrawableLoadProvider &lt; ImageVideoWrapper , GifBitmapWrapper &gt;</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre><span class="c1">// DrawableTypeRequest</span>

	<span class="cm">/* resourceClass == GifBitmapWrapper.class */</span>
	<span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">dataLoadProvider</span> <span class="o">=</span> <span class="n">glide</span><span class="o">.</span><span class="na">buildDataProvider</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                <span class="n">resourceClass</span><span class="o">);</span>

<span class="c1">// Glide</span>
	<span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="nf">buildDataProvider</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">dataClass</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">decodedClass</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 似曾相识? 没错也是在 Glide 单例初始化的时候注册的</span>
        <span class="k">return</span> <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">dataClass</span><span class="o">,</span> <span class="n">decodedClass</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="nc">Glide</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">,</span> <span class="nc">MemoryCache</span> <span class="n">memoryCache</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
      	<span class="o">...</span>
        <span class="n">dataLoadProviderRegistry</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataLoadProviderRegistry</span><span class="o">();</span>

        <span class="nc">StreamBitmapDataLoadProvider</span> <span class="n">streamBitmapLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">StreamBitmapDataLoadProvider</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
        <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">streamBitmapLoadProvider</span><span class="o">);</span>

        <span class="nc">FileDescriptorBitmapDataLoadProvider</span> <span class="n">fileDescriptorLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">FileDescriptorBitmapDataLoadProvider</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
        <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">ParcelFileDescriptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">fileDescriptorLoadProvider</span><span class="o">);</span>

        <span class="nc">ImageVideoDataLoadProvider</span> <span class="n">imageVideoDataLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">ImageVideoDataLoadProvider</span><span class="o">(</span><span class="n">streamBitmapLoadProvider</span><span class="o">,</span> <span class="n">fileDescriptorLoadProvider</span><span class="o">);</span>
        <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">imageVideoDataLoadProvider</span><span class="o">);</span>

        <span class="nc">GifDrawableLoadProvider</span> <span class="n">gifDrawableLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">GifDrawableLoadProvider</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">);</span>
        <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">GifDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">gifDrawableLoadProvider</span><span class="o">);</span>

		<span class="c1">// 匹配到这个</span>
        <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">GifBitmapWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">ImageVideoGifDrawableLoadProvider</span><span class="o">(</span><span class="n">imageVideoDataLoadProvider</span><span class="o">,</span> <span class="n">gifDrawableLoadProvider</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">));</span>

        <span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">InputStream</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StreamFileDataLoadProvider</span><span class="o">());</span>
        <span class="o">...</span>
    <span class="o">}</span>

<span class="c1">// ImageVideoGifDrawableLoadProvider</span>
	<span class="kd">public</span> <span class="nf">ImageVideoGifDrawableLoadProvider</span><span class="o">(</span><span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">bitmapProvider</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">InputStream</span><span class="o">,</span> <span class="nc">GifDrawable</span><span class="o">&gt;</span> <span class="n">gifProvider</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>

        <span class="kd">final</span> <span class="nc">GifBitmapWrapperResourceDecoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResourceDecoder</span><span class="o">(</span>
                <span class="n">bitmapProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">(),</span>
                <span class="n">gifProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">(),</span>
                <span class="n">bitmapPool</span>
        <span class="o">);</span>
        <span class="c1">// 解码工具</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileToStreamDecoder</span><span class="o">&lt;</span><span class="nc">GifBitmapWrapper</span><span class="o">&gt;(</span><span class="k">new</span> <span class="nc">GifBitmapWrapperStreamResourceDecoder</span><span class="o">(</span><span class="n">decoder</span><span class="o">));</span>
        <span class="n">sourceDecoder</span> <span class="o">=</span> <span class="n">decoder</span><span class="o">;</span>
        <span class="c1">// 编码工具</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResourceEncoder</span><span class="o">(</span><span class="n">bitmapProvider</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">(),</span> <span class="n">gifProvider</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">());</span>

        <span class="c1">//TODO: what about the gif provider?</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="n">bitmapProvider</span><span class="o">.</span><span class="na">getSourceEncoder</span><span class="o">();</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>DataLoadProvider和我们最终需要创建的ChildLoadProvider是什么关系?  <a href="https://img-blog.csdnimg.cn/20210313124817824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">UML类图参考</a></p>
</blockquote>

<ol>
  <li>初始化解码工具 cacheDecoder: FileToStreamDecoder , sourceDecoder: GifBitmapWrapperResourceDecoder</li>
  <li>初始化编码工具 encoder: GifBitmapWrapperResourceEncoder , sourceEncoder: bitmapProvider.getSourceEncoder()</li>
</ol>

<p>看看具体都是怎么初始化的</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="rouge-code"><pre><span class="c1">// Glide 构造函数</span>
	<span class="nc">StreamBitmapDataLoadProvider</span> <span class="n">streamBitmapLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">StreamBitmapDataLoadProvider</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
    <span class="nc">FileDescriptorBitmapDataLoadProvider</span> <span class="n">fileDescriptorLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">FileDescriptorBitmapDataLoadProvider</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
	<span class="nc">ImageVideoDataLoadProvider</span> <span class="n">imageVideoDataLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">ImageVideoDataLoadProvider</span><span class="o">(</span><span class="n">streamBitmapLoadProvider</span><span class="o">,</span> <span class="n">fileDescriptorLoadProvider</span><span class="o">);</span>
    <span class="o">...</span>
    <span class="nc">GifDrawableLoadProvider</span> <span class="n">gifDrawableLoadProvider</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nf">GifDrawableLoadProvider</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">);</span>
    <span class="o">...</span>
	<span class="n">dataLoadProviderRegistry</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">GifBitmapWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">ImageVideoGifDrawableLoadProvider</span><span class="o">(</span><span class="n">imageVideoDataLoadProvider</span><span class="o">,</span> <span class="n">gifDrawableLoadProvider</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">));</span>

<span class="c1">// StreamBitmapDataLoadProvider 构造</span>
	<span class="kd">public</span> <span class="nf">StreamBitmapDataLoadProvider</span><span class="o">(</span><span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamEncoder</span><span class="o">();</span>
        <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamBitmapDecoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BitmapEncoder</span><span class="o">();</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileToStreamDecoder</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;(</span><span class="n">decoder</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// FileDescriptorBitmapDataLoadProvider 构造</span>
	<span class="kd">public</span> <span class="nf">FileDescriptorBitmapDataLoadProvider</span><span class="o">(</span><span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileToStreamDecoder</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;(</span><span class="k">new</span> <span class="nc">StreamBitmapDecoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">));</span>
        <span class="n">sourceDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDescriptorBitmapDecoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BitmapEncoder</span><span class="o">();</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="nc">NullEncoder</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

<span class="c1">// ImageVideoDataLoadProvider 构造</span>
	<span class="kd">public</span> <span class="nf">ImageVideoDataLoadProvider</span><span class="o">(</span><span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">InputStream</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">streamBitmapProvider</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">ParcelFileDescriptor</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">fileDescriptorBitmapProvider</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="n">streamBitmapProvider</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">();</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageVideoWrapperEncoder</span><span class="o">(</span><span class="n">streamBitmapProvider</span><span class="o">.</span><span class="na">getSourceEncoder</span><span class="o">(),</span>
                <span class="n">fileDescriptorBitmapProvider</span><span class="o">.</span><span class="na">getSourceEncoder</span><span class="o">());</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="n">streamBitmapProvider</span><span class="o">.</span><span class="na">getCacheDecoder</span><span class="o">();</span>
        <span class="n">sourceDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageVideoBitmapDecoder</span><span class="o">(</span><span class="n">streamBitmapProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">(),</span>
                <span class="n">fileDescriptorBitmapProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">());</span>
    <span class="o">}</span>

<span class="c1">// GifDrawableLoadProvider 构造</span>
	<span class="kd">public</span> <span class="nf">GifDrawableLoadProvider</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifResourceDecoder</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">);</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileToStreamDecoder</span><span class="o">&lt;</span><span class="nc">GifDrawable</span><span class="o">&gt;(</span><span class="n">decoder</span><span class="o">);</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifResourceEncoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">);</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamEncoder</span><span class="o">();</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>根据上面的代码我们来换算一下 ImageVideoGifDrawableLoadProvider 的构造</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="rouge-code"><pre><span class="c1">// ImageVideoGifDrawableLoadProvider 构造函数</span>

	<span class="cm">/*
		bitmapProvider &gt;&gt;&gt; imageVideoDataLoadProvider
		;
		gifProvider &gt;&gt;&gt; gifDrawableLoadProvider
	*/</span>
	<span class="kd">public</span> <span class="nf">ImageVideoGifDrawableLoadProvider</span><span class="o">(</span><span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">imageVideoDataLoadProvider</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">InputStream</span><span class="o">,</span> <span class="nc">GifDrawable</span><span class="o">&gt;</span> <span class="n">gifDrawableLoadProvider</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>

        <span class="kd">final</span> <span class="nc">GifBitmapWrapperResourceDecoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResourceDecoder</span><span class="o">(</span>
                <span class="n">imageVideoDataLoadProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">(),</span>
                <span class="n">gifDrawableLoadProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">(),</span>
                <span class="n">bitmapPool</span>
        <span class="o">);</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileToStreamDecoder</span><span class="o">&lt;</span><span class="nc">GifBitmapWrapper</span><span class="o">&gt;(</span><span class="k">new</span> <span class="nc">GifBitmapWrapperStreamResourceDecoder</span><span class="o">(</span><span class="n">decoder</span><span class="o">));</span>
        <span class="n">sourceDecoder</span> <span class="o">=</span> <span class="n">decoder</span><span class="o">;</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResourceEncoder</span><span class="o">(</span><span class="n">imageVideoDataLoadProvider</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">(),</span> <span class="n">gifDrawableLoadProvider</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">());</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="n">imageVideoDataLoadProvider</span><span class="o">.</span><span class="na">getSourceEncoder</span><span class="o">();</span>
    <span class="o">}</span>

	<span class="cm">/*
		imageVideoDataLoadProvider.getSourceDecoder
		&gt;&gt;&gt;
		new ImageVideoBitmapDecoder(streamBitmapProvider.getSourceDecoder(),fileDescriptorBitmapProvider.getSourceDecoder())
        &gt;&gt;&gt;
        new ImageVideoBitmapDecoder(new StreamBitmapDecoder(bitmapPool, decodeFormat), new FileDescriptorBitmapDecoder(bitmapPool, decodeFormat))
		;
		gifDrawableLoadProvider.getSourceDecoder() &gt;&gt;&gt; new GifResourceDecoder(context, bitmapPool)
		;
		imageVideoDataLoadProvider.getEncoder() &gt;&gt;&gt; streamBitmapProvider.getEncoder() &gt;&gt;&gt; new BitmapEncoder()
		;
		gifDrawableLoadProvider.getEncoder() &gt;&gt;&gt; new GifResourceEncoder(bitmapPool)
		;
		imageVideoDataLoadProvider.getSourceEncoder()
		&gt;&gt;&gt;
		new ImageVideoWrapperEncoder(streamBitmapProvider.getSourceEncoder(), fileDescriptorBitmapProvider.getSourceEncoder())
        &gt;&gt;&gt;
        new ImageVideoWrapperEncoder(new StreamEncoder(), NullEncoder.get())
	*/</span>
	<span class="kd">public</span> <span class="nf">ImageVideoGifDrawableLoadProvider</span><span class="o">(</span><span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">imageVideoDataLoadProvider</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="nc">InputStream</span><span class="o">,</span> <span class="nc">GifDrawable</span><span class="o">&gt;</span> <span class="n">gifDrawableLoadProvider</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>

        <span class="kd">final</span> <span class="nc">GifBitmapWrapperResourceDecoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResourceDecoder</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">ImageVideoBitmapDecoder</span><span class="o">(</span><span class="k">new</span> <span class="nc">StreamBitmapDecoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">),</span> <span class="k">new</span> <span class="nc">FileDescriptorBitmapDecoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">)),</span>
                <span class="k">new</span> <span class="nf">GifResourceDecoder</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">),</span>
                <span class="n">bitmapPool</span>
        <span class="o">);</span>
        <span class="n">cacheDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileToStreamDecoder</span><span class="o">&lt;</span><span class="nc">GifBitmapWrapper</span><span class="o">&gt;(</span><span class="k">new</span> <span class="nc">GifBitmapWrapperStreamResourceDecoder</span><span class="o">(</span><span class="n">decoder</span><span class="o">));</span>
        <span class="n">sourceDecoder</span> <span class="o">=</span> <span class="n">decoder</span><span class="o">;</span>
        <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResourceEncoder</span><span class="o">(</span><span class="k">new</span> <span class="nc">BitmapEncoder</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">GifResourceEncoder</span><span class="o">(</span><span class="n">bitmapPool</span><span class="o">));</span>
        <span class="n">sourceEncoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageVideoWrapperEncoder</span><span class="o">(</span><span class="k">new</span> <span class="nc">StreamEncoder</span><span class="o">(),</span> <span class="nc">NullEncoder</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>总结一下, 看看 ImageVideoGifDrawableLoadProvider 都初始化了哪些内容</p>
<ul>
  <li>FileToStreamDecoder 存储在 cacheDecoder</li>
  <li>GifBitmapWrapperStreamResourceDecoder 存储在 sourceDecoder</li>
  <li>GifBitmapWrapperResourceEncoder 存储在 encoder</li>
  <li>ImageVideoWrapperEncoder 存储在  sourceEncoder
<img src="https://img-blog.csdnimg.cn/20210313164653242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
</ul>

<p>回到 <strong>[3.2.4] ChildLoadProvider 工具集合的创建</strong> , 还差个工具没有构建 ImageVideoModelLoader &lt; String &gt;</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// DrawableTypeRequest</span>

	<span class="n">buildProvider</span><span class="o">(</span><span class="n">glide</span><span class="o">,</span> <span class="n">streamModelLoader</span><span class="o">,</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="nc">GifBitmapWrapper</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">GlideDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">FixedLoadProvider</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">ImageVideoWrapper</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nf">buildProvider</span><span class="o">(</span><span class="nc">Glide</span> <span class="n">glide</span><span class="o">,</span>
            <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamModelLoader</span><span class="o">,</span>
            <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorModelLoader</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">resourceClass</span><span class="o">,</span>
            <span class="nc">Class</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="n">transcodedClass</span><span class="o">,</span>
            <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="nc">ImageVideoModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">&gt;</span> <span class="n">modelLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageVideoModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">&gt;(</span><span class="n">streamModelLoader</span><span class="o">,</span>
                <span class="n">fileDescriptorModelLoader</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>可能之前的创建过程大家已经忘记了, 需要补充的是:</p>
  <ul>
    <li>streamModelLoader 可以参考目录 <strong>创建下载模块1</strong></li>
    <li>fileDescriptorModelLoader 可以参考 <strong>创建下载模块2</strong></li>
    <li>A 是 <strong>String.class</strong></li>
  </ul>
</blockquote>

<h4 id="构建工具集合下载3">构建工具集合(下载3)</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre> <span class="c1">// ImageVideoModelLoader</span>

 	<span class="kd">public</span> <span class="nf">ImageVideoModelLoader</span><span class="o">(</span><span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">&gt;</span> <span class="n">streamLoader</span><span class="o">,</span>
            <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="nc">ParcelFileDescriptor</span><span class="o">&gt;</span> <span class="n">fileDescriptorLoader</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">this</span><span class="o">.</span><span class="na">streamLoader</span> <span class="o">=</span> <span class="n">streamLoader</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">fileDescriptorLoader</span> <span class="o">=</span> <span class="n">fileDescriptorLoader</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>所以最后创建的是 ImageVideoModelLoader &lt; String &gt; , 其下封装了两个之前创建的下载模块</p>
<ul>
  <li>下载模块1 StreamStringLoader</li>
  <li>下载模块2 FileDescriptorStringLoader
<img src="https://img-blog.csdnimg.cn/20210313141039582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
</ul>

<h2 id="33-load-小结">[3.3] load() 小结</h2>
<p>load() 从头至尾只构建了 <strong>Request(用户)</strong> 这一个实例 , 并把 <strong>一系列工具</strong> 打包进这个实例</p>
<ol>
  <li>创建: Request(用户) 实例 , <a href="https://img-blog.csdnimg.cn/20210311195313868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">GenericRequestBuilder 类型</a></li>
  <li>打包: 下载工具1 ( <a href="https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">ModelLoader 类型</a> )</li>
  <li>打包: 下载工具2 ( <a href="https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">ModelLoader 类型</a> )</li>
  <li>打包: 工具集合1 ( <a href="https://img-blog.csdnimg.cn/20210313142352405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">DataLoadProvider 类型</a> )
    a. 打包: 转码1 ( GifBitmapWrapperDrawableTranscoder 类型 )
    b. 打包: 编/解码1 ( ImageVideoGifDrawableLoadProvider &lt; ImageVideoWrapper , GifBitmapWrapper &gt; 类型 )
    c. 打包: 下载3 ( ImageVideoModelLoader &lt; String &gt; 类型)
<img src="https://img-blog.csdnimg.cn/20210313143350768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
现在再来看这张流程图解, 是不是清晰一点?
<img src="https://img-blog.csdnimg.cn/20210313143433730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_20,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li>
</ol>

<h2 id="34-into">[3.4] into()</h2>
<p><strong>工具</strong>都备齐了, 下面开始走 <strong>构建Request(真实)»下载 »&gt; 解码 »&gt; 转码 »&gt; 加载</strong> 流程
<img src="https://img-blog.csdnimg.cn/20210313143806550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>

<h3 id="341-构建request真实">[3.4.1] 构建Request(真实)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequestBuilder (Request用户实例)</span>
	<span class="kd">public</span> <span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="nf">into</span><span class="o">(</span><span class="nc">ImageView</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// 前文创建 Request(用户) 提过 , GlideDrawable.class = transcodeClass</span>
        <span class="k">return</span> <span class="nf">into</span><span class="o">(</span><span class="n">glide</span><span class="o">.</span><span class="na">buildImageViewTarget</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">transcodeClass</span><span class="o">));</span>
    <span class="o">}</span>

<span class="c1">// Glide</span>
	<span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nc">Target</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nf">buildImageViewTarget</span><span class="o">(</span><span class="nc">ImageView</span> <span class="n">imageView</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="n">transcodedClass</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">imageViewTargetFactory</span><span class="o">.</span><span class="na">buildTarget</span><span class="o">(</span><span class="n">imageView</span><span class="o">,</span> <span class="n">transcodedClass</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// ImageViewTargetFactory</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nc">Target</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">buildTarget</span><span class="o">(</span><span class="nc">ImageView</span> <span class="n">view</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">GlideDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">clazz</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="nc">Target</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;)</span> <span class="k">new</span> <span class="nc">GlideDrawableImageViewTarget</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>创建了一个 GlideDrawableImageViewTarget &lt; GlideDrawable &gt; 实例 , 再往下跟进 into</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequestBuilder (Request用户实例)</span>

	<span class="c1">// TranscodeType = GlideDrawable</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">Y</span> <span class="kd">extends</span> <span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;&gt;</span> <span class="no">Y</span> <span class="nf">into</span><span class="o">(</span><span class="no">Y</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// 这里开始构建 Request(真实)!!!</span>
        <span class="nc">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">buildRequest</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">target</span><span class="o">.</span><span class="na">setRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">lifecycle</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">requestTracker</span><span class="o">.</span><span class="na">runRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">target</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Request</span> <span class="nf">buildRequest</span><span class="o">(</span><span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="nf">buildRequestRecursive</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Request</span> <span class="nf">buildRequestRecursive</span><span class="o">(</span><span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">target</span><span class="o">,</span> <span class="nc">ThumbnailRequestCoordinator</span> <span class="n">parentCoordinator</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="nf">obtainRequest</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">sizeMultiplier</span><span class="o">,</span> <span class="n">priority</span><span class="o">,</span> <span class="n">parentCoordinator</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Request</span> <span class="nf">obtainRequest</span><span class="o">(</span><span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">target</span><span class="o">,</span> <span class="kt">float</span> <span class="n">sizeMultiplier</span><span class="o">,</span> <span class="nc">Priority</span> <span class="n">priority</span><span class="o">,</span>
            <span class="nc">RequestCoordinator</span> <span class="n">requestCoordinator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">GenericRequest</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span>
                <span class="n">loadProvider</span><span class="o">,</span>
                <span class="n">model</span><span class="o">,</span>
                <span class="n">signature</span><span class="o">,</span>
                <span class="n">context</span><span class="o">,</span>
                <span class="n">priority</span><span class="o">,</span>
                <span class="n">target</span><span class="o">,</span>
                <span class="n">sizeMultiplier</span><span class="o">,</span>
                <span class="n">placeholderDrawable</span><span class="o">,</span>
                <span class="n">placeholderId</span><span class="o">,</span>
                <span class="n">errorPlaceholder</span><span class="o">,</span>
                <span class="n">errorId</span><span class="o">,</span>
                <span class="n">fallbackDrawable</span><span class="o">,</span>
                <span class="n">fallbackResource</span><span class="o">,</span>
                <span class="n">requestListener</span><span class="o">,</span>
                <span class="n">requestCoordinator</span><span class="o">,</span>
                <span class="n">glide</span><span class="o">.</span><span class="na">getEngine</span><span class="o">(),</span>
                <span class="n">transformation</span><span class="o">,</span>
                <span class="n">transcodeClass</span><span class="o">,</span>
                <span class="n">isCacheable</span><span class="o">,</span>
                <span class="n">animationFactory</span><span class="o">,</span>
                <span class="n">overrideWidth</span><span class="o">,</span>
                <span class="n">overrideHeight</span><span class="o">,</span>
                <span class="n">diskCacheStrategy</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>以上, Request(真实) ( <a href="https://img-blog.csdnimg.cn/20210313145538902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5">GenericRequest 类型</a> ) 构建完毕 , 可以看出它包含了所有 Glide 加载所需的工具 , 参数等
<img src="https://img-blog.csdnimg.cn/20210313145821672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h3 id="342-下载">[3.4.2] 下载</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequestBuilder (Request用户实例)</span>

	<span class="c1">// TranscodeType = GlideDrawable</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">Y</span> <span class="kd">extends</span> <span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;&gt;</span> <span class="no">Y</span> <span class="nf">into</span><span class="o">(</span><span class="no">Y</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// 这里开始构建 Request(真实)!!!</span>
        <span class="nc">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">buildRequest</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">target</span><span class="o">.</span><span class="na">setRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">lifecycle</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="c1">// 开始任务啦</span>
        <span class="n">requestTracker</span><span class="o">.</span><span class="na">runRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">target</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// RequestTracker</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">runRequest</span><span class="o">(</span><span class="nc">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">request</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span>
        <span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>已知 Request 是 GenericRequest 类型</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequest</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">begin</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Util</span><span class="o">.</span><span class="na">isValidDimensions</span><span class="o">(</span><span class="n">overrideWidth</span><span class="o">,</span> <span class="n">overrideHeight</span><span class="o">))</span> <span class="o">{</span>
        	<span class="c1">// 最终走这个分支</span>
            <span class="n">onSizeReady</span><span class="o">(</span><span class="n">overrideWidth</span><span class="o">,</span> <span class="n">overrideHeight</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        	<span class="c1">// 异步获取 size , 最终回调 onSizeReady 方法</span>
            <span class="n">target</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
		<span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>Glide 会按照 ImageView 控件的大小来计算所需要的图片的大小, 尽量减少内存开支
如果对于 异步计算界面 ImageView 组件大小感兴趣 , 可以看看这篇文章 <a href="">Android Glide 3.7.0 源码解析(X), 如何异步获取 ImageView 的组件长宽(暂未实现, 标记一下免得忘记)</a></p>
</blockquote>

<p>下面进入 onSizeReady 继续</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequest</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSizeReady</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">width</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">sizeMultiplier</span> <span class="o">*</span> <span class="n">width</span><span class="o">);</span>
        <span class="n">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">sizeMultiplier</span> <span class="o">*</span> <span class="n">height</span><span class="o">);</span>

        <span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">modelLoader</span> <span class="o">=</span> <span class="n">loadProvider</span><span class="o">.</span><span class="na">getModelLoader</span><span class="o">();</span>
        <span class="kd">final</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">dataFetcher</span> <span class="o">=</span> <span class="n">modelLoader</span><span class="o">.</span><span class="na">getResourceFetcher</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>

        <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span> <span class="o">=</span> <span class="n">loadProvider</span><span class="o">.</span><span class="na">getTranscoder</span><span class="o">();</span>

        <span class="n">loadedFromMemoryCache</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="c1">// 这里</span>
        <span class="n">loadStatus</span> <span class="o">=</span> <span class="n">engine</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">signature</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">dataFetcher</span><span class="o">,</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="n">transformation</span><span class="o">,</span> <span class="n">transcoder</span><span class="o">,</span>
                <span class="n">priority</span><span class="o">,</span> <span class="n">isMemoryCacheable</span><span class="o">,</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
        <span class="n">loadedFromMemoryCache</span> <span class="o">=</span> <span class="n">resource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>可以翻看 <strong>Request(真实)的构建</strong>得, engine 是</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">//</span>
	<span class="kd">private</span> <span class="nc">Request</span> <span class="nf">obtainRequest</span><span class="o">(</span><span class="nc">Target</span><span class="o">&lt;</span><span class="nc">TranscodeType</span><span class="o">&gt;</span> <span class="n">target</span><span class="o">,</span> <span class="kt">float</span> <span class="n">sizeMultiplier</span><span class="o">,</span> <span class="nc">Priority</span> <span class="n">priority</span><span class="o">,</span>
            <span class="nc">RequestCoordinator</span> <span class="n">requestCoordinator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">GenericRequest</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span>
        				<span class="o">...</span>
						<span class="n">glide</span><span class="o">.</span><span class="na">getEngine</span><span class="o">()</span>
						<span class="o">...</span>
						<span class="o">);</span>

<span class="c1">// Glide</span>
	<span class="nc">Engine</span> <span class="nf">getEngine</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">engine</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="nc">Glide</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">,</span> <span class="nc">MemoryCache</span> <span class="n">memoryCache</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">DecodeFormat</span> <span class="n">decodeFormat</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">engine</span> <span class="o">=</span> <span class="n">engine</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// GlideBuilder</span>
	<span class="nc">Glide</span> <span class="nf">createGlide</span><span class="o">(){</span>
		<span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Engine</span><span class="o">(</span><span class="n">memoryCache</span><span class="o">,</span> <span class="n">diskCacheFactory</span><span class="o">,</span> <span class="n">diskCacheService</span><span class="o">,</span> <span class="n">sourceService</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Glide</span><span class="o">(</span><span class="n">engine</span><span class="o">,</span> <span class="n">memoryCache</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
	<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>下面进入 Engine 的 load 方法</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// Engine</span>

	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">LoadStatus</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Key</span> <span class="n">signature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">fetcher</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="nc">Transformation</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">transformation</span><span class="o">,</span> <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span><span class="o">,</span>
            <span class="nc">Priority</span> <span class="n">priority</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isMemoryCacheable</span><span class="o">,</span> <span class="nc">DiskCacheStrategy</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="nc">ResourceCallback</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="nc">EngineJob</span> <span class="n">engineJob</span> <span class="o">=</span> <span class="n">engineJobFactory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">isMemoryCacheable</span><span class="o">);</span>
        <span class="nc">DecodeJob</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">decodeJob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DecodeJob</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;(</span><span class="n">key</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">fetcher</span><span class="o">,</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="n">transformation</span><span class="o">,</span>
                <span class="n">transcoder</span><span class="o">,</span> <span class="n">diskCacheProvider</span><span class="o">,</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="n">priority</span><span class="o">);</span>
        <span class="nc">EngineRunnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EngineRunnable</span><span class="o">(</span><span class="n">engineJob</span><span class="o">,</span> <span class="n">decodeJob</span><span class="o">,</span> <span class="n">priority</span><span class="o">);</span>
        <span class="n">jobs</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">engineJob</span><span class="o">);</span>
        <span class="n">engineJob</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="n">cb</span><span class="o">);</span>
        <span class="c1">// 调用 EngineRunnable.run</span>
        <span class="n">engineJob</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
		<span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>根据 <strong>构建的 Request ( 用户 )</strong> FixedLoadProvider &lt; String , ImageVideoWrapper , GifBitmapWrapper , GlideDrawable&gt; 得</p>
  <ul>
    <li>T : ImageVideoWrapper</li>
    <li>Z : GifBitmapWrapper</li>
  </ul>

  <p>根据 <strong>创建的转码1</strong> GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt; 得</p>
  <ul>
    <li>R : GlideDrawable</li>
  </ul>
</blockquote>

<p>最终走到 EngineRunnable 的 run 方法</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="c1">// EngineRunnable</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">resource</span> <span class="o">=</span> <span class="n">decode</span><span class="o">();</span>
        <span class="o">...</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">decode</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="nf">decodeFromSource</span><span class="o">();</span>
        <span class="o">...</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">decodeFromSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">decodeJob</span><span class="o">.</span><span class="na">decodeFromSource</span><span class="o">();</span>
    <span class="o">}</span>

<span class="c1">// DecodeJob</span>

	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">decodeFromSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	    <span class="c1">// 分支1, 下载 &amp;&amp; 解码</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeSource</span><span class="o">();</span>
        <span class="c1">// 分支2, 转码</span>
        <span class="k">return</span> <span class="nf">transformEncodeAndTranscode</span><span class="o">(</span><span class="n">decoded</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="c1">// 此小节我们先分析 下载</span>
	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">decodeSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="kd">final</span> <span class="no">A</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
        <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeFromSourceData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="n">fetcher</span><span class="o">.</span><span class="na">cleanup</span><span class="o">();</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">decoded</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>注意: 线程已切换到子线程</p>
</blockquote>

<p>来看看 fetcher 在哪边赋的值</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequest</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSizeReady</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ModelLoader</span><span class="o">&lt;</span><span class="no">A</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">modelLoader</span> <span class="o">=</span> <span class="n">loadProvider</span><span class="o">.</span><span class="na">getModelLoader</span><span class="o">();</span>
        <span class="kd">final</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">dataFetcher</span> <span class="o">=</span> <span class="n">modelLoader</span><span class="o">.</span><span class="na">getResourceFetcher</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="c1">// 这里</span>
        <span class="n">loadStatus</span> <span class="o">=</span> <span class="n">engine</span><span class="o">.</span><span class="na">load</span><span class="o">(...,</span> <span class="n">dataFetcher</span><span class="o">...);</span>
    <span class="o">}</span>

<span class="c1">// Engine</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">LoadStatus</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Key</span> <span class="n">signature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">fetcher</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="nc">Transformation</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">transformation</span><span class="o">,</span> <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span><span class="o">,</span>
            <span class="nc">Priority</span> <span class="n">priority</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isMemoryCacheable</span><span class="o">,</span> <span class="nc">DiskCacheStrategy</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="nc">ResourceCallback</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// 这里</span>
        <span class="nc">DecodeJob</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">decodeJob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DecodeJob</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;(...,</span> <span class="n">fetcher</span><span class="o">,</span> <span class="o">...);</span>
		<span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>根据 <strong>创建的集合工具1中的下载3</strong> ImageVideoModelLoader &lt; String &gt; 得, 调用的是ImageVideoModelLoader.getResourceFetcher</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">// ImageVideoModelLoader</span>

	<span class="kd">public</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="nc">ImageVideoWrapper</span><span class="o">&gt;</span> <span class="nf">getResourceFetcher</span><span class="o">(</span><span class="no">A</span> <span class="n">model</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ImageVideoFetcher</span><span class="o">(</span><span class="n">streamFetcher</span><span class="o">,</span> <span class="n">fileDescriptorFetcher</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>根据<strong>创建下载3</strong>过程得知, streamFetcher 是 <strong>下载1</strong> , fileDescriptorFetcher 是 <strong>下载2</strong> ,</li>
  <li>那么 fetcher 是 <strong>ImageVideoFetcher</strong></li>
</ul>

<p>现在再回到调用 fetcher 的部分</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="c1">// DecodeJob</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">decodeSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">//</span>
        <span class="kd">final</span> <span class="no">A</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
        <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeFromSourceData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="n">fetcher</span><span class="o">.</span><span class="na">cleanup</span><span class="o">();</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">decoded</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// ImageVideoFetcher</span>

	<span class="kd">public</span> <span class="nc">ImageVideoWrapper</span> <span class="nf">loadData</span><span class="o">(</span><span class="nc">Priority</span> <span class="n">priority</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
            <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">...</span>
            <span class="c1">// 调用下载1的getResourceFetcher.loadData</span>
            <span class="n">is</span> <span class="o">=</span> <span class="n">streamFetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
            <span class="o">...</span>
            <span class="nc">ParcelFileDescriptor</span> <span class="n">fileDescriptor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">...</span>
            <span class="c1">// 调用下载2的getResourceFetcher.loadData</span>
            <span class="n">fileDescriptor</span> <span class="o">=</span> <span class="n">fileDescriptorFetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
            <span class="o">....</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ImageVideoWrapper</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">fileDescriptor</span><span class="o">);</span>
        <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>先看 <strong>下载1</strong>的 loadData</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
</pre></td><td class="rouge-code"><pre><span class="c1">// StreamStringLoader</span>

	<span class="kd">public</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getResourceFetcher</span><span class="o">(</span><span class="nc">String</span> <span class="n">model</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Uri</span> <span class="n">uri</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">model</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"/"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">uri</span> <span class="o">=</span> <span class="n">toFileUri</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">uri</span> <span class="o">=</span> <span class="nc">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
            <span class="kd">final</span> <span class="nc">String</span> <span class="n">scheme</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">scheme</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">uri</span> <span class="o">=</span> <span class="n">toFileUri</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

		<span class="c1">// uriLoader 是一个 HttpUrlGlideUrlLoader 下载1构建的时候有提到</span>
        <span class="k">return</span> <span class="n">uriLoader</span><span class="o">.</span><span class="na">getResourceFetcher</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// HttpUrlGlideUrlLoader</span>

	<span class="kd">public</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="nc">InputStream</span><span class="o">&gt;</span> <span class="nf">getResourceFetcher</span><span class="o">(</span><span class="nc">GlideUrl</span> <span class="n">model</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpUrlFetcher</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// HttpUrlFetcher</span>
	<span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">loadData</span><span class="o">(</span><span class="nc">Priority</span> <span class="n">priority</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">loadDataWithRedirects</span><span class="o">(</span><span class="n">glideUrl</span><span class="o">.</span><span class="na">toURL</span><span class="o">(),</span> <span class="mi">0</span> <span class="cm">/*redirects*/</span><span class="o">,</span> <span class="kc">null</span> <span class="cm">/*lastUrl*/</span><span class="o">,</span> <span class="n">glideUrl</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">());</span>
    <span class="o">}</span>

	<span class="c1">// 终于找到了, 一个标准的 HttpURLConnection 下载</span>
	<span class="kd">private</span> <span class="nc">InputStream</span> <span class="nf">loadDataWithRedirects</span><span class="o">(</span><span class="no">URL</span> <span class="n">url</span><span class="o">,</span> <span class="kt">int</span> <span class="n">redirects</span><span class="o">,</span> <span class="no">URL</span> <span class="n">lastUrl</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">headers</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">urlConnection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">headerEntry</span> <span class="o">:</span> <span class="n">headers</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
          <span class="n">urlConnection</span><span class="o">.</span><span class="na">addRequestProperty</span><span class="o">(</span><span class="n">headerEntry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">headerEntry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">urlConnection</span><span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">2500</span><span class="o">);</span>
        <span class="n">urlConnection</span><span class="o">.</span><span class="na">setReadTimeout</span><span class="o">(</span><span class="mi">2500</span><span class="o">);</span>
        <span class="n">urlConnection</span><span class="o">.</span><span class="na">setUseCaches</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">urlConnection</span><span class="o">.</span><span class="na">setDoInput</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

        <span class="c1">// Connect explicitly to avoid errors in decoders if connection fails.</span>
        <span class="n">urlConnection</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isCancelled</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">statusCode</span> <span class="o">=</span> <span class="n">urlConnection</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">statusCode</span> <span class="o">/</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
        	<span class="c1">// 读取流</span>
            <span class="k">return</span> <span class="nf">getStreamForSuccessfulRequest</span><span class="o">(</span><span class="n">urlConnection</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="o">...</span>
    <span class="o">}</span>
	<span class="kd">private</span> <span class="nc">InputStream</span> <span class="nf">getStreamForSuccessfulRequest</span><span class="o">(</span><span class="nc">HttpURLConnection</span> <span class="n">urlConnection</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">stream</span> <span class="o">=</span> <span class="n">urlConnection</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">stream</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li><strong>下载1</strong>的下载任务看完, 就是一个标准的 HttpURLConnection 下载</li>
  <li>下面来看看 <strong>下载2</strong> 都干了啥?</li>
</ul>

<p><strong>下载2</strong>类型是 <strong>FileDescriptorStringLoader&lt;String, ParcelFileDescriptor&gt;</strong>
<img src="https://img-blog.csdnimg.cn/2021031316185379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="c1">// FileDescriptorStringLoader</span>
	<span class="kd">public</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getResourceFetcher</span><span class="o">(</span><span class="nc">String</span> <span class="n">model</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Uri</span> <span class="n">uri</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">model</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"/"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">uri</span> <span class="o">=</span> <span class="n">toFileUri</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">uri</span> <span class="o">=</span> <span class="nc">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
            <span class="kd">final</span> <span class="nc">String</span> <span class="n">scheme</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">scheme</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">uri</span> <span class="o">=</span> <span class="n">toFileUri</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">uriLoader</span><span class="o">.</span><span class="na">getResourceFetcher</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// FileDescriptorUriLoader</span>
	<span class="kd">public</span> <span class="kd">final</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getResourceFetcher</span><span class="o">(</span><span class="nc">Uri</span> <span class="n">model</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">String</span> <span class="n">scheme</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="na">getScheme</span><span class="o">();</span>

        <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isLocalUri</span><span class="o">(</span><span class="n">scheme</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">AssetUriParser</span><span class="o">.</span><span class="na">isAssetUri</span><span class="o">(</span><span class="n">model</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="nc">AssetUriParser</span><span class="o">.</span><span class="na">toAssetPath</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">getAssetPathFetcher</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">path</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">getLocalUriFetcher</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">urlLoader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="s">"http"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">scheme</span><span class="o">)</span> <span class="o">||</span> <span class="s">"https"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">scheme</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">urlLoader</span><span class="o">.</span><span class="na">getResourceFetcher</span><span class="o">(</span><span class="k">new</span> <span class="nc">GlideUrl</span><span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">toString</span><span class="o">()),</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>得 <strong>下载2</strong>的 loaData 最后返回 null , 因为我们要下载的是一个网络资源</li>
  <li>回到上面<strong>下载3</strong> 的下载</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1">// ImageVideoFetcher</span>

	<span class="kd">public</span> <span class="nc">ImageVideoWrapper</span> <span class="nf">loadData</span><span class="o">(</span><span class="nc">Priority</span> <span class="n">priority</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
            <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">...</span>
            <span class="c1">// 调用下载1的getResourceFetcher.loadData</span>
            <span class="n">is</span> <span class="o">=</span> <span class="n">streamFetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
            <span class="o">...</span>
            <span class="nc">ParcelFileDescriptor</span> <span class="n">fileDescriptor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">...</span>
            <span class="c1">// 调用下载2的getResourceFetcher.loadData</span>
            <span class="n">fileDescriptor</span> <span class="o">=</span> <span class="n">fileDescriptorFetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
            <span class="o">....</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ImageVideoWrapper</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">fileDescriptor</span><span class="o">);</span>
        <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li><strong>下载3</strong>的下载结果为: new ImageVideoWrapper(“下载1下载的流”, null)
下载这一小节结束, 下一个流程: <strong>解码</strong></li>
</ul>

<h3 id="343-解码">[3.4.3] 解码</h3>
<p>让我们先回到上面刚刚开始切换线程的地方</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// DecodeJob</span>

	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">decodeFromSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	    <span class="c1">// 分支1, 下载 &amp;&amp; 解码</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeSource</span><span class="o">();</span>
        <span class="c1">// 分支2, 转码</span>
        <span class="k">return</span> <span class="nf">transformEncodeAndTranscode</span><span class="o">(</span><span class="n">decoded</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">decodeSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">...</span>
        <span class="kd">final</span> <span class="no">A</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fetcher</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeFromSourceData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="n">fetcher</span><span class="o">.</span><span class="na">cleanup</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">decoded</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>现在我们来看看<strong>分支1 解码</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">// DecodeJob</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">decodeFromSourceData</span><span class="o">(</span><span class="no">A</span> <span class="n">data</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span><span class="o">;</span>
        <span class="o">...</span>
        <span class="n">decoded</span> <span class="o">=</span> <span class="n">loadProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">decoded</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>这里 <strong>data</strong> 类型是 <strong>ImageVideoWrapper</strong> (参考 [ 3.4.2 ] 下载)</li>
  <li><strong>loadProvider</strong> 的类型是 <strong>构建 FixedLoadProvider &lt; String , ImageVideoWrapper , GifBitmapWrapper , GlideDrawable&gt;</strong> ( 参考 [ 3.2.4 ] 工具集合1 )</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// FixedLoadProvider</span>
	<span class="kd">public</span> <span class="nc">ResourceDecoder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="nf">getSourceDecoder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dataLoadProvider</span><span class="o">.</span><span class="na">getSourceDecoder</span><span class="o">();</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li><strong>dataLoadProvider</strong> 类型是 **ImageVideoGifDrawableLoadProvider &lt;ImageVideoWrapper ,GifBitmapWrapper &gt; ** ( 参考编/解码1 )</li>
  <li>其中 <strong>SourceDecoder</strong> 是 <strong>GifBitmapWrapperResourceDecoder</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// GifBitmapWrapperResourceDecoder</span>
	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">GifBitmapWrapper</span><span class="o">&gt;</span> <span class="nf">decode</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">wrapper</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">tempBytes</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="n">wrapper</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="k">new</span> <span class="nc">GifBitmapWrapperResource</span><span class="o">(</span><span class="n">wrapper</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">GifBitmapWrapper</span> <span class="nf">decode</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">GifBitmapWrapper</span> <span class="n">result</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">getStream</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">decodeStream</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">bytes</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">decodeBitmapWrapper</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>参考<strong>下载</strong>流程, 得, source = new ImageVideoWrapper(“下载1下载的流”, null)</li>
  <li>走 decodeStream 函数</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
</pre></td><td class="rouge-code"><pre><span class="c1">// GifBitmapWrapperResourceDecoder</span>

	<span class="kd">private</span> <span class="nc">GifBitmapWrapper</span> <span class="nf">decodeStream</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">InputStream</span> <span class="n">bis</span> <span class="o">=</span> <span class="n">streamFactory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">getStream</span><span class="o">(),</span> <span class="n">bytes</span><span class="o">);</span>
        <span class="n">bis</span><span class="o">.</span><span class="na">mark</span><span class="o">(</span><span class="no">MARK_LIMIT_BYTES</span><span class="o">);</span>
        <span class="nc">ImageHeaderParser</span><span class="o">.</span><span class="na">ImageType</span> <span class="n">type</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">bis</span><span class="o">);</span>
        <span class="n">bis</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>

        <span class="nc">GifBitmapWrapper</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">ImageHeaderParser</span><span class="o">.</span><span class="na">ImageType</span><span class="o">.</span><span class="na">GIF</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">decodeGifWrapper</span><span class="o">(</span><span class="n">bis</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">...</span>
            <span class="nc">ImageVideoWrapper</span> <span class="n">forBitmapDecoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageVideoWrapper</span><span class="o">(</span><span class="n">bis</span><span class="o">,</span> <span class="n">source</span><span class="o">.</span><span class="na">getFileDescriptor</span><span class="o">());</span>
            <span class="c1">// 显然我们不是个gif , 走这里</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">decodeBitmapWrapper</span><span class="o">(</span><span class="n">forBitmapDecoder</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">GifBitmapWrapper</span> <span class="nf">decodeBitmapWrapper</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span> <span class="n">toDecode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">GifBitmapWrapper</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="c1">// 参考[编/解码1]可得 bitmapDecoder = ImageVideoBitmapDecoder</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">bitmapResource</span> <span class="o">=</span> <span class="n">bitmapDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">toDecode</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">bitmapResource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GifBitmapWrapper</span><span class="o">(</span><span class="n">bitmapResource</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// ImageVideoBitmapDecoder</span>
	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="nf">decode</span><span class="o">(</span><span class="nc">ImageVideoWrapper</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="na">getStream</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">is</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
            	<span class="c1">// 我们是标准流, 应该走这里</span>
            	<span class="c1">// 参考[编/解码1]可得 streamDecoder = StreamBitmapDecoder</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">streamDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">VERBOSE</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Failed to load image from stream, trying FileDescriptor"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">ParcelFileDescriptor</span> <span class="n">fileDescriptor</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="na">getFileDescriptor</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">fileDescriptor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">fileDescriptorDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">fileDescriptor</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// StreamBitmapDecoder</span>

	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="nf">decode</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 层次太深, 这里就不做分析了, downsampler是一个工具类, 专门用作原始资源流转换成图片的</span>
        <span class="nc">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">downsampler</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">decodeFormat</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">BitmapResource</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">bitmap</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// BitmapResource</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">BitmapResource</span> <span class="nf">obtain</span><span class="o">(</span><span class="nc">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="nc">BitmapPool</span> <span class="n">bitmapPool</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">BitmapResource</span><span class="o">(</span><span class="n">bitmap</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>解码之后我们得到了一个 <strong>BitmapResource</strong>实例, 里面封存了一张 Bitmap, 是 Resource &lt; Bitmap &gt; 类型</li>
  <li>最后返回给上面的时候是一个 <strong>GifBitmapWrapper</strong> 实例, 里面封存了一个 <strong>BitmapResource</strong> 实例 (参考 GifBitmapWrapperResourceDecoder.decodeBitmapWrapper 这个函数)</li>
</ul>

<p>下面来看看转码做了些啥?</p>

<h3 id="344-转码">[3.4.4] 转码</h3>
<p>回到之前的 DecodeJob , 这次我们来看<strong>分支2</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="rouge-code"><pre><span class="c1">// DecodeJob</span>

	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">decodeFromSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	    <span class="c1">// 分支1, 下载 &amp;&amp; 解码</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeSource</span><span class="o">();</span>
        <span class="c1">// 分支2, 转码</span>
        <span class="k">return</span> <span class="nf">transformEncodeAndTranscode</span><span class="o">(</span><span class="n">decoded</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">transformEncodeAndTranscode</span><span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="nc">LogTime</span><span class="o">.</span><span class="na">getLogTime</span><span class="o">();</span>
		<span class="c1">// 这里的 T 是 GifBitmapWrapper , 这个函数是进行图形变换的, 和主线无关,跳过</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">transformed</span> <span class="o">=</span> <span class="n">transform</span><span class="o">(</span><span class="n">decoded</span><span class="o">);</span>

        <span class="c1">// 转码</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">transcode</span><span class="o">(</span><span class="n">transformed</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">VERBOSE</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">logWithTimeAndKey</span><span class="o">(</span><span class="s">"Transcoded transformed from source"</span><span class="o">,</span> <span class="n">startTime</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">transcode</span><span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">transformed</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transformed</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 查看[转码1]工具, transcoder ==</span>
        <span class="c1">// GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt;</span>
        <span class="k">return</span> <span class="n">transcoder</span><span class="o">.</span><span class="na">transcode</span><span class="o">(</span><span class="n">transformed</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// GifBitmapWrapperDrawableTranscoder</span>
	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">GlideDrawable</span><span class="o">&gt;</span> <span class="nf">transcode</span><span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">GifBitmapWrapper</span><span class="o">&gt;</span> <span class="n">toTranscode</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">GifBitmapWrapper</span> <span class="n">gifBitmap</span> <span class="o">=</span> <span class="n">toTranscode</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">bitmapResource</span> <span class="o">=</span> <span class="n">gifBitmap</span><span class="o">.</span><span class="na">getBitmapResource</span><span class="o">();</span>

        <span class="kd">final</span> <span class="nc">Resource</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GlideDrawable</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">bitmapResource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        	<span class="c1">// 上面我们解码出来一个bitmap, 所以走这里</span>
        	<span class="c1">// 查看[转码1]工具, bitmapDrawableResourceTranscoder ==</span>
        	<span class="c1">// GlideBitmapDrawableTranscoder</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">bitmapDrawableResourceTranscoder</span><span class="o">.</span><span class="na">transcode</span><span class="o">(</span><span class="n">bitmapResource</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">gifBitmap</span><span class="o">.</span><span class="na">getGifResource</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">GlideDrawable</span><span class="o">&gt;)</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// GlideBitmapDrawableTranscoder</span>
	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">GlideBitmapDrawable</span><span class="o">&gt;</span> <span class="nf">transcode</span><span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;</span><span class="nc">Bitmap</span><span class="o">&gt;</span> <span class="n">toTranscode</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// bitmap 拿出来 封装成 GlideBitmapDrawable</span>
        <span class="nc">GlideBitmapDrawable</span> <span class="n">drawable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GlideBitmapDrawable</span><span class="o">(</span><span class="n">resources</span><span class="o">,</span> <span class="n">toTranscode</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
        <span class="c1">// 再加一层装饰 GlideBitmapDrawableResource</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">GlideBitmapDrawableResource</span><span class="o">(</span><span class="n">drawable</span><span class="o">,</span> <span class="n">bitmapPool</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>最终转码过程为 <strong>GifBitmapWrapper »&gt; GlideBitmapDrawableResource 的过程</strong></li>
  <li>返回到外面的对象类型是 <strong>Resource&lt; GlideBitmapDrawable &gt;</strong></li>
  <li>其中 GlideBitmapDrawableResource 的结构参考如下图
<img src="https://img-blog.csdnimg.cn/20210313173100170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />
最后一步, 加载图片到界面上显示出来</li>
</ul>

<h3 id="345-加载">[3.4.5] 加载</h3>
<p>看看转码完成之后如何通知界面的, 下面的代码是一个逆序调用过程, 追溯下转码成功后的代码走向</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
</pre></td><td class="rouge-code"><pre><span class="c1">// DecodeJob</span>

	<span class="kd">public</span> <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="nf">decodeFromSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	    <span class="c1">// 分支1, 下载 &amp;&amp; 解码</span>
        <span class="nc">Resource</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">decodeSource</span><span class="o">();</span>
        <span class="c1">// 分支2, 转码</span>
        <span class="k">return</span> <span class="nf">transformEncodeAndTranscode</span><span class="o">(</span><span class="n">decoded</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// EngineRunnable</span>
	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">decodeFromSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">decodeJob</span><span class="o">.</span><span class="na">decodeFromSource</span><span class="o">();</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">decode</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isDecodingFromCache</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">decodeFromCache</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">decodeFromSource</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isCancelled</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">resource</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
        	<span class="c1">// 终于绕出来了</span>
            <span class="n">resource</span> <span class="o">=</span> <span class="n">decode</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Log</span><span class="o">.</span><span class="na">isLoggable</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="nc">Log</span><span class="o">.</span><span class="na">VERBOSE</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Exception decoding"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">exception</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">isCancelled</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">resource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">resource</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">resource</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">onLoadFailed</span><span class="o">(</span><span class="n">exception</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        	<span class="c1">// 这应该就是上抛结果的回调了</span>
            <span class="n">onLoadComplete</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">onLoadComplete</span><span class="o">(</span><span class="nc">Resource</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// manager 是在 EngineRunnable 初始化时赋的值</span>
        <span class="n">manager</span><span class="o">.</span><span class="na">onResourceReady</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="kd">public</span> <span class="nf">EngineRunnable</span><span class="o">(</span><span class="nc">EngineRunnableManager</span> <span class="n">manager</span><span class="o">,</span> <span class="nc">DecodeJob</span><span class="o">&lt;?,</span> <span class="o">?,</span> <span class="o">?&gt;</span> <span class="n">decodeJob</span><span class="o">,</span> <span class="nc">Priority</span> <span class="n">priority</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">manager</span> <span class="o">=</span> <span class="n">manager</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">decodeJob</span> <span class="o">=</span> <span class="n">decodeJob</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stage</span> <span class="o">=</span> <span class="nc">Stage</span><span class="o">.</span><span class="na">CACHE</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">priority</span> <span class="o">=</span> <span class="n">priority</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// Engine</span>
 <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">LoadStatus</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Key</span> <span class="n">signature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">fetcher</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="nc">Transformation</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">transformation</span><span class="o">,</span> <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span><span class="o">,</span>
            <span class="nc">Priority</span> <span class="n">priority</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isMemoryCacheable</span><span class="o">,</span> <span class="nc">DiskCacheStrategy</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="nc">ResourceCallback</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
		<span class="o">...</span>
        <span class="nc">EngineJob</span> <span class="n">engineJob</span> <span class="o">=</span> <span class="n">engineJobFactory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">isMemoryCacheable</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="c1">// 得 engineJob == manager , 此处代码也可在[3.4.2]下载流程中找到</span>
        <span class="nc">EngineRunnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EngineRunnable</span><span class="o">(</span><span class="n">engineJob</span><span class="o">,</span> <span class="n">decodeJob</span><span class="o">,</span> <span class="n">priority</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>现在<strong>转码结果</strong>被上抛到 EngineJob , 跟进去看看</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
</pre></td><td class="rouge-code"><pre><span class="c1">// EngineJob</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResourceReady</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">resource</span> <span class="o">=</span> <span class="n">resource</span><span class="o">;</span>
        <span class="no">MAIN_THREAD_HANDLER</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="no">MSG_COMPLETE</span><span class="o">,</span> <span class="k">this</span><span class="o">).</span><span class="na">sendToTarget</span><span class="o">();</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MainThreadCallback</span> <span class="kd">implements</span> <span class="nc">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">MSG_COMPLETE</span> <span class="o">==</span> <span class="n">message</span><span class="o">.</span><span class="na">what</span> <span class="o">||</span> <span class="no">MSG_EXCEPTION</span> <span class="o">==</span> <span class="n">message</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">EngineJob</span> <span class="n">job</span> <span class="o">=</span> <span class="o">(</span><span class="nc">EngineJob</span><span class="o">)</span> <span class="n">message</span><span class="o">.</span><span class="na">obj</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="no">MSG_COMPLETE</span> <span class="o">==</span> <span class="n">message</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
                	<span class="c1">// 走这</span>
                    <span class="n">job</span><span class="o">.</span><span class="na">handleResultOnMainThread</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">job</span><span class="o">.</span><span class="na">handleExceptionOnMainThread</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleResultOnMainThread</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// resource == Resource&lt; GlideBitmapDrawable &gt;</span>
        <span class="c1">// 这里又给resource 包了一层, 就不展开了, 最后是个 EngineResource</span>
        <span class="n">engineResource</span> <span class="o">=</span> <span class="n">engineResourceFactory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">isCacheable</span><span class="o">);</span>
        <span class="o">...</span>
        <span class="c1">// 此处开始上抛结果, 此处的listener通过addCallback来赋值</span>
        <span class="c1">// 可在[3.4.2]下载流程中查到, 此赋值代码</span>
        <span class="n">cb</span><span class="o">.</span><span class="na">onResourceReady</span><span class="o">(</span><span class="n">engineResource</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// Engine</span>
 <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="nc">LoadStatus</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Key</span> <span class="n">signature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="nc">DataFetcher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">fetcher</span><span class="o">,</span>
            <span class="nc">DataLoadProvider</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="nc">Transformation</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">&gt;</span> <span class="n">transformation</span><span class="o">,</span> <span class="nc">ResourceTranscoder</span><span class="o">&lt;</span><span class="no">Z</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">transcoder</span><span class="o">,</span>
            <span class="nc">Priority</span> <span class="n">priority</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isMemoryCacheable</span><span class="o">,</span> <span class="nc">DiskCacheStrategy</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="nc">ResourceCallback</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
		<span class="nc">EngineJob</span> <span class="n">engineJob</span> <span class="o">=</span> <span class="n">engineJobFactory</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">isMemoryCacheable</span><span class="o">);</span>
      	<span class="o">...</span>
        <span class="n">engineJob</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="n">cb</span><span class="o">);</span>
        <span class="n">engineJob</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// GenericRequest</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSizeReady</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// 这里, 所以应追溯到 GenericRequest.onResourceReady</span>
        <span class="n">loadStatus</span> <span class="o">=</span> <span class="n">engine</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">signature</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">dataFetcher</span><span class="o">,</span> <span class="n">loadProvider</span><span class="o">,</span> <span class="n">transformation</span><span class="o">,</span> <span class="n">transcoder</span><span class="o">,</span>
                <span class="n">priority</span><span class="o">,</span> <span class="n">isMemoryCacheable</span><span class="o">,</span> <span class="n">diskCacheStrategy</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>

    <span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResourceReady</span><span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
		<span class="o">...</span>
		<span class="c1">// 前文提到 resource 是个 EngineResource, 里面包了一个Resource&lt; GlideBitmapDrawable &gt;</span>
        <span class="nc">Object</span> <span class="n">received</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="o">...</span>
        <span class="c1">// 最后上抛了一个 received (new GlideBitmapDrawable(null, BitmapState))</span>
        <span class="n">onResourceReady</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="o">(</span><span class="no">R</span><span class="o">)</span> <span class="n">received</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// EngineResource</span>
	<span class="kd">public</span> <span class="no">Z</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">resource</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

<span class="c1">// GlideBitmapDrawableResource</span>
	<span class="kd">public</span> <span class="kd">final</span> <span class="no">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="n">drawable</span><span class="o">.</span><span class="na">getConstantState</span><span class="o">().</span><span class="na">newDrawable</span><span class="o">();</span>
    <span class="o">}</span>

<span class="c1">// GlideBitmapDrawable</span>
	<span class="kd">public</span> <span class="nc">ConstantState</span> <span class="nf">getConstantState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">// BitmapState</span>
	<span class="kd">public</span> <span class="nc">Drawable</span> <span class="nf">newDrawable</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">GlideBitmapDrawable</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>继续看 GenericRequest 的上抛</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1">// GenericRequest</span>

	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">onResourceReady</span><span class="o">(</span><span class="nc">Resource</span><span class="o">&lt;?&gt;</span> <span class="n">resource</span><span class="o">,</span> <span class="no">R</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="c1">// result == new GlideBitmapDrawable(null, BitmapState)</span>
        <span class="c1">// 还记得在[3.4.1]构建了一个 GlideDrawableImageViewTarget &lt; GlideDrawable &gt; ?</span>
        <span class="n">target</span><span class="o">.</span><span class="na">onResourceReady</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">animation</span><span class="o">);</span>
        <span class="o">...</span>
    <span class="o">}</span>

<span class="c1">// GlideDrawableImageViewTarget</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResourceReady</span><span class="o">(</span><span class="nc">GlideDrawable</span> <span class="n">resource</span><span class="o">,</span> <span class="nc">GlideAnimation</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="nc">GlideDrawable</span><span class="o">&gt;</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onResourceReady</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">animation</span><span class="o">);</span>
    <span class="o">}</span>

<span class="c1">// GlideDrawableImageViewTarget.super</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResourceReady</span><span class="o">(</span><span class="no">Z</span> <span class="n">resource</span><span class="o">,</span> <span class="nc">GlideAnimation</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">Z</span><span class="o">&gt;</span> <span class="n">glideAnimation</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">glideAnimation</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">glideAnimation</span><span class="o">.</span><span class="na">animate</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="k">this</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">setResource</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="c1">// GlideDrawableImageViewTarget</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setResource</span><span class="o">(</span><span class="nc">GlideDrawable</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">view</span><span class="o">.</span><span class="na">setImageDrawable</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>最后调用 ImageView 的 setImageDrawable 方法, 完成图片资源的展示</p>
:ET