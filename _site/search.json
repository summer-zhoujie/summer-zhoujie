[
  
  
    {
      "title"    : "ZJAPKUtils",
      "title-lower"    : "zjapkutils",
      "sub-titile" : "1. apk文件是否安装 ; 2. 调起apk文件的安装; 3. 获取apk文件的包名",
      "sub-titile-lower" : "1. apk文件是否安装 ; 2. 调起apk文件的安装; 3. 获取apk文件的包名",
      "categories" : "",
      "tags"     : "ZJUtils",
      "url"      : "/2021/07/07/markdown-ZJAPKUtils/",
      "date"     : "2021-07-07 00:39:16 +0800",
      "content": "<h1 id=\"1-简介\">1. 简介</h1>\n\n<p>public class ZJAPKUtils\nextends java.lang.Object\napk文件工具</p>\n\n<ol>\n  <li>apk文件是否安装</li>\n  <li>调起apk文件的安装</li>\n  <li>获取apk文件的包名</li>\n</ol>\n\n<h1 id=\"2-apk文件是否安装\">2. apk文件是否安装</h1>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isApkFileInstalled</span><span class=\"o\">(</span><span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">content</span><span class=\"o\">.</span><span class=\"na\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span>\n                                         <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">lang</span><span class=\"o\">.</span><span class=\"na\">String</span> <span class=\"n\">path</span><span class=\"o\">)</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><code class=\"language-plaintext highlighter-rouge\">@param</code> path - apk文件路径<br />\n<code class=\"language-plaintext highlighter-rouge\">@param</code> context - 用于获取PackageManager<br />\n<code class=\"language-plaintext highlighter-rouge\">@return</code> true:已安装<br /></p>\n\n<h1 id=\"3-调起安装apk文件\">3. 调起安装APK文件</h1>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">installApkFile</span><span class=\"o\">(</span><span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">content</span><span class=\"o\">.</span><span class=\"na\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span>\n                                  <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">lang</span><span class=\"o\">.</span><span class=\"na\">String</span> <span class=\"n\">path</span><span class=\"o\">)</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><code class=\"language-plaintext highlighter-rouge\">@param</code> path - apk文件路径</p>\n\n<p>需要在Manifest中集成以下内容</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nt\">&lt;provider</span>\n <span class=\"na\">android:name=</span><span class=\"s\">\"androidx.core.content.FileProvider\"</span>\n <span class=\"na\">android:authorities=</span><span class=\"s\">\"com.zj.tools.mylibrary.fileprovider\"</span>\n <span class=\"na\">android:exported=</span><span class=\"s\">\"false\"</span>\n <span class=\"na\">android:grantUriPermissions=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span>\n     <span class=\"nt\">&lt;meta-data</span>\n     <span class=\"na\">android:name=</span><span class=\"s\">\"android.support.FILE_PROVIDER_PATHS\"</span>\n     <span class=\"na\">android:resource=</span><span class=\"s\">\"@xml/pg_file_path\"</span>\n     <span class=\"na\">tools:replace=</span><span class=\"s\">\"android:resource\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/provider&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>再创建xml文件, 内容如下</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n <span class=\"nt\">&lt;paths&gt;</span>\n <span class=\"c\">&lt;!--  APKUtils  这里填入自己APK文件放置的路径即可--&gt;</span>\n     <span class=\"nt\">&lt;external-files-path</span>\n         <span class=\"na\">name=</span><span class=\"s\">\"external_files_path\"</span>\n         <span class=\"na\">path=</span><span class=\"s\">\"Download\"</span> <span class=\"nt\">/&gt;</span>\n <span class=\"nt\">&lt;/paths&gt;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"4-获取安装文件包名\">4. 获取安装文件包名</h1>\n<p><code class=\"language-plaintext highlighter-rouge\">@param</code> path apk filepath <br />\n<code class=\"language-plaintext highlighter-rouge\">@return</code> packagename</p>\n",
      "desc"     : "1. 简介public class ZJAPKUtilsextends java.lang.Objectapk文件工具  apk文件是否安装  调起apk文件的安装  获取apk文件的包名2. apk文件是否安装12public static boolean isApkFileInstalled(android.content.Context context,                ..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(十), 基数排序",
      "title-lower"    : "十大排序算法(十), 基数排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_10/",
      "date"     : "2021-04-24 21:22:58 +0800",
      "content": "<h1 id=\"算法图解\">算法图解</h1>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7ff87606aac4db3bb9c37e0bb683947~tplv-k3u1fbpfcp-watermark.image\" alt=\"20200429173859195.gif\" /></p>\n\n<ol>\n  <li>将数切割成个位, 十位, 百位, 千位…</li>\n  <li>按位放置进入长度为10的数组</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">先进先出</code>规则回填入数组</li>\n  <li>重复1~3,直到所有位数都比较完毕</li>\n</ol>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 初始化比较需要的`桶`空间</span>\n        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">buckets</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">radix</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 循环比较各个位数</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"kt\">boolean</span> <span class=\"n\">isAllZero</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n\n            <span class=\"c1\">// 按照位数放置到相应的桶位置</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 取出整数的个,十, 百, 千...</span>\n                <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">/</span> <span class=\"n\">radix</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isAllZero</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">num</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">isAllZero</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">).</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isAllZero</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 回填Arr &amp;&amp; 清空桶(buckets)中数据</span>\n            <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"n\">buckets</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">Integer</span> <span class=\"n\">remove</span> <span class=\"o\">=</span> <span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">remove</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 开始下一个位数的比较</span>\n            <span class=\"n\">radix</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n<p><code class=\"language-plaintext highlighter-rouge\">O(n*k)</code>\n假设n个参与排序的数, 且数的最大有K位, 那么\nf(n) = k(k轮比较) * n(每轮操作n个数) = O(n*k)</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n)</code>\n多出一个链表结构存储排序的中间数值</p>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">RadixSort</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 初始化比较需要的`桶`空间</span>\n        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">buckets</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">radix</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 循环比较各个位数</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"kt\">boolean</span> <span class=\"n\">isAllZero</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n\n            <span class=\"c1\">// 按照位数放置到相应的桶位置</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 取出整数的个,十, 百, 千...</span>\n                <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">/</span> <span class=\"n\">radix</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isAllZero</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">num</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">isAllZero</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">).</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isAllZero</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 回填Arr &amp;&amp; 清空桶(buckets)中数据</span>\n            <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"n\">buckets</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">Integer</span> <span class=\"n\">remove</span> <span class=\"o\">=</span> <span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">remove</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 开始下一个位数的比较</span>\n            <span class=\"n\">radix</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n",
      "desc"     : "算法图解  将数切割成个位, 十位, 百位, 千位…  按位放置进入长度为10的数组  先进先出规则回填入数组  重复1~3,直到所有位数都比较完毕123456789101112131415161718192021222324252627282930313233343536373839404142434445    public static void sort(int[] arr) {  ..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(九), 桶排序",
      "title-lower"    : "十大排序算法(九), 桶排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_9/",
      "date"     : "2021-04-24 21:21:58 +0800",
      "content": "<h1 id=\"算法图示\">算法图示</h1>\n\n<p><strong>元素分配到桶中</strong></p>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6acbf1fd92054653a11e9bde797c824f~tplv-k3u1fbpfcp-watermark.image\" alt=\"Bucket_sort_1.svg.png\" /></p>\n\n<p><strong>对桶中的元素进行排序</strong></p>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63ac4f6aa2f24974aebf23fb01266d66~tplv-k3u1fbpfcp-watermark.image\" alt=\"Bucket_sort_2.svg.png\" /></p>\n\n<ol>\n  <li>設置一個定量的陣列當作空桶子。</li>\n  <li>尋訪序列，並且把項目一個一個放到對應的桶子去。</li>\n  <li>對每個不是空的桶子進行排序。</li>\n  <li>從不是空的桶子裡把項目再放回原來的序列中。</li>\n</ol>\n\n<blockquote>\n  <p>如果桶足够小就变成了<code class=\"language-plaintext highlighter-rouge\">计数排序</code>, 计数排序是桶排序的一个特例</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 定义桶数量</span>\n        <span class=\"kt\">int</span> <span class=\"no\">BUCKET_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">bucketCount</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"no\">BUCKET_SIZE</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">// 定义桶</span>\n        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">buckets</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">bucketCount</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 初始化桶</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"no\">BUCKET_SIZE</span><span class=\"o\">;</span>\n            <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">).</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 对各个桶数据进行排序</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"n\">buckets</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 这里的排序算法决定着桶的算法复杂度</span>\n            <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">bucket</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 桶拼接</span>\n        <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"n\">buckets</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Integer</span> <span class=\"n\">integer</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">integer</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p>假设桶的数量是K, 数组长度是n</p>\n\n<p>f(n) = n(计算最大/小) + k(定义桶) + n(初始化桶) + n^2(对桶进行排序,可以是任一排序算法,1~n^2) + n(桶拼接)</p>\n\n<p>f(n)max = n(3+n)+k = O(n^2)</p>\n\n<p>f(n)min = 3n+k = O(n)</p>\n\n<blockquote>\n  <p>桶的时间复杂度取决于对每个桶进行排序时的算法时间效率, 最好的情况下是桶中只有一个数据不需要排序 O(1), 最差的排序算法复杂度是O(n^2)</p>\n</blockquote>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p>链表结构存储桶, 假设有n个数,空间复杂度为O(n)</p>\n<blockquote>\n  <p>需注意, 本文用ArrayList有个初始大小10, 空间复杂度大于 O(n)</p>\n</blockquote>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">BucketSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 定义桶数量</span>\n        <span class=\"kt\">int</span> <span class=\"no\">BUCKET_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">bucketCount</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"no\">BUCKET_SIZE</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">// 定义桶</span>\n        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">buckets</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">bucketCount</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;());</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 初始化桶</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"no\">BUCKET_SIZE</span><span class=\"o\">;</span>\n            <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">).</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 对各个桶数据进行排序</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"n\">buckets</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 这里的排序算法决定着桶的算法复杂度</span>\n            <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">bucket</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 桶拼接</span>\n        <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"n\">buckets</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Integer</span> <span class=\"n\">integer</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">integer</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"参考\">参考</h1>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%A1%B6%E6%8E%92%E5%BA%8F\">维基百科-桶排序</a></p>\n\n",
      "desc"     : "算法图示元素分配到桶中对桶中的元素进行排序  設置一個定量的陣列當作空桶子。  尋訪序列，並且把項目一個一個放到對應的桶子去。  對每個不是空的桶子進行排序。  從不是空的桶子裡把項目再放回原來的序列中。  如果桶足够小就变成了计数排序, 计数排序是桶排序的一个特例1234567891011121314151617181920212223242526272829303132333435363..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(八), 计数排序",
      "title-lower"    : "十大排序算法(八), 计数排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_8/",
      "date"     : "2021-04-24 21:21:13 +0800",
      "content": "<h1 id=\"简介\">简介</h1>\n\n<p>用来排序0~100数字最好的算法, 可以在<code class=\"language-plaintext highlighter-rouge\">基数排序</code>中更有效的排序范围较大的数组</p>\n\n<h1 id=\"算法实现\">算法实现</h1>\n\n<p><strong>思路图示</strong></p>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5c79c3aa948416f9b0e0d4c70825a60~tplv-k3u1fbpfcp-watermark.image\" alt=\"20190712143216563.gif\" /></p>\n\n<p><strong>具体步骤</strong></p>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">最大/小值</code>: 找出Arr(待排序的数组)中最大(max)和最小(min)的元素；</li>\n  <li>创建计数数组C, 长度是 K (K = max - min + 1)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">计数</code>: 统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">累加</code> C中数据进行累加(c[i]=c[i]+c[i-1]), 累加结束 c[i] 则代表 数字(i + min) 最终存储下标</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">填充</code> B：将每个元素<code class=\"language-plaintext highlighter-rouge\">(i+min)</code>放在新数组B的第<code class=\"language-plaintext highlighter-rouge\">C(i)</code>项，每放一个元素就将<code class=\"language-plaintext highlighter-rouge\">C(i)减去1</code>。</li>\n</ol>\n\n<p><strong>算法图示</strong></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">最大/小值</code> , <code class=\"language-plaintext highlighter-rouge\">计数</code> , <code class=\"language-plaintext highlighter-rouge\">累加</code></p>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2a63891c3b846259cd18e328feddcc3~tplv-k3u1fbpfcp-watermark.image\" alt=\"截屏2021-04-20 上午11.03.38.png\" /></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">填充</code></p>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a3b0f775b46454d90300fffd444aed2~tplv-k3u1fbpfcp-watermark.image\" alt=\"截屏2021-04-20 上午11.03.42.png\" /></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 找出最大值和最小值</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n\n        <span class=\"c1\">// 计数</span>\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 求和</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 回填</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">min</span><span class=\"o\">]--;</span>\n            <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n+k)</code></p>\n\n<p>f(n) = n(最大/小) + n(计数) + k(求和) + n(回填) = 3n + k = O(n+k)</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n+k)</code></p>\n\n<p>f(n) = n(数组B) + k(数组c) = O(n+k)</p>\n\n<h1 id=\"参考\">参考</h1>\n\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F\">维基百科-计数排序</a></p>\n\n",
      "desc"     : "简介用来排序0~100数字最好的算法, 可以在基数排序中更有效的排序范围较大的数组算法实现思路图示具体步骤  最大/小值: 找出Arr(待排序的数组)中最大(max)和最小(min)的元素；  创建计数数组C, 长度是 K (K = max - min + 1)  计数: 统计数组中每个值为i的元素出现的次数，存入数组C的第i项；  累加 C中数据进行累加(c[i]=c[i]+c[i-1])..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(七), 归并排序",
      "title-lower"    : "十大排序算法(七), 归并排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_7/",
      "date"     : "2021-04-24 21:20:25 +0800",
      "content": "<h1 id=\"算法图解\">算法图解</h1>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e309c988034afbac2182a2ad2c3f91~tplv-k3u1fbpfcp-watermark.image\" alt=\"BA0D2CBA-2162-4BA2-A63E-E701D3C8E9C2.png\" /></p>\n\n<p>典型的<code class=\"language-plaintext highlighter-rouge\">分治法</code>, <code class=\"language-plaintext highlighter-rouge\">分</code>是把排序问题分解到最小单位(即: 1个数排序), <code class=\"language-plaintext highlighter-rouge\">治</code>把子树的排序结果向上合成上一层级父亲的排序结果, 下图描述的是<code class=\"language-plaintext highlighter-rouge\">治</code>的过程</p>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c9ef2fc9c924ce3a2a14087ca738414~tplv-k3u1fbpfcp-watermark.image\" alt=\"0011886A-933B-4198-949B-2CEC66F10C27.png\" /></p>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1189db0461374a1aa0f190141be54afa~tplv-k3u1fbpfcp-watermark.image\" alt=\"945146A9-0DDD-4128-91F7-046736A9811D.png\" /></p>\n\n<ol>\n  <li>先递归对序列进行<code class=\"language-plaintext highlighter-rouge\">分</code>解成最小单元</li>\n  <li>逐级计算<code class=\"language-plaintext highlighter-rouge\">治</code>的结果</li>\n</ol>\n\n<h1 id=\"实现\">实现</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">doSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">);</span>\n            <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n            <span class=\"n\">merge</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">merge</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(nlogn)</code>\n数组被分成了二叉树,二叉树的层高 log2n , 每层需要比对的次数 n\nf(n) = n * log2n = O(nlogn)</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n)</code>\n用了一个temp数组,来缓存中间处理的数据, 当数据量很大的时候需要考虑这里的空间浪费问题</p>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">MergeSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">doSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">);</span>\n            <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n            <span class=\"n\">merge</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">merge</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">tmp</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">tmp</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"参考\">参考</h1>\n<p><a href=\"https://www.cnblogs.com/chengxiao/p/6194356.html\">https://www.cnblogs.com/chengxiao/p/6194356.html</a></p>\n\n",
      "desc"     : "算法图解典型的分治法, 分是把排序问题分解到最小单位(即: 1个数排序), 治把子树的排序结果向上合成上一层级父亲的排序结果, 下图描述的是治的过程  先递归对序列进行分解成最小单元  逐级计算治的结果实现123456789101112131415161718192021222324252627282930313233private static void doSort(int[] arr,..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(六), 堆排序",
      "title-lower"    : "十大排序算法(六), 堆排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_6/",
      "date"     : "2021-04-24 21:19:44 +0800",
      "content": "<h1 id=\"须知须会\">须知须会</h1>\n\n<h2 id=\"数据结构-堆\">数据结构-堆</h2>\n\n<p>分为最大堆和最小堆</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">最大堆</code>, 父节点的值大于子节点</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">最小堆</code>, 父节点的值小于子节点</li>\n</ul>\n\n<blockquote>\n  <p>本文采用<code class=\"language-plaintext highlighter-rouge\">最大堆</code>解决问题</p>\n</blockquote>\n\n<h2 id=\"父子节点的对应索引关系推导\">父子节点的对应索引关系推导</h2>\n\n<p>假定我们拿到这样一个数组, 并且把它表示成以下的树结构</p>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68ca794b6b0e43949c7f5fc5a9dc7ef2~tplv-k3u1fbpfcp-watermark.image\" alt=\"截屏2021-04-19 下午4.39.48.png\" /></p>\n\n<p>设:</p>\n<ul>\n  <li>P 是父节点对应数组的索引</li>\n  <li>C 是左子节点对应数组的索引</li>\n  <li>i 是子节点所在二叉树的层次</li>\n  <li>j 是子节点所在层次的偏移量</li>\n</ul>\n\n<p><strong>拿上图举例, P == 1(父节点 6), C == 3(子节点 5), i == 1, j == 1</strong></p>\n\n<p>可以推导:</p>\n\n<p>C = 2^i + j\nP = 2^(i-1) + (j-1)/2\nP = ( (2^i + j) - 1 ) / 2 = (C - 1) / 2</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getParentIndex</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">child</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getLeftChildIndex</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">parent</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">parent</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"如何构建一个最大堆\">如何构建一个最大堆</h2>\n\n<p>假设二叉树最后一层最后一个chaild是C</p>\n<ol>\n  <li>获取C的父节点, 并判断父节点是否小于子节点</li>\n  <li>如果<code class=\"language-plaintext highlighter-rouge\">小于</code>, 父子交换(并且递归判断替换到C位置的父节点是否还能被其子节点替换)</li>\n  <li>如果<code class=\"language-plaintext highlighter-rouge\">大于等于</code> 结束本次操作</li>\n  <li>C减一,重复1~3直至C==0</li>\n</ol>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kt\">int</span> <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n\n    <span class=\"c1\">// 初始化最大堆, 找到C的parent, C的基础上减一递归找平衡</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">getParentIndex</span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">adjustHeap</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">last</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">adjustHeap</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 获取父节点i的左子</span>\n        <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">getLeftChildIndex</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 如果i有子节点</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// i的右子</span>\n            <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 找出左右子最大的值</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// 父节点小于子节点最大值</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 父子替换</span>\n                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">);</span>\n                <span class=\"c1\">// 替换后的父节点向下寻找看有没有比它大的子节点</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">getLeftChildIndex</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span> <span class=\"c1\">// 停止筛选</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"算法思路\">算法思路</h1>\n\n<p>借助<code class=\"language-plaintext highlighter-rouge\">数据结构-堆</code>的思想, 假定数组长度 n, 定义 i = n</p>\n\n<ol>\n  <li>对数组中[0,i-1]的数据进行<code class=\"language-plaintext highlighter-rouge\">最大堆</code>排序</li>\n  <li>取出堆根节点和数组i位置进行替换, i减1</li>\n  <li>重复1~2步骤,直至i==0</li>\n</ol>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">getParentIndex</span><span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ajustHeap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n            <span class=\"n\">ajustHeap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(nlogn)</code></p>\n\n<p>初始化建堆过程时间：O(n)\n更改堆元素后重建堆时间：O(nlogn)\n<code class=\"language-plaintext highlighter-rouge\">f(n) = n + nlogn = n(logn+1) = O(nlogn)</code></p>\n<blockquote>\n  <p>推算过程：</p>\n</blockquote>\n\n<p>        首先要理解怎么计算这个堆化过程所消耗的时间，可以直接画图去理解；</p>\n\n<p>        假设高度为k，则从倒数第二层右边的节点开始，这一层的节点都要执行子节点比较然后交换（如果顺序是对的就不用交换）；倒数第三层呢，则会选择其子节点进行比较和交换，如果没交换就可以不用再执行下去了。如果交换了，那么又要选择一支子树进行比较和交换；</p>\n\n<p>        那么总的时间计算为：s = 2^( i - 1 )  *  ( k - i )；其中 i 表示第几层，2^( i - 1) 表示该层上有多少个元素，( k - i) 表示子树上要比较的次数，如果在最差的条件下，就是比较次数后还要交换；因为这个是常数，所以提出来后可以忽略；</p>\n\n<p>        S = 2^(k-2) * 1 + 2^(k-3)<em>2…..+2</em>(k-2)+2^(0)*(k-1)  ===&gt; 因为叶子层不用交换，所以i从 k-1 开始到 1；</p>\n\n<p>        这个等式求解，我想高中已经会了：等式左右乘上2，然后和原来的等式相减，就变成了：</p>\n\n<p>        S = 2^(k - 1) + 2^(k - 2) + 2^(k - 3) ….. + 2 - (k-1)</p>\n\n<p>        除最后一项外，就是一个等比数列了，直接用求和公式：S = {  a1[ 1-  (q^n) ] }  / (1-q)；</p>\n\n<p>        S = 2^k -k -1；又因为k为完全二叉树的深度，所以 (2^k) &lt;=  n &lt; (2^k  -1 )，总之可以认为：k = logn （实际计算得到应该是 log(n+1) &lt; k &lt;= logn ）;</p>\n\n<p>        综上所述得到：S = n - longn -1，所以时间复杂度为：O(n)</p>\n\n<p>        更改堆元素后重建堆时间：O(nlogn)</p>\n\n<p>        推算过程：</p>\n\n<p>       1、循环  n -1 次，每次都是从根节点往下循环查找，所以每一次时间是 logn，总时间：logn(n-1) = nlogn  - logn ；\n<a href=\"https://blog.csdn.net/YuZhiHui_No1/article/details/44258297\">具体推导过程原文链接</a></p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p>O(1)</p>\n\n<h1 id=\"参考\">参考</h1>\n\n<ul>\n  <li><a href=\"https://blog.csdn.net/qq_34462436/article/details/90273910\">https://blog.csdn.net/qq_34462436/article/details/90273910</a></li>\n  <li><a href=\"https://zhuanlan.zhihu.com/p/42586566\">https://zhuanlan.zhihu.com/p/42586566</a></li>\n</ul>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">HeapSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">getParentIndex</span><span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ajustHeap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n            <span class=\"n\">ajustHeap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">ajustHeap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">getLeftChildIndex</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">);</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">target</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">target</span><span class=\"o\">);</span>\n                <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">;</span>\n                <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">getLeftChildIndex</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getParentIndex</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">child</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getLeftChildIndex</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">parent</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">parent</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">,</span> <span class=\"mi\">79</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">500</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n",
      "desc"     : "须知须会数据结构-堆分为最大堆和最小堆  最大堆, 父节点的值大于子节点  最小堆, 父节点的值小于子节点  本文采用最大堆解决问题父子节点的对应索引关系推导假定我们拿到这样一个数组, 并且把它表示成以下的树结构设:  P 是父节点对应数组的索引  C 是左子节点对应数组的索引  i 是子节点所在二叉树的层次  j 是子节点所在层次的偏移量拿上图举例, P == 1(父节点 6), C ==..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(四), 希尔排序",
      "title-lower"    : "十大排序算法(四), 希尔排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_5/",
      "date"     : "2021-04-24 21:18:29 +0800",
      "content": "<h1 id=\"算法图解\">算法图解</h1>\n\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">选择</code> 一个最大/小的数, 排到最前面</p>\n</blockquote>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c3762d0622e4d5b8930030aa4aca1b3~tplv-k3u1fbpfcp-watermark.image\" alt=\"17400545-e3a784e614fca758.gif\" /></p>\n\n<p>假设数组长度为 n</p>\n<ol>\n  <li>i = 0 , 遍历 [i,n] 个数字, <code class=\"language-plaintext highlighter-rouge\">选择</code> 一个最小的, 和 i 交换</li>\n  <li>i + 1</li>\n  <li>重复 1 2 步骤, 直到 i == n</li>\n</ol>\n\n<h1 id=\"实现\">实现</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre>        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">curMin</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">curMin</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">curMin</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">curMin</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">?</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">curMin</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">doSwap</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">curMin</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p>f(n) = n(n-1)/2 = O(n^2)</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p>O(1), 没有使用多余的空间</p>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">SelectionSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">curMin</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">curMin</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">curMin</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">curMin</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">?</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">curMin</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">doSwap</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">curMin</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">doSwap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span>\n        <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">];</span>\n        <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">522</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n",
      "desc"     : "算法图解  选择 一个最大/小的数, 排到最前面假设数组长度为 n  i = 0 , 遍历 [i,n] 个数字, 选择 一个最小的, 和 i 交换  i + 1  重复 1 2 步骤, 直到 i == n实现12345678910        int n = array.length;        int curMin;        for (int i = 0; i &amp;lt;..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(四), 希尔排序",
      "title-lower"    : "十大排序算法(四), 希尔排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_4/",
      "date"     : "2021-04-24 21:18:29 +0800",
      "content": "<h1 id=\"简介\">简介</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">插入</code>排序的优化, 也叫缩小增量排序</p>\n\n<h1 id=\"算法思路\">算法思路</h1>\n\n<p>分组排序</p>\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">步长</code>, 同组中2个元素在数组中的间隔数</p>\n</blockquote>\n\n<ol>\n  <li>定义分组的步长, step = arrLength / 2</li>\n  <li>对每个分组进行插入排序</li>\n  <li>step = step / 2</li>\n  <li>重复 1~2 直到 step &lt;= 0 (step == 1, 是最后一次分组)</li>\n</ol>\n\n<p>第一次分组, step = 4</p>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0ffe65bf73941aeb09ad807da46a563~tplv-k3u1fbpfcp-watermark.image\" alt=\"8E467F87-936F-46F2-9609-4B26B74B46F1.png\" /></p>\n\n<p>第一次分组, step = 2</p>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/347abdffd51e440a94125e4d98e817d5~tplv-k3u1fbpfcp-watermark.image\" alt=\"F4339AC7-63AD-403E-AADC-2722488FD050.png\" /></p>\n\n<p>第一次分组, step = 1</p>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3273492bb0654765bcc24f03491931cf~tplv-k3u1fbpfcp-watermark.image\" alt=\"072F7A87-BD31-4B5F-9FA4-43A5DA2FD5E9.png\" /></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"c1\">// step 为步长, 每次缩减为原来的 1/2</span>\n        <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"n\">step</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">step</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// 一共有step个序列</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">step</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\n                <span class=\"c1\">// 对单个序列进行排序</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n                    <span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">step</span><span class=\"o\">;</span>\n                    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span> <span class=\"o\">+</span> <span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span><span class=\"o\">];</span>\n                        <span class=\"n\">pre</span> <span class=\"o\">-=</span> <span class=\"n\">step</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n\n                    <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span> <span class=\"o\">+</span> <span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<blockquote>\n  <p>参考</p>\n  <ul>\n    <li><a href=\"https://www.starrk.me/2020/04/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-(%E4%B8%8B)/\">Starrk的小屋-希尔排序简介</a></li>\n    <li><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">维基百科</a></li>\n  </ul>\n</blockquote>\n\n<p>算法的时间复杂度和步长的定义相关</p>\n\n<p><img src=\"希尔排序.resources/截屏2021-04-19 下午3.52.33.png\" alt=\"468e800e78c97d073973e76acfe24962\" /></p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(1)</code>, 和<code class=\"language-plaintext highlighter-rouge\">插入排序</code>一样, 并没有使用到对于空间</p>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">ShellSort</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"c1\">// step 为步长, 每次缩减为原来的 1/2</span>\n        <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"n\">step</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">step</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// 一共有step个序列</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">step</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\n                <span class=\"c1\">// 对单个序列进行排序</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n                    <span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">step</span><span class=\"o\">;</span>\n                    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span> <span class=\"o\">+</span> <span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span><span class=\"o\">];</span>\n                        <span class=\"n\">pre</span> <span class=\"o\">-=</span> <span class=\"n\">step</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n\n                    <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pre</span> <span class=\"o\">+</span> <span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">522</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n",
      "desc"     : "简介插入排序的优化, 也叫缩小增量排序算法思路分组排序  步长, 同组中2个元素在数组中的间隔数  定义分组的步长, step = arrLength / 2  对每个分组进行插入排序  step = step / 2  重复 1~2 直到 step &amp;lt;= 0 (step == 1, 是最后一次分组)第一次分组, step = 4第一次分组, step = 2第一次分组, st..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(三), 插入排序",
      "title-lower"    : "十大排序算法(三), 插入排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_3/",
      "date"     : "2021-04-24 21:17:46 +0800",
      "content": "<h1 id=\"算法图解\">算法图解</h1>\n\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">插入</code> 第 i(范围0~length)个数,到有序队列的合适位置</p>\n</blockquote>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8509ccc63604c4aa050f14e577ff4f1~tplv-k3u1fbpfcp-watermark.image\" alt=\"17400545-311766e7ef5be50c.gif\" /></p>\n\n<p>假设数组长度 n , i(代表有序数组的长度) = 0</p>\n<ol>\n  <li>取第 i+1 个数, <code class=\"language-plaintext highlighter-rouge\">插入</code>到长度 i 有序数组的合适位置</li>\n  <li>i+1</li>\n  <li>重复 1~2, 直到 i = n</li>\n</ol>\n\n<h1 id=\"实现\">实现</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre>        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">waitToInsert</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"kt\">int</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">waitToInsert</span> <span class=\"o\">&lt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pos</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// swap</span>\n                <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pos</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pos</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"n\">pos</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">pos</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">waitToInsert</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n) ~ O(n^2)</code></p>\n\n<p>最好: 数组是有序的, 只需要遍历一遍</p>\n\n<p>f(n) = n = O(n)</p>\n\n<p>最差: 数组是混乱的</p>\n\n<p>f(n) = n (n-1) / 2 = O(n^2)</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(1)</code> 没有使用到多余的空间</p>\n\n",
      "desc"     : "算法图解  插入 第 i(范围0~length)个数,到有序队列的合适位置假设数组长度 n , i(代表有序数组的长度) = 0  取第 i+1 个数, 插入到长度 i 有序数组的合适位置  i+1  重复 1~2, 直到 i = n实现123456789101112        int n = array.length;        for (int i = 0; i &amp;lt;..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(二), 快速排序",
      "title-lower"    : "十大排序算法(二), 快速排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_2/",
      "date"     : "2021-04-24 21:17:07 +0800",
      "content": "<h1 id=\"算法图解\">算法图解</h1>\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">冒泡排序</code> 的优化</p>\n</blockquote>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0bfa9094831745eea29346aabb722110~tplv-k3u1fbpfcp-watermark.image\" alt=\"217BC91A-9BAE-49AD-8BD0-132A9D400413.png\" /></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">分治</code>的思想,</p>\n<ol>\n  <li>随机找到第一个数字 6, 将比6小的挪到6左边, 比6大的挪到6右边, 分成两堆</li>\n  <li>递归6的左边和右边</li>\n  <li>重复1~2直到分解成最小单元(左右两边只有1个/0个元素)</li>\n</ol>\n\n<p>如何实现 <code class=\"language-plaintext highlighter-rouge\">将比6小的挪到6左边, 比6大的挪到6右边</code> , 参考 1.挖坑法 2.双指针法, 本文采用挖坑法实现</p>\n<blockquote>\n  <p><a href=\"https://www.codenong.com/cs105997192/\">挖坑法 &amp;&amp; 双指针法讲解</a></p>\n</blockquote>\n\n<h1 id=\"实现\">实现</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">doSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&gt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">pivot</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">pivotIndex</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n\n            <span class=\"c1\">// 坑在左边,往右边找</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">pivotIndex</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">right</span><span class=\"o\">--;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">pivotIndex</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">];</span>\n                    <span class=\"n\">pivotIndex</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 坑在右边,往左边找</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"n\">pivotIndex</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">left</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">pivotIndex</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">];</span>\n                    <span class=\"n\">pivotIndex</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">pivot</span><span class=\"o\">;</span>\n\n        <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">);</span>\n        <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"算法时间复杂度\">算法时间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n^2) ~ O(nlogn)</code>\n取决于树的平衡性, 最差的n各节点的树的层次是n,最好的是log2n, 树的每层遍历比对的时间是n次</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(1)</code></p>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">QuickSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">doSort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&gt;=</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">pivot</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">pivotIndex</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n\n            <span class=\"c1\">// 坑在左边,往右边找</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">pivotIndex</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">right</span><span class=\"o\">--;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">pivotIndex</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">];</span>\n                    <span class=\"n\">pivotIndex</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 坑在右边,往左边找</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"n\">pivotIndex</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">left</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">pivotIndex</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">];</span>\n                    <span class=\"n\">pivotIndex</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">pivot</span><span class=\"o\">;</span>\n\n        <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">);</span>\n        <span class=\"n\">doSort</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"参考\">参考</h1>\n<p><a href=\"https://www.sohu.com/a/246785807_684445/\">https://www.sohu.com/a/246785807_684445/</a></p>\n\n",
      "desc"     : "算法图解  冒泡排序 的优化分治的思想,  随机找到第一个数字 6, 将比6小的挪到6左边, 比6大的挪到6右边, 分成两堆  递归6的左边和右边  重复1~2直到分解成最小单元(左右两边只有1个/0个元素)如何实现 将比6小的挪到6左边, 比6大的挪到6右边 , 参考 1.挖坑法 2.双指针法, 本文采用挖坑法实现  挖坑法 &amp;amp;&amp;amp; 双指针法讲解实现12345..."
} ,
  
  
  
    {
      "title"    : "十大排序算法(一),冒泡排序",
      "title-lower"    : "十大排序算法(一),冒泡排序",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "排序算法",
      "url"      : "/2021/04/24/markdown-sort_1/",
      "date"     : "2021-04-24 21:16:00 +0800",
      "content": "<h1 id=\"图解思路\">图解思路</h1>\n\n<blockquote>\n  <p>最大/小的数 <code class=\"language-plaintext highlighter-rouge\">冒泡</code> 到最后面</p>\n</blockquote>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6dc6e2e514c44b7b5243138c6cd2f35~tplv-k3u1fbpfcp-watermark.image\" alt=\"17400545-534a0b911f89ebbf.gif\" /></p>\n\n<p>假设数组长度 n</p>\n<ol>\n  <li>比较相邻2位, 大的数交换到右边, 直到第 n 个数也完成交换</li>\n  <li>n 减一 (第1步使得最大的数<code class=\"language-plaintext highlighter-rouge\">冒泡</code>到了最右边)</li>\n  <li>继续 1~2, 直到 n = 1</li>\n</ol>\n\n<h1 id=\"实现\">实现</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre>        <span class=\"c1\">// n 轮</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">isSwap</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 两两比较</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">doSwap</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                    <span class=\"n\">isSwap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isSwap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"时间复杂度\">时间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(n) ~ O(n^2)</code></p>\n\n<p>最差: 当数组混乱无序时</p>\n\n<p>f(n) = n (n-1) / 2 = O(n^2)</p>\n\n<p>最好: 当数组基本有序, 只需要一轮比对就行</p>\n\n<p>f(n) = n = O(n)</p>\n\n<h1 id=\"空间复杂度\">空间复杂度</h1>\n\n<p><code class=\"language-plaintext highlighter-rouge\">O(1)</code>, 不需要分配多余的空间</p>\n\n<h1 id=\"完整代码\">完整代码</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BubbleSort</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">isSwap</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">doSwap</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                    <span class=\"n\">isSwap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isSwap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">doSwap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span>\n        <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">];</span>\n        <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">48</span><span class=\"o\">};</span>\n        <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">arrayToString</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">arrayToString</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n",
      "desc"     : "图解思路  最大/小的数 冒泡 到最后面假设数组长度 n  比较相邻2位, 大的数交换到右边, 直到第 n 个数也完成交换  n 减一 (第1步使得最大的数冒泡到了最右边)  继续 1~2, 直到 n = 1实现123456789101112131415        // n 轮        for (int i = length - 1; i &amp;gt; 0; i--) {   ..."
} ,
  
  
  
    {
      "title"    : "数据结构(四), 完美二叉树, 完全二叉树和完满二叉树",
      "title-lower"    : "数据结构(四), 完美二叉树, 完全二叉树和完满二叉树",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "数据结构, 二叉树",
      "url"      : "/2021/04/24/markdown-datastructure_4/",
      "date"     : "2021-04-24 21:15:16 +0800",
      "content": "<h1 id=\"完美二叉树-perfect-binary-tree\">完美二叉树 (Perfect Binary Tree)</h1>\n\n<p>A Perfect Binary Tree(PBT) is a tree with all leaf nodes at the same depth. All internal nodes have degree 2.</p>\n\n<ul>\n  <li>所有节点的度都是 2</li>\n  <li>所有叶子节点都在同一个层级</li>\n</ul>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe0160078b4244b3be88325e74ecfd88~tplv-k3u1fbpfcp-watermark.image\" alt=\"4E9B6FC9-E9C2-4989-8D65-90FE89B673E0.png\" /></p>\n\n<blockquote>\n  <p>度: 一个节点有几个孩子</p>\n</blockquote>\n\n<h1 id=\"完全二叉树-complete-binary-tree\">完全二叉树 (Complete Binary Tree)</h1>\n\n<p>A Complete Binary Tree （CBT) is a binary tree in which every level,except possibly the last, is completely filled, and all nodes are as far left as possible.</p>\n\n<ul>\n  <li>除了最后一层外, 所有层都完美填充</li>\n  <li>最后一层所有叶子节点靠左对齐</li>\n</ul>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6c8806a5faf4df49cd177b29e05ca60~tplv-k3u1fbpfcp-watermark.image\" alt=\"4A41A860-C35A-4D44-B03A-E3EA4F11AF1F.png\" /></p>\n\n<h1 id=\"完满二叉树-full-binary-tree\">完满二叉树 (Full Binary Tree)</h1>\n\n<p>A Full Binary Tree (FBT) is a tree in which every node other than the leaves has two children.</p>\n\n<ul>\n  <li>除去叶子节点, 所有节点的度都是 2</li>\n</ul>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce154151eb8b40da9704f5a0db98b0c2~tplv-k3u1fbpfcp-watermark.image\" alt=\"A3379524-DB06-4B0E-A45A-BC988E4BF9FC.png\" /></p>\n\n<h1 id=\"参考\">参考</h1>\n\n<p><a href=\"https://www.cnblogs.com/idorax/p/6441043.html\">https://www.cnblogs.com/idorax/p/6441043.html</a></p>\n",
      "desc"     : "完美二叉树 (Perfect Binary Tree)A Perfect Binary Tree(PBT) is a tree with all leaf nodes at the same depth. All internal nodes have degree 2.  所有节点的度都是 2  所有叶子节点都在同一个层级  度: 一个节点有几个孩子完全二叉树 (Complete Bina..."
} ,
  
  
  
    {
      "title"    : "数据结构(三), RBTree红黑树(多图警告!!!)",
      "title-lower"    : "数据结构(三), rbtree红黑树(多图警告!!!)",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "数据结构, 二叉树",
      "url"      : "/2021/04/12/markdown-datastructure_3/",
      "date"     : "2021-04-12 02:32:22 +0800",
      "content": "<h1 id=\"红黑树--bst\">红黑树 &amp;&amp; BST</h1>\n\n<p>红黑树就是在 BST 的基础上加入了一些自己的特征</p>\n\n<h1 id=\"一特征\">一、特征</h1>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">符合 BST 所有特征</code></li>\n  <li>节点有两色, 红, 黑</li>\n  <li>根是黑</li>\n  <li>所有叶子节点是黑 (叶子是NIL节点)</li>\n  <li>每个红色节点必须有两个黑节点</li>\n  <li>任意节点到每个叶子节点的路径都包含相同数量的黑节点\n<img src=\"https://img-blog.csdnimg.cn/20210411182045480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n\n<p>这些特征保证了, 根到叶子节点的最长路径, 最长不会超过最短路径的 2 倍\n因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的, 而不同于 BST</p>\n\n<blockquote>\n  <p>如何理解 路径max &lt;= 路径min * 2, 看看性质 4, 导致路径中不会有两个相连的红节点, 最短的可能路径是全黑路径, 最长的可能路径是红黑交替路径, 又性质 5, 每个路径黑色节点数一致, 得出, 最长和最短拥有相同数量的黑节点, 表明不可能超过两倍</p>\n</blockquote>\n\n<p><code class=\"language-plaintext highlighter-rouge\">所有节点一定有两个黑色的空叶子节点(NIL节点), 很多文章没画出来也是默认有的</code></p>\n\n<h1 id=\"二算法描述\">二、算法描述</h1>\n\n<h2 id=\"0-节点结构\">0. 节点结构</h2>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"o\">{</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"n\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"1-查找\">1. 查找</h2>\n\n<ul>\n  <li>先查找根节点,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt; 根</code>, 则找左子树;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt; 根</code>, 则找右子树;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">= 根</code>, 则找到返回;</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>算法时间复杂度 对于 n 个节点的树</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">最优</code> f(n) = 需要查找的次数 = 二叉树的层数 ~= O(logn)</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182058318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">最差</code> f(n) = 需要查找的次数 = 二叉树的层数 = n = O(n)</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182108334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>但是由于我们插入算法的原因, 基本维持在O(logn)左右</p>\n\n<h2 id=\"2-插入\">2. 插入</h2>\n\n<blockquote>\n  <p>首先需要明白的前提是:</p>\n  <ul>\n    <li>所有的插入操作都是在叶子节点进行的;</li>\n    <li>我们默认插入节点都是红色, 这样就不会增加树的高度了, 因为如果树的高度增加, 势必会迭代到父节点里面去处理红黑树黑节点高度平衡问题</li>\n    <li>以下图示约定:\n<img src=\"https://img-blog.csdnimg.cn/20210411182121190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  </ul>\n</blockquote>\n\n<p><strong>case 1: 插入的是空树</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>I 颜色置黑</li>\n    <li>I 赋值给<code class=\"language-plaintext highlighter-rouge\">root</code></li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182142213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 2: 插入节点值重复</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>直接返回, 无操作\n<img src=\"https://img-blog.csdnimg.cn/20210411182154975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  </ul>\n</blockquote>\n\n<p><strong>case 3: 父节点是黑</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>无操作, 不需要修复平衡</li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182205362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 4: 父节点是红, 叔节点是红</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>P 和 U 置黑</li>\n    <li>GP 置红</li>\n    <li>GP 作为插入点, 继续迭代一遍, 平衡红黑树\n<img src=\"https://img-blog.csdnimg.cn/20210411182214884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  </ul>\n</blockquote>\n\n<p><strong>case 5: 父节点是红, 叔节点是黑/Nil, <code class=\"language-plaintext highlighter-rouge\">左左</code></strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>GP 置红</li>\n    <li>P 置黑</li>\n    <li>GP 右旋</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">左左</code>: P是GP的左儿子, I是P的左儿子\n<code class=\"language-plaintext highlighter-rouge\">右旋之后</code>: 树的每条路径黑节点数量并没有增加, 符合特征6, 至此树平衡结束\n<code class=\"language-plaintext highlighter-rouge\">三角形</code>: 代表子树, 可能由 case 4, case 7, case 8,递归到本case 导致有子树结构\n<img src=\"https://img-blog.csdnimg.cn/20210411182225624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<p><strong>case 6: 父节点是红, 叔节点是黑/Nil, <code class=\"language-plaintext highlighter-rouge\">右右</code></strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>GP 置红</li>\n    <li>P 置黑</li>\n    <li>GP 左旋</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">右右</code>: P是GP的右儿子, I是P的右儿子\n<code class=\"language-plaintext highlighter-rouge\">右旋之后</code>: 树的每条路径黑节点数量并没有增加, 符合特征6, 至此树平衡结束\n<code class=\"language-plaintext highlighter-rouge\">三角形</code>: 代表子树, 可能由 case 4, case 7, case 8,递归到本case 导致有子树结构\n<img src=\"https://img-blog.csdnimg.cn/20210411182236400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<p><strong>case 7: 父节点是红, 叔节点是黑/Nil, <code class=\"language-plaintext highlighter-rouge\">左右</code></strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>GP 置红</li>\n    <li>P 置黑</li>\n    <li>P 左旋</li>\n    <li>继续执行 case 5 逻辑</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">左右</code>: P是GP的左儿子, I是P的右儿子\n<code class=\"language-plaintext highlighter-rouge\">左旋之后</code>: 转变成了 <strong>case 5</strong>\n<code class=\"language-plaintext highlighter-rouge\">三角形</code>: 代表子树, 可能由 case 4 递归到本case 导致有子树结构</p>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182257168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 8: 父节点是红, 叔节点是黑/Nil, <code class=\"language-plaintext highlighter-rouge\">右左</code></strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>GP 置红</li>\n    <li>P 置黑</li>\n    <li>P 右旋</li>\n    <li>继续执行 case 6 逻辑</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">右左</code>: P是GP的右儿子, I是P的左儿子\n<code class=\"language-plaintext highlighter-rouge\">右旋之后</code>: 转变成了 <strong>case 6</strong>\n<code class=\"language-plaintext highlighter-rouge\">三角形</code>: 代表子树, 可能由 case 4 递归到本case 导致有子树结构</p>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182308832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Node</span><span class=\"o\">();</span>\n        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">parent</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">// case 1: 插入节点是根</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Node</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">findParent</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n            <span class=\"c1\">// case 2: 插入值重复</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">setParent</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">fixInsert</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 找到属于v的parent准备插入</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">findParent</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Node</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"nc\">Node</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// 找到相同值直接返回</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"o\">;</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">?</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">:</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">pre</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 平衡红黑树</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">fixInsert</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">parent</span><span class=\"o\">;</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">uncle</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">uncle</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">grandparent</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">grandparent</span><span class=\"o\">();</span>\n        <span class=\"c1\">// case 1: 插入节点是根</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// case 3: 插入节点的 父亲 是黑</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// do nothing</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// case 4: 插入节点的 父亲 是红, 叔叔 也是红</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">uncle</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">uncle</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">uncle</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"c1\">// 有叔叔必定有祖父</span>\n                <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"c1\">// 祖父的父亲是 红, 和祖父冲突了</span>\n                <span class=\"n\">fixInsert</span><span class=\"o\">(</span><span class=\"n\">grandparent</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">uncle</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">uncle</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// case 5: 叔叔 是黑/空, `左左`</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                    <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">grandparent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// case 6: 叔叔 是黑/空, `左右`</span>\n                <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                    <span class=\"n\">fixInsert</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// case 7: 叔叔 是黑/空, `右右`</span>\n                <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                    <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">grandparent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// case 8: 叔叔 是黑/空, `右左`</span>\n                <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                    <span class=\"n\">fixInsert</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>算法时间复杂度</strong>\n<img src=\"https://img-blog.csdnimg.cn/20210411182318402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>对于有n个节点的树(由于树的高度趋近logn), f(n) = logn次左右查找对比 + 最多只需要2次旋转 + logn次的颜色替换 = O(logn) + O(1) + O(1) = O(logn)</p>\n<blockquote>\n  <p>由于颜色替换十分迅速, 这里可以把logn次替换看成是O(1)复杂度</p>\n</blockquote>\n\n<h2 id=\"3-删除\">3. 删除</h2>\n\n<blockquote>\n  <p>需要明白的是, 所有的删除操作最终都会变成删除一个叶子节点, 比如下图\n<img src=\"https://img-blog.csdnimg.cn/20210411182336316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<blockquote>\n  <p>以下图示约定\n<img src=\"https://img-blog.csdnimg.cn/20210411182348645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<p><strong>case 1: 树空</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>删除失败</li>\n  </ul>\n</blockquote>\n\n<p><strong>case 2: 无匹配项</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>删除失败</li>\n  </ul>\n</blockquote>\n\n<p><strong>case 3: d 是红</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>直接删除</li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182400497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 4: d 是黑, s 是红</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>P 置红</li>\n    <li>S 置黑</li>\n    <li>P 左旋(D 是左儿子) 或者 右旋(D 是右儿子)</li>\n    <li>旋转之后兄弟节点就变为黑色了, 递归到下面的 case 5, 6, 7 进行处理</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">三角形</code>: 代表子树, 可能由 case 7,递归到本case 导致有子树结构\n<code class=\"language-plaintext highlighter-rouge\">递归处理</code>: 之所以需要递归处理, 是因为在旋转之后, 所有路径的黑色节点数和旋转前一样, 若 D节点路径中少了一个黑色节点, 不满足性质6了,需要递归处理一下</p>\n</blockquote>\n\n<p>P 左旋(D 是左儿子)\n<img src=\"https://img-blog.csdnimg.cn/20210411182417455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>右旋(D 是右儿子)\n<img src=\"https://img-blog.csdnimg.cn/20210411182428732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 5.1: d 是黑, s 是黑, s 右孩子是红 且 d 是左孩子</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>P 和 S 颜色互换</li>\n    <li>P 左旋</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">三角形</code>: 代表子树, 可能由 case 4,6,7 ,递归到本case 导致有子树结构\n<code class=\"language-plaintext highlighter-rouge\">左旋</code>: 左旋之后直接平衡了, 可以由下图, 看出, 所有路径旋转之后 D 节点路径中多了一个黑色节点, 其他路径黑色节点数都没变化, 而我们恰巧需要删除 D节点中的一个黑色节点, 至此, 满足性质6, 红黑树刚好平衡</p>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182440923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 5.2: d 是黑, s 是黑, s 左孩子是红 且 d 是右孩子</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>P 和 S 颜色互换</li>\n    <li>P 右旋</li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182450663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 6.1: d 是黑, s 是黑, s 左孩子是红 且 d 是左孩子</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>S 置红, SL 置黑</li>\n    <li>S 右旋</li>\n    <li>树的结构就切换成了 case 5.1 的模样, 递归使用 case 5.1 解决</li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182501182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 6.2: d 是黑, s 是黑, s 右孩子是红 且 d 是右孩子</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>S 置红, SR 置黑</li>\n    <li>S 左旋</li>\n    <li>树的结构就切换成了 case 5.2 的模样, 递归使用 case 5.2 解决</li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182511923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p><strong>case 7: d 是黑, s sl sr 全是黑</strong></p>\n<blockquote>\n  <p>操作:</p>\n  <ul>\n    <li>S 置红</li>\n    <li>递归 P 节点, 平衡红黑树</li>\n  </ul>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">递归</code>: S 置红会导致右子树路径上黑节点数量少1, 左子树由于 D(黑节点) 将被删除, 所以路径上黑节点数也会少1, 符合性质6, 但是此时 P 所在树整体所有路径黑色节点数少1, 需要向上递归平衡红黑树</p>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182523238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<img src=\"https://img-blog.csdnimg.cn/20210411182531208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"nf\">remove</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// case 1: 树空, 删除失败</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">numNode</span> <span class=\"o\">=</span> <span class=\"n\">findNum</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// case 2: 无匹配项, 删除失败</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">numNode</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// 此时, replaceNode 一定是个叶子节点</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">replaceNode</span> <span class=\"o\">=</span> <span class=\"n\">findReplaceNode</span><span class=\"o\">(</span><span class=\"n\">numNode</span><span class=\"o\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 所有的删除操作最后都被转换成一种情况, 删除一个叶子节点</span>\n                <span class=\"n\">fixRemove</span><span class=\"o\">(</span><span class=\"n\">replaceNode</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n            <span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"n\">numNode</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">parent</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"n\">replaceNode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">replaceNode</span><span class=\"o\">.</span><span class=\"na\">parent</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">replaceNode</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 平衡红黑树</span>\n    <span class=\"c1\">// r: 替换的节点</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">fixRemove</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">parent</span><span class=\"o\">;</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">sibling</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">sL</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">siblingLeft</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Node</span> <span class=\"n\">sR</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">siblingRight</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// case 1: 替换的是根节点</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// case 3: 替换的是 红</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(!</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// do nothing</span>\n            <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 替换的是 黑</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// case 4: s 是红, 可以借, 旋转</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n\n                <span class=\"n\">fixRemove</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\n                <span class=\"c1\">// case 5.1: s是黑, sL是红, r是p的右节点</span>\n                <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">sL</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">sL</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">sL</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// case 5.2: s是黑, sR是红, r是p的左节点</span>\n                <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">((</span><span class=\"n\">sR</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">sR</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">sR</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// case 6.1: s是黑, sL是红, r是p的左节点</span>\n                <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">((</span><span class=\"n\">sL</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">sL</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                    <span class=\"n\">sL</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n                    <span class=\"n\">fixRemove</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// case 6.2: s是黑, sR是红, r是p的右节点</span>\n                <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">((</span><span class=\"n\">sR</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">sR</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                    <span class=\"n\">sR</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n                    <span class=\"n\">fixRemove</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// case 7: s == sL == sR 全黑</span>\n            <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">sL</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">sL</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">sR</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">sR</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">black</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"n\">fixRemove</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>算法时间复杂度</strong></p>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411182542348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>从流程图看:</p>\n\n<p>对于有n个节点的树(由于树的高度趋近logn), f(n) = 查找替换比对次数logn + 变色次数logn + case4 旋转次数logn + case5,6旋转次数2 = 2logn</p>\n\n<blockquote>\n  <p>变色次数logn: 由于变色操作消耗较小, 故可以看成是 O(1)</p>\n</blockquote>\n\n<p><strong><code class=\"language-plaintext highlighter-rouge\">不对啊, 网上不都说至多旋转三次吗? 怎么从流程图看 case4旋转 会被调用logn次???</code></strong></p>\n\n<p>别急, 这里先上结论, <strong><code class=\"language-plaintext highlighter-rouge\">一旦经过 case 4 后就不可能再有 case 7 了, 所以删除至多只有三次旋转, 最终的算法时间复杂度 logn</code></strong>\n<img src=\"https://img-blog.csdnimg.cn/20210411182554791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>上图是截取的 case 4 场景, 分析一下, 旋转之后 D 一定黑, S 一定黑, P一定红, 此时, 我们进入case 7 瞧瞧\n<img src=\"https://img-blog.csdnimg.cn/20210411182602775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>可得: 上图 P一定红, 在 S 变红之后, 只需要将 P直接转黑就行, 树就平衡了</p>\n\n<h1 id=\"三完整代码\">三、完整代码</h1>\n\n<p>就一个<code class=\"language-plaintext highlighter-rouge\">RBTree.java</code>文件搞定, 里面还附有main()函数测试功能, 可直接运行<a href=\"https://github.com/summer-zhoujie/ZJPlayGround/blob/master/app/src/main/java/com/example/playground/binarytree/RBTree.java\">github传送门</a></p>\n",
      "desc"     : "红黑树 &amp;amp;&amp;amp; BST红黑树就是在 BST 的基础上加入了一些自己的特征一、特征  符合 BST 所有特征  节点有两色, 红, 黑  根是黑  所有叶子节点是黑 (叶子是NIL节点)  每个红色节点必须有两个黑节点  任意节点到每个叶子节点的路径都包含相同数量的黑节点这些特征保证了, 根到叶子节点的最长路径, 最长不会超过最短路径的 2 倍因为操作比如插入、删..."
} ,
  
  
  
    {
      "title"    : "数据结构(二), AVL平衡二叉树",
      "title-lower"    : "数据结构(二), avl平衡二叉树",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "数据结构, 二叉树",
      "url"      : "/2021/04/12/markdown-datastructure_2/",
      "date"     : "2021-04-12 02:31:27 +0800",
      "content": "<h1 id=\"一须知须会\">一、须知须会</h1>\n\n<ol>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">平衡因子</code>: 二叉树的 左子树 - 右子树 = 高度的差值,在平衡树中可能的值(-1 ,0 ,1)</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">平衡</code>: <code class=\"language-plaintext highlighter-rouge\">平衡因子</code> 的绝对值小于 2 (下图第一张为平衡树, 第二张为不平衡树)</p>\n  </li>\n</ol>\n\n<ul>\n  <li>平衡树且平衡因子==0</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181706496.png\" alt=\"在这里插入图片描述\" /></p>\n\n<ul>\n  <li>非平衡树且平衡因子==-2</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181723885.png\" alt=\"在这里插入图片描述\" /></p>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">树的旋转</code>: 参考维基百科 <a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC\">树的旋转</a>\n<img src=\"https://img-blog.csdnimg.cn/20210411181737214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<img src=\"https://img-blog.csdnimg.cn/2021041118175095.gif\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n\n<p>转轴的移动方向来决定它是左旋还是右旋, 本文中称转轴右移为右旋反之则是左旋</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">右旋</code>: (Q为树的根节点, P为转轴, 转轴最终被右移) 右旋时,</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre>   <span class=\"n\">转轴的右孩子</span> <span class=\"o\">=</span> <span class=\"n\">树的根节点</span><span class=\"o\">;</span>\n   <span class=\"n\">根节点的左孩子</span> <span class=\"o\">=</span> <span class=\"n\">转轴的右子树根节点</span><span class=\"o\">;</span>\n   <span class=\"n\">树的根节点</span> <span class=\"o\">=</span> <span class=\"n\">转轴</span><span class=\"o\">;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">左旋</code> (P为树的根节点, Q为转轴, 转轴最终被左移) 左旋时,</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre>   <span class=\"n\">转轴的左孩子</span> <span class=\"o\">=</span> <span class=\"n\">树的根节点</span><span class=\"o\">;</span>\n   <span class=\"n\">根节点的右孩子</span> <span class=\"o\">=</span> <span class=\"n\">转轴的左子树根节点</span><span class=\"o\">;</span>\n   <span class=\"n\">树的根节点</span> <span class=\"o\">=</span> <span class=\"n\">转轴</span><span class=\"o\">;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">中序不变</code> 旋转结束后二叉树的中序始终不变, <code class=\"language-plaintext highlighter-rouge\">A&lt;P&lt;B&lt;Q&lt;C</code></li>\n</ul>\n\n<h1 id=\"二简介\">二、简介</h1>\n\n<p>AVL树（Adelson-Velsky and Landis Tree）得名于它的发明者G. M. Adelson-Velsky和Evgenii Landis，他们在1962年的论文《An algorithm for the organization of information》中公开了这一数据结构。其实AVL就是在BST的基础上增加了一个平衡(Balance)的属性, 为的是稳固算法复杂度到 O(logn), BST算法复杂度受到树结构的影响会游离于 O(logn)~O(n) 之间, 而加入了平衡属性之后则会降低到恒定为 O(logn)</p>\n\n<h1 id=\"三基本特征\">三、基本特征</h1>\n\n<ul>\n  <li>首先是 BST 的一种( BST 有的它都有)</li>\n  <li>是平衡二叉树(根节点的平衡因子绝对值不大于1)</li>\n  <li>左右子树也是平衡二叉树</li>\n</ul>\n\n<h1 id=\"四算法描述\">四、算法描述</h1>\n\n<p>插入, 删除之后<code class=\"language-plaintext highlighter-rouge\">是否需要平衡</code>这个树? <code class=\"language-plaintext highlighter-rouge\">如何平衡</code>?</p>\n\n<h2 id=\"高度\">高度</h2>\n\n<p>为了判断一个树是否平衡? 引入了高度这个概念, 记录从树的最后一层到当前层数的距离\n<img src=\"https://img-blog.csdnimg.cn/2021041118181410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>所以我们的节点(Node)结构定义如下</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"o\">{</span>\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">;</span>\n        <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"旋转\">旋转</h2>\n\n<p>为了解决树的平衡问题引入了树的旋转</p>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181830108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>A, B, C, D代表 <code class=\"language-plaintext highlighter-rouge\">子节点</code>, <code class=\"language-plaintext highlighter-rouge\">子树</code> 或者 <code class=\"language-plaintext highlighter-rouge\">null</code></p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">左左</code> 左节点的左节点/子树导致的不平衡, 需要<code class=\"language-plaintext highlighter-rouge\">右旋</code></li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">rotateRight</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Node</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">height</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">height</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">右右</code> 右节点的右节点/子树导致的不平衡, 需要<code class=\"language-plaintext highlighter-rouge\">左旋</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">rotateLeft</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">Node</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">height</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">height</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">左右</code> 左节点的右节点/子树导致的不平衡, 需要<code class=\"language-plaintext highlighter-rouge\">左旋</code>, <code class=\"language-plaintext highlighter-rouge\">右旋</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">rotateLeftRight</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"nf\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">右左</code> 右节点的左节点/子树导致的不平衡, 需要<code class=\"language-plaintext highlighter-rouge\">右旋</code>, <code class=\"language-plaintext highlighter-rouge\">左旋</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">rotateRightLeft</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"nf\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"查找\">查找</h2>\n<p>和 BST 写法一致</p>\n\n<ul>\n  <li>先查找根节点,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt; 根</code>, 则找左子树;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt; 根</code>, 则找右子树;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">= 根</code>, 则找到返回;</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>算法时间复杂度 对于 n 个节点的树\n<code class=\"language-plaintext highlighter-rouge\">f(n) = 需要查找的次数 = 二叉树的层数 ~= O(logn)</code>\n<img src=\"https://img-blog.csdnimg.cn/20210411181848950.gif\" alt=\"在这里插入图片描述\" /></p>\n\n<h2 id=\"插入\">插入</h2>\n\n<ul>\n  <li>比对根节点, 小于就往左节点比对, 大于就往右节点比对</li>\n  <li>直到需要比对的节点为空, 而这个空就是你需要插入的位置</li>\n  <li>判断树是否平衡, 否, 则需要判断旋转类型并进行旋转变换</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">doInsert</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doInsert</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">parent</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Node</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">doInsert</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 判断树是否失衡</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// '右右'</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// '右左'</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateRightLeft</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">doInsert</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 判断树是否失衡</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// '左左'</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// '左右'</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateLeftRight</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 重新计算旋转之后的高度</span>\n        <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">height</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>算法时间复杂度:\n<code class=\"language-plaintext highlighter-rouge\">f(n) = 查找插入点的比对次数logn + 一次旋转(单旋或者双旋) + 判断是否平衡 ~= O(logn)</code></p>\n<blockquote>\n  <p>旋转的时间复杂度 O(1) 最多需要单旋或者双旋, 另外, 判断是否平衡的时间复杂度也是 O(1) ( 主要得益于 Node 使用了 height 记录高度, 典型的空间换时间), 这样总得算法复杂度还是 比对的次数\n<img src=\"https://img-blog.csdnimg.cn/20210411181902369.gif\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<h2 id=\"删除\">删除</h2>\n\n<ul>\n  <li>先查找到目标节点</li>\n  <li>若: 目标左子树为空, 则, 用目标右子树根节点替换目标</li>\n  <li>若: 目标右子树为空, 则, 用目标左子树根节点替换目标</li>\n  <li>若: 都不为空, 则, 选取<code class=\"language-plaintext highlighter-rouge\">左子树值最大节点</code>或者<code class=\"language-plaintext highlighter-rouge\">右子树最小节点</code>替换目标, 并, 递归删除替换目标的节点</li>\n  <li>判断树是否平衡, 否, 则需要判断旋转类型并进行旋转变换</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">remove</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doRemove</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">parent</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 判断树是否平衡</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Node</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                <span class=\"c1\">// `右左`</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateRightLeft</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// `右右`</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateLeft</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 判断树是否平衡</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Node</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                <span class=\"c1\">// `左右`</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateLeftRight</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// `左左`</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">rotateRight</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 找出左子树最大的值或者右子树最小的值替换, 这里选择前者来实现</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// 找到左子树最大值替换</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">findMax</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">).</span><span class=\"na\">data</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 删除左子树中用于替换的节点</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 左子树为空, 直接用右子树根节点替换被删除的节点</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 右子树为空, 直接用左子树根节点替换被删除的节点</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">findMax</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>算法复杂度:\n<code class=\"language-plaintext highlighter-rouge\">f(n) = 需要比对的次数 = 查找到目标比对次数logn + 旋转次数logn  = O(2logn)</code></p>\n<blockquote>\n  <p>最多需要 logn 次旋转, 来确保平衡, 所以最终的时间复杂度是 O(2logn)</p>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181918302.gif\" alt=\"在这里插入图片描述\" /></p>\n\n<h1 id=\"五完整代码\">五、完整代码</h1>\n\n<p>就一个AVLTree.java文件搞定, 里面还附有main()函数测试功能, 可直接运行<a href=\"https://github.com/summer-zhoujie/ZJPlayGround/blob/master/app/src/main/java/com/example/playground/binarytree/AVLTree.java\">github传送门</a></p>\n",
      "desc"     : "一、须知须会      平衡因子: 二叉树的 左子树 - 右子树 = 高度的差值,在平衡树中可能的值(-1 ,0 ,1)        平衡: 平衡因子 的绝对值小于 2 (下图第一张为平衡树, 第二张为不平衡树)    平衡树且平衡因子==0  非平衡树且平衡因子==-2  树的旋转: 参考维基百科 树的旋转转轴的移动方向来决定它是左旋还是右旋, 本文中称转轴右移为右旋反之则是左旋  右旋..."
} ,
  
  
  
    {
      "title"    : "数据结构(一), 二叉查找树BST",
      "title-lower"    : "数据结构(一), 二叉查找树bst",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "数据结构, 二叉树",
      "url"      : "/2021/04/12/markdown-datastrcuture_1/",
      "date"     : "2021-04-12 02:29:46 +0800",
      "content": "<h1 id=\"一别名\">一、别名</h1>\n<p>二叉搜索树, 有序二叉树, 排序二叉树, Binary Search Tree</p>\n\n<h1 id=\"二特征\">二、特征</h1>\n<ul>\n  <li>左子树的所有节点的值均小于根节点</li>\n  <li>右子树下所有节点的值均大于更节点</li>\n  <li>所有节点的值都不相同</li>\n  <li>任意节点的左子树和右子树也都是BST</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181220196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<h1 id=\"三节点结构\">三、节点结构</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 数据区</span>\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 左节点</span>\n        <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 右节点</span>\n        <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"四实现概述\">四、实现概述</h1>\n\n<h2 id=\"1-查找\">1. 查找</h2>\n\n<ul>\n  <li>先查找根节点,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt; 根</code>, 则找左子树;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt; 根</code>, 则找右子树;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">= 根</code>, 则找到返回;</li>\n</ul>\n\n<p>算法时间复杂度 对于 n 个节点的树</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">最优</code> f(n) = 需要查找的次数 = 二叉树的层数 ~= O(logn)</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181237148.gif\" alt=\"在这里插入图片描述\" /></p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">最差</code> f(n) = 需要查找的次数 = 二叉树的层数 = n = O(n)</li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181253179.gif\" alt=\"在这里插入图片描述\" /></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">doSearch</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"2-插入\">2. 插入</h2>\n\n<ul>\n  <li>比对根节点, 小于就往左节点比对, 大于就往右节点比对</li>\n  <li>直到需要比对的节点为空, 而这个空就是你需要插入的位置</li>\n</ul>\n\n<p>算法时间复杂度:</p>\n\n<ul>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">最优</code> f(n) = 需要比对的次数 = 二叉树的层数 ~= O(logn)\n<img src=\"https://img-blog.csdnimg.cn/20210411181451238.gif\" alt=\"在这里插入图片描述\" /></p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">最差</code> f(n) = 需要查找的次数 = 二叉树的层数 = n = O(n)</p>\n  </li>\n</ul>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210411181436660.gif\" alt=\"在这里插入图片描述\" /></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">doInsert</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doInsert</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">parent</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Node</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">doInsert</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">doInsert</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"3-删除\">3. 删除</h2>\n\n<ul>\n  <li>先查找到目标节点</li>\n  <li>若: 目标左子树为空, 则, 用目标右子树根节点替换目标</li>\n  <li>若: 目标右子树为空, 则, 用目标左子树根节点替换目标</li>\n  <li>若: 都不为空, 则, 选取<code class=\"language-plaintext highlighter-rouge\">左子树值最大节点</code>或者<code class=\"language-plaintext highlighter-rouge\">右子树最小节点</code>替换目标, 并, 递归删除替换目标的节点</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n</pre></td><td class=\"rouge-code\"><pre>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">remove</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">doRemove</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">parent</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 找出左子树最大的值或者右子树最小的值替换, 这里选择前者来实现</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// 找到左子树最大值替换</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">findMax</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">).</span><span class=\"na\">data</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 删除左子树中用于替换的节点</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">doRemove</span><span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 左子树为空, 直接用右子树根节点替换被删除的节点</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 右子树为空, 直接用左子树根节点替换被删除的节点</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Node</span> <span class=\"nf\">findMax</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>算法复杂度:</p>\n\n<ul>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">最优</code> f(n) = 需要比对的次数 = 查找到目标比对次数 + 递归查找<code class=\"language-plaintext highlighter-rouge\">替换目标的节点</code>的替换节点的比对次数 = 二叉树层数 = O(logn)\n<img src=\"https://img-blog.csdnimg.cn/20210411181347169.gif\" alt=\"在这里插入图片描述\" /></p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">最差</code> f(n) = … = 二叉树层数 = n = O(n)\n<img src=\"https://img-blog.csdnimg.cn/20210411181407701.gif\" alt=\"在这里插入图片描述\" /></p>\n  </li>\n</ul>\n\n<h1 id=\"具体实现\">具体实现</h1>\n\n<p>就一个BinarySearchTree.java文件搞定, 里面还附有main()函数测试功能, 可直接运行<a href=\"https://github.com/summer-zhoujie/ZJPlayGround/blob/master/app/src/main/java/com/example/playground/binarytree/BinarySearchTree.java\">github传送门</a></p>\n",
      "desc"     : "一、别名二叉搜索树, 有序二叉树, 排序二叉树, Binary Search Tree二、特征  左子树的所有节点的值均小于根节点  右子树下所有节点的值均大于更节点  所有节点的值都不相同  任意节点的左子树和右子树也都是BST三、节点结构12345678    public static class Node {        // 数据区        private int data..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(九) ,  gif 的加载实现",
      "title-lower"    : "android glide 3.7.0 源码解析(九) ,  gif 的加载实现",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/04/08/markdown-glide3.7.0_9/",
      "date"     : "2021-04-08 03:27:10 +0800",
      "content": "<h1 id=\"一涉及类目\">一、涉及类目</h1>\n<p>GlideDrawableImageViewTarget.java\nGifDrawable.java\nGifFrameLoader.java\nGifDecoder.java</p>\n\n<h1 id=\"二原理概述\">二、原理概述</h1>\n\n<p>老规矩先介绍原理的框架,免得看源代码迷路</p>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210405203102128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">GlideDrawableImageViewTarget</code> 会调用加载的 <code class=\"language-plaintext highlighter-rouge\">GifDrawable</code> 来启动动画</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">GifDrawable</code> 会在 <code class=\"language-plaintext highlighter-rouge\">draw()</code> 中绘制当前帧, 并委托 <code class=\"language-plaintext highlighter-rouge\">GifFrameLoader</code> 去加载下一帧</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">GifFrameLoader</code> 依赖 <code class=\"language-plaintext highlighter-rouge\">GifDecoder</code> 加载完成下一帧通知 <code class=\"language-plaintext highlighter-rouge\">GifDrawable</code> 刷新视图</li>\n</ul>\n\n<p>GifDrawable 其实是重写的 Drawable, 通过其 invalidateSelf() 通知界面重绘自己, 且在 draw() 方法中完成重绘, 还需要管理 loop, 用以控制结束循环\nGifFrameLoader 负责控制加载每一帧的时间间隔, 还负责管理加载位置\nGifDecoder 负责加载 gif 的帧</p>\n\n<h1 id=\"三源码细节\">三、源码细节</h1>\n\n<p>先把下面这两步的代码看了</p>\n\n<p><strong><code class=\"language-plaintext highlighter-rouge\">GlideDrawableImageViewTarget</code> 调用加载的 <code class=\"language-plaintext highlighter-rouge\">GifDrawable</code> 来启动动画</strong>\n<strong><code class=\"language-plaintext highlighter-rouge\">GifDrawable</code> 会在 <code class=\"language-plaintext highlighter-rouge\">draw()</code> 中绘制当前帧, 并委托 <code class=\"language-plaintext highlighter-rouge\">GifFrameLoader</code> 去加载下一帧</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideDrawableImageViewTarget</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"nc\">GlideDrawable</span> <span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"nc\">GlideAnimation</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">animation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">isAnimated</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"kt\">float</span> <span class=\"n\">viewRatio</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">();</span>\n            <span class=\"kt\">float</span> <span class=\"n\">drawableRatio</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">getIntrinsicWidth</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">getIntrinsicHeight</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">viewRatio</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"no\">SQUARE_RATIO_MARGIN</span>\n                    <span class=\"o\">&amp;&amp;</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">drawableRatio</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"no\">SQUARE_RATIO_MARGIN</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SquaringDrawable</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"n\">animation</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resource</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 这里调用了 GifDrawable 的 start 方法</span>\n        <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">setLoopCount</span><span class=\"o\">(</span><span class=\"n\">maxLoopCount</span><span class=\"o\">);</span>\n        <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"c1\">// GlideDrawable</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">start</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 状态置换跳过不看</span>\n        <span class=\"n\">isStarted</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">resetLoopCount</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isVisible</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 真正的使能代码</span>\n            <span class=\"n\">startRunning</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">startRunning</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// gif 只有 1 帧, 开始即结束</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"na\">getFrameCount</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 通知界面重绘自己, 结束了</span>\n            <span class=\"n\">invalidateSelf</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 不只 1 帧</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(!</span><span class=\"n\">isRunning</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">isRunning</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"c1\">// frameLoader 开始工作啦</span>\n            <span class=\"n\">frameLoader</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n            <span class=\"c1\">// 通知界面重绘自己, 就是把当前帧给先画出来</span>\n            <span class=\"n\">invalidateSelf</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>至此, 我们触发了 <code class=\"language-plaintext highlighter-rouge\">frameLoader.start()</code> , 并且界面上目前也因为 <code class=\"language-plaintext highlighter-rouge\">invalidateSelf()</code> 而绘制上了第一帧\n再来看看第三步: 循环加载帧, 并渲染到界面上</p>\n\n<p><strong><code class=\"language-plaintext highlighter-rouge\">GifFrameLoader</code> 依赖 <code class=\"language-plaintext highlighter-rouge\">GifDecoder</code> 加载完成下一帧通知 <code class=\"language-plaintext highlighter-rouge\">GifDrawable</code> 刷新视图</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GifFrameLoader</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">start</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isRunning</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">isRunning</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">isCleared</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">// 上面都是些状态信息, 跳过不看, 这个函数看名字就知道跑去加载下一帧了</span>\n        <span class=\"n\">loadNextFrame</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">loadNextFrame</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isRunning</span> <span class=\"o\">||</span> <span class=\"n\">isLoadPending</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">isLoadPending</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n\n        <span class=\"c1\">// 这行是移动 gifDecoder 的解析位置, 跳到下一帧的位置</span>\n        <span class=\"n\">gifDecoder</span><span class=\"o\">.</span><span class=\"na\">advance</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 获取下一帧的延时时间(gif 每帧之间都有个时间间隔)</span>\n        <span class=\"kt\">long</span> <span class=\"n\">targetTime</span> <span class=\"o\">=</span> <span class=\"nc\">SystemClock</span><span class=\"o\">.</span><span class=\"na\">uptimeMillis</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">gifDecoder</span><span class=\"o\">.</span><span class=\"na\">getNextDelay</span><span class=\"o\">();</span>\n        <span class=\"nc\">DelayTarget</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DelayTarget</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">,</span> <span class=\"n\">gifDecoder</span><span class=\"o\">.</span><span class=\"na\">getCurrentFrameIndex</span><span class=\"o\">(),</span> <span class=\"n\">targetTime</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 开始异步加载, 即不在主线程执行加载程序</span>\n        <span class=\"n\">requestBuilder</span>\n                <span class=\"o\">.</span><span class=\"na\">signature</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">FrameSignature</span><span class=\"o\">())</span>\n                <span class=\"o\">.</span><span class=\"na\">into</span><span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>直接触发 <code class=\"language-plaintext highlighter-rouge\">loadNextFrame()</code> 去加载下一帧, 真正的代码则是</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">gifDecoder.advance()</code> 可以粗略理解成跳到下一帧头部位置</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">gifDecoder.getNextDelay()</code> 获得下一帧的间隔时间</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">requestBuilder.into()</code> 异步解析下一帧, 解析完成会回调 <code class=\"language-plaintext highlighter-rouge\">DelayTarget</code></li>\n</ul>\n\n<p>下面看看 <code class=\"language-plaintext highlighter-rouge\">DelayTarget</code> 里面的回调</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DelayTarget</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"nc\">GlideAnimation</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">glideAnimation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resource</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 解析完成了, resource就存储着下一帧的图</span>\n            <span class=\"nc\">Message</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">obtainMessage</span><span class=\"o\">(</span><span class=\"nc\">FrameLoaderCallback</span><span class=\"o\">.</span><span class=\"na\">MSG_DELAY</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n            <span class=\"c1\">// 这里 MSG_DELAY 明显是处理帧的时间间隔, 现在要异步切回主线程处理刷新问题了</span>\n            <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">sendMessageAtTime</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">,</span> <span class=\"n\">targetTime</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">class</span> <span class=\"nc\">FrameLoaderCallback</span> <span class=\"kd\">implements</span> <span class=\"nc\">Handler</span><span class=\"o\">.</span><span class=\"na\">Callback</span> <span class=\"o\">{</span>\n        <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"no\">MSG_DELAY</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"no\">MSG_CLEAR</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">handleMessage</span><span class=\"o\">(</span><span class=\"nc\">Message</span> <span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"na\">what</span> <span class=\"o\">==</span> <span class=\"no\">MSG_DELAY</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">GifFrameLoader</span><span class=\"o\">.</span><span class=\"na\">DelayTarget</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">DelayTarget</span><span class=\"o\">)</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"na\">obj</span><span class=\"o\">;</span>\n                <span class=\"c1\">// 继续追踪</span>\n                <span class=\"n\">onFrameReady</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"na\">what</span> <span class=\"o\">==</span> <span class=\"no\">MSG_CLEAR</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">GifFrameLoader</span><span class=\"o\">.</span><span class=\"na\">DelayTarget</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">DelayTarget</span><span class=\"o\">)</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"na\">obj</span><span class=\"o\">;</span>\n                <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"c1\">// GifFrameLoader</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">onFrameReady</span><span class=\"o\">(</span><span class=\"nc\">DelayTarget</span> <span class=\"n\">delayTarget</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isCleared</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">obtainMessage</span><span class=\"o\">(</span><span class=\"nc\">FrameLoaderCallback</span><span class=\"o\">.</span><span class=\"na\">MSG_CLEAR</span><span class=\"o\">,</span> <span class=\"n\">delayTarget</span><span class=\"o\">).</span><span class=\"na\">sendToTarget</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nc\">DelayTarget</span> <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">;</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">delayTarget</span><span class=\"o\">;</span>\n        <span class=\"c1\">// callback 是一个 GlideDrawable, 告诉它我帮你把下一帧加载出来了, 下面来看看 GlideDrawable 是如何做的</span>\n        <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"na\">onFrameReady</span><span class=\"o\">(</span><span class=\"n\">delayTarget</span><span class=\"o\">.</span><span class=\"na\">index</span><span class=\"o\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">previous</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">obtainMessage</span><span class=\"o\">(</span><span class=\"nc\">FrameLoaderCallback</span><span class=\"o\">.</span><span class=\"na\">MSG_CLEAR</span><span class=\"o\">,</span> <span class=\"n\">previous</span><span class=\"o\">).</span><span class=\"na\">sendToTarget</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">isLoadPending</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">loadNextFrame</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">DelayTarget.onResourceReady()</code> 加载下一帧完成了;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">handler.sendMessageAtTime</code> 切回主线程, 顺便还把 帧的时间间隔问题解决了</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">callback.onFrameReady()</code> 通知 callback 也就是 GlideDrawable 加载好了</li>\n</ul>\n\n<p>下面来看看 GlideDrawable 在被通知加载好了之后做了些啥</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideDrawable</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onFrameReady</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">frameIndex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span> <span class=\"o\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">HONEYCOMB</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">getCallback</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">stop</span><span class=\"o\">();</span>\n            <span class=\"n\">reset</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 刷新自己, 触发 draw() 方法</span>\n        <span class=\"n\">invalidateSelf</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 如果满一个来回, 则loop 循环数量加一</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">frameIndex</span> <span class=\"o\">==</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"na\">getFrameCount</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">loopCount</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 循环次数够了,跳出循环</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">maxLoopCount</span> <span class=\"o\">!=</span> <span class=\"no\">LOOP_FOREVER</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">loopCount</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxLoopCount</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">stop</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">draw</span><span class=\"o\">(</span><span class=\"nc\">Canvas</span> <span class=\"n\">canvas</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isRecycled</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">applyGravity</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Gravity</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"nc\">GifState</span><span class=\"o\">.</span><span class=\"na\">GRAVITY</span><span class=\"o\">,</span> <span class=\"n\">getIntrinsicWidth</span><span class=\"o\">(),</span> <span class=\"n\">getIntrinsicHeight</span><span class=\"o\">(),</span> <span class=\"n\">getBounds</span><span class=\"o\">(),</span> <span class=\"n\">destRect</span><span class=\"o\">);</span>\n            <span class=\"n\">applyGravity</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 从 frameLoader 拿出当前帧(也就是之前委托它加载的下一帧)</span>\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">currentFrame</span> <span class=\"o\">=</span> <span class=\"n\">frameLoader</span><span class=\"o\">.</span><span class=\"na\">getCurrentFrame</span><span class=\"o\">();</span>\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">toDraw</span> <span class=\"o\">=</span> <span class=\"n\">currentFrame</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">currentFrame</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"na\">firstFrame</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 直接往画布上绘制</span>\n        <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">toDraw</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">destRect</span><span class=\"o\">,</span> <span class=\"n\">paint</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li>下一帧加载好了之后, GlideDrawable 触发自己的 <code class=\"language-plaintext highlighter-rouge\">draw()</code> 方法开始绘制</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">frameLoader.getCurrentFrame()</code> 取出下一帧</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">canvas.drawBitmap()</code> 直接往界面上绘制</li>\n</ul>\n\n<p>至此, glide gif的加载实现已讲解完毕! 感谢观看</p>\n",
      "desc"     : "一、涉及类目GlideDrawableImageViewTarget.javaGifDrawable.javaGifFrameLoader.javaGifDecoder.java二、原理概述老规矩先介绍原理的框架,免得看源代码迷路  GlideDrawableImageViewTarget 会调用加载的 GifDrawable 来启动动画  GifDrawable 会在 draw() 中绘制..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(八) , RecyclableBufferedInputStream 的 mark/reset 实现",
      "title-lower"    : "android glide 3.7.0 源码解析(八) , recyclablebufferedinputstream 的 mark/reset 实现",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/04/01/markdown-glide3.7.0_8/",
      "date"     : "2021-04-01 23:32:52 +0800",
      "content": "<h1 id=\"一mark--reset-的作用\">一、mark / reset 的作用</h1>\n<p><a href=\"/2021/03/31/markdown-glide3.7.0_7/index.html\">Android Glide 3.7.0 源码解析(七) , 细说图形变换和解码</a>有提到过RecyclableBufferedInputStream 对于 <code class=\"language-plaintext highlighter-rouge\">mark(int marklimit)</code> 和 <code class=\"language-plaintext highlighter-rouge\">reset()</code> 方法的作用, 本文则是探讨具体的实现思路</p>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210401101431339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<code class=\"language-plaintext highlighter-rouge\">mark(int marklimit)</code> 的作用是在流中创建一段起点是 markPos 长度是 markLimit 的可被重复读取区域, 当调用 <code class=\"language-plaintext highlighter-rouge\">reset()</code> 方法时流的读取位置会回到 markPos , 实现 markLimit 可以被重复读取</p>\n\n<p>注意:</p>\n<ul>\n  <li>当读取位置到达 readPos_2 时, <code class=\"language-plaintext highlighter-rouge\">reset()</code> 方法会失效, 因为已经超出 markLimit 的长度范围了</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">mark(int marklimit)</code> 标记的起始点 markPos 为方法调用时流的读取位置( 上图中 mark 时, 读取位置是 readPos_0, 所以 markPos == readPos_0 )</li>\n</ul>\n\n<blockquote>\n  <p>我们都知道 Stream 流只能被读取一遍</p>\n</blockquote>\n\n<h1 id=\"二实现思路\">二、实现思路</h1>\n<p>上文中的图解还只是黑盒运行路线查看, 下面来分析具体实现的图解\n<img src=\"https://img-blog.csdnimg.cn/20210401102442362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n由于 <code class=\"language-plaintext highlighter-rouge\">InputStream</code> 只能被读取一遍就消耗了, 所以我们要做到重复读取必须借助一个外部工具, 此处用的是 <code class=\"language-plaintext highlighter-rouge\">buf</code> 一个初始大小为 64K 的 byte[] 数组, 下面来对上图元素进行说明</p>\n<ul>\n  <li>右侧是还存在 <code class=\"language-plaintext highlighter-rouge\">InputStream</code> 中的未被读取的数据</li>\n  <li>左侧是已经从流程读取出来的数据, 存在 <code class=\"language-plaintext highlighter-rouge\">buf</code> 中</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">count</code> 代表的是 <code class=\"language-plaintext highlighter-rouge\">buf</code> 中有效数据的数量 ( 你读到流的末尾了,可能会产生 <code class=\"language-plaintext highlighter-rouge\">buf</code> 读不满的情况 )</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">markpos</code> 代表 mark() 标记的位置</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">蓝色条状</code> 则是需要支持被重复读取的部分了, <code class=\"language-plaintext highlighter-rouge\">marklimit</code> 表示它的长度</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">pos</code> 代表当前正在读取的位置</li>\n</ul>\n\n<p>现在我们有了 <code class=\"language-plaintext highlighter-rouge\">buf</code> 作为缓存, 可以将 mark 的流数据缓存在 <code class=\"language-plaintext highlighter-rouge\">buf</code> 中, 这样就可以重复读取了</p>\n\n<blockquote>\n  <p>注意: buf 大小不是恒定不变的, 当 marklimit &gt; buf.length 并满足一些其他条件时, buf 会被2倍扩容</p>\n</blockquote>\n\n<h1 id=\"三源码分析\">三、源码分析</h1>\n<p>看看 RecyclableBufferedInputStream 都有哪些变量(  其实在介绍思路的时候都讲过了 )</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RecyclableBufferedInputStream</span> <span class=\"kd\">extends</span> <span class=\"nc\">FilterInputStream</span> <span class=\"o\">{</span>\n\n  \t<span class=\"c1\">// buf 缓存从流中读取出来的数据</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">volatile</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">buf</span><span class=\"o\">;</span>\n    <span class=\"c1\">// buf 有效数据的长度</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"c1\">// mark 标记数据的长度</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">marklimit</span><span class=\"o\">;</span>\n    <span class=\"c1\">// mark 标记的位置, 默认 -1 表示没有标记</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">markpos</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"c1\">// 当前读取 buf 的位置</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">pos</span><span class=\"o\">;</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h2 id=\"mark-和-reset\">mark() 和 reset()</h2>\n<p>再来看看 mark 和 reset 方法</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre>\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">void</span> <span class=\"nf\">mark</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">readlimit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">marklimit</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">marklimit</span><span class=\"o\">,</span> <span class=\"n\">readlimit</span><span class=\"o\">);</span>\n        <span class=\"n\">markpos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">void</span> <span class=\"nf\">reset</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">buf</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IOException</span><span class=\"o\">(</span><span class=\"s\">\"Stream is closed\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(-</span><span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"n\">markpos</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">InvalidMarkException</span><span class=\"o\">(</span><span class=\"s\">\"Mark has been invalidated\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">markpos</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>mark 就做了两件事 赋值 + 赋值</p>\n<ul>\n  <li>marklimit 和旧的作比较取一个最大值</li>\n  <li>markpos 设置为当前读取位置</li>\n</ul>\n\n<p>reset 就做了一件事</p>\n<ul>\n  <li>当前位置 pos 被重置成 markpos</li>\n</ul>\n\n<h2 id=\"read\">read()</h2>\n\n<p>来看看 read 方法干了啥</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td><td class=\"rouge-code\"><pre>\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">int</span> <span class=\"nf\">read</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Use local refs since buf and in may be invalidated by an</span>\n        <span class=\"c1\">// unsynchronized close()</span>\n        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">localBuf</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">;</span>\n        <span class=\"nc\">InputStream</span> <span class=\"n\">localIn</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localBuf</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">localIn</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nf\">streamClosed</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// Are there buffered bytes available?</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">&gt;=</span> <span class=\"n\">count</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">fillbuf</span><span class=\"o\">(</span><span class=\"n\">localIn</span><span class=\"o\">,</span> <span class=\"n\">localBuf</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// no, fill buffer</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// localBuf may have been invalidated by fillbuf</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localBuf</span> <span class=\"o\">!=</span> <span class=\"n\">buf</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">localBuf</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localBuf</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">throw</span> <span class=\"nf\">streamClosed</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// Did filling the buffer fail with -1 (EOF)?</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">pos</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">localBuf</span><span class=\"o\">[</span><span class=\"n\">pos</span><span class=\"o\">++]</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>这个 read() 方法是读取单个字符用的, 每次只读去 1 个byte 返回</p>\n<ul>\n  <li>pos &gt;= count 代表 <code class=\"language-plaintext highlighter-rouge\">buf</code> 被读完了,  调用 fillbuf(localIn, localBuf) 去重新向 <code class=\"language-plaintext highlighter-rouge\">buf</code> 填充数据</li>\n  <li>count - pos &gt; 0 代表 <code class=\"language-plaintext highlighter-rouge\">buf</code> 数据还够, 直接读取返回 localBuf[pos++] &amp; 0xFF</li>\n</ul>\n\n<blockquote>\n  <p>这里 return 为毛是个 int ??? 说好的 byte 呢\n 因为返回的流数据里面是无符号的 byte 0~255 范围 , 而 java 里面的 byte 默认带符号, - 128 ~ 127, 数据范围不够, 只能用 int 来凑了, 注意这行代码:  <code class=\"language-plaintext highlighter-rouge\">localBuf[pos++] &amp; 0xFF</code> , 把高 24 位全部清零了, 达到返回 0~255 效果</p>\n</blockquote>\n\n<p>这中间好像没有提到 mark 的部分, 猜测只能是在 <code class=\"language-plaintext highlighter-rouge\">fillbuf</code> 函数中实现了, 跟进去看看</p>\n\n<h2 id=\"fillbuf\">fillbuf()</h2>\n<p>代码较长, 耐心看看</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td><td class=\"rouge-code\"><pre>\t<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">fillbuf</span><span class=\"o\">(</span><span class=\"nc\">InputStream</span> <span class=\"n\">localIn</span><span class=\"o\">,</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">localBuf</span><span class=\"o\">)</span>\n            <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 没有标记, 或者读取区域超过了标记的范围, 直接从流中读取数据到 buf</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">markpos</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">pos</span> <span class=\"o\">-</span> <span class=\"n\">markpos</span> <span class=\"o\">&gt;=</span> <span class=\"n\">marklimit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// Mark position not set or exceeded readlimit</span>\n            <span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">localIn</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">localBuf</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">markpos</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// [标记有效] 这里 buf.length 不够了, 扩容 2 倍</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">markpos</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">marklimit</span> <span class=\"o\">&gt;</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// Increase buffer size to accommodate the readlimit</span>\n            <span class=\"kt\">int</span> <span class=\"n\">newLength</span> <span class=\"o\">=</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">newLength</span> <span class=\"o\">&gt;</span> <span class=\"n\">marklimit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">newLength</span> <span class=\"o\">=</span> <span class=\"n\">marklimit</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">DEBUG</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"allocate buffer of length: \"</span> <span class=\"o\">+</span> <span class=\"n\">newLength</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">newbuf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"n\">newLength</span><span class=\"o\">];</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">localBuf</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">newbuf</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n            <span class=\"n\">localBuf</span> <span class=\"o\">=</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">newbuf</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// [标记有效] 标记位置 &gt;0 buf中 标记位置之前还有一批数据可以被舍弃</span>\n\t\t<span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"n\">markpos</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">localBuf</span><span class=\"o\">,</span> <span class=\"n\">markpos</span><span class=\"o\">,</span> <span class=\"n\">localBuf</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span>\n                    <span class=\"o\">-</span> <span class=\"n\">markpos</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 重置读取位置和 buf 中有效数据的长度</span>\n        <span class=\"n\">pos</span> <span class=\"o\">-=</span> <span class=\"n\">markpos</span><span class=\"o\">;</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">markpos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 如果 buf 不满(还有脏数据) 就开始从流中读取填充</span>\n        <span class=\"kt\">int</span> <span class=\"n\">bytesread</span> <span class=\"o\">=</span> <span class=\"n\">localIn</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">localBuf</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">pos</span><span class=\"o\">);</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">bytesread</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">pos</span> <span class=\"o\">+</span> <span class=\"n\">bytesread</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">bytesread</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>以上一共有三种情况</p>\n<ul>\n  <li>第一种: 没有 mark 参与或者mark已失效 (<code class=\"language-plaintext highlighter-rouge\">markpos == -1 || pos - markpos &gt;= marklimit</code>), 就是普通的从流中读取数据, 填满 buf , 然后把 pos 当前读取位置重置一下 ( 下图绿色表示扩容部分 )\n<img src=\"https://img-blog.csdnimg.cn/20210401112114187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  <li>\n    <p>第二种, (<code class=\"language-plaintext highlighter-rouge\">markpos == 0 &amp;&amp; marklimit &gt; localBuf.length &amp;&amp; count == localBuf.length</code>)\n mark 有效, 且 markpos 左侧已经退不可退, 抵到 buf 的最左侧了;\n 并且 marklimit 超过了 buf 的长度;\n 且 <code class=\"language-plaintext highlighter-rouge\">count == localBuf.length</code> 才进行 2 倍扩容</p>\n\n    <blockquote>\n      <ul>\n        <li>看<code class=\"language-plaintext highlighter-rouge\">count == localBuf.length</code> 这个条件, 他表示 buf 里面的有效数据必须是满的才进行扩容, buf 只有在读到文件末尾时才可能不满, 当流都读完了, 没数据了, 即使 marklimit 超过 buf 的长度也没必要扩容了, 根本读不到那么多了;</li>\n        <li>看这几行代码\n          <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kt\">int</span> <span class=\"n\">newLength</span> <span class=\"o\">=</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">newLength</span> <span class=\"o\">&gt;</span> <span class=\"n\">marklimit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">newLength</span> <span class=\"o\">=</span> <span class=\"n\">marklimit</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div>          </div>\n          <p>如果扩充 2 倍后大于 marklimit 则以 marklimit为准, 否则, 就只扩充 2 倍, 不会一下子扩充到 marklimit 的大小, 对内存的使用可谓是抠搜到极致 ( 可以理解为懒申请, 用到了才去申请更大的 buf )</p>\n        </li>\n      </ul>\n    </blockquote>\n  </li>\n</ul>\n\n<p>第二种情况 扩容一: marklimit &lt; buf.length * 2 的情况\n<img src=\"https://img-blog.csdnimg.cn/20210401134958485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n2 倍超出 marklimit 的长度, 直接以 marklimit的长度为准, 上图绿色为扩容部分</p>\n\n<p>第二种情况 扩容二: marklimit &gt;= buf.length * 2 的情况</p>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210401135644502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n  <li>第三种情况 markpos != 0 并且不满足扩容条件</li>\n</ul>\n\n<p>这种情况下, 只需要把 markpos 左边的数据清除, 然后再往 buf 右边空出的位置写入数据\n<img src=\"https://img-blog.csdnimg.cn/2021040114061454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n至此, <code class=\"language-plaintext highlighter-rouge\">fillbuf()</code> 分析完毕, 一种分三种情况来填充 <code class=\"language-plaintext highlighter-rouge\">buf</code> 上面都已做出图示说明</p>\n\n<h2 id=\"readbyte-buffer-int-offset-int-bytecount\">read(byte[] buffer, int offset, int byteCount)</h2>\n\n<p>函数很长, 但是逻辑相对简单</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">int</span> <span class=\"nf\">read</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">buffer</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">offset</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">byteCount</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 一系列错误检查就不看了, 非主线</span>\n        <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">localBuf</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localBuf</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nf\">streamClosed</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">byteCount</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"nc\">InputStream</span> <span class=\"n\">localIn</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localIn</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nf\">streamClosed</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 先直接读取 buf</span>\n        <span class=\"kt\">int</span> <span class=\"n\">required</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// There are bytes available in the buffer.</span>\n            <span class=\"kt\">int</span> <span class=\"n\">copylength</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">pos</span> <span class=\"o\">&gt;=</span> <span class=\"n\">byteCount</span> <span class=\"o\">?</span> <span class=\"n\">byteCount</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">pos</span><span class=\"o\">;</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">localBuf</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"o\">,</span> <span class=\"n\">offset</span><span class=\"o\">,</span> <span class=\"n\">copylength</span><span class=\"o\">);</span>\n            <span class=\"n\">pos</span> <span class=\"o\">+=</span> <span class=\"n\">copylength</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">copylength</span> <span class=\"o\">==</span> <span class=\"n\">byteCount</span> <span class=\"o\">||</span> <span class=\"n\">localIn</span><span class=\"o\">.</span><span class=\"na\">available</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// buf 里面就够读, 直接返回</span>\n                <span class=\"k\">return</span> <span class=\"n\">copylength</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">copylength</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 不够读计算还需要多少</span>\n            <span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"n\">byteCount</span> <span class=\"o\">-</span> <span class=\"n\">copylength</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// buf 已经不能读了, 计算还需要多少</span>\n            <span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"n\">byteCount</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 开启循环读到够为止</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">read</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 如果没有 mark 的影响, 直接从流本身读取</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">markpos</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">required</span> <span class=\"o\">&gt;=</span> <span class=\"n\">localBuf</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"n\">localIn</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">,</span> <span class=\"n\">offset</span><span class=\"o\">,</span> <span class=\"n\">required</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">read</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                \t<span class=\"c1\">// 流读尽了直接返回</span>\n                    <span class=\"k\">return</span> <span class=\"n\">required</span> <span class=\"o\">==</span> <span class=\"n\">byteCount</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">byteCount</span> <span class=\"o\">-</span> <span class=\"n\">required</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 开始利用 fillbuf() 填充 buf 数组</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fillbuf</span><span class=\"o\">(</span><span class=\"n\">localIn</span><span class=\"o\">,</span> <span class=\"n\">localBuf</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"n\">required</span> <span class=\"o\">==</span> <span class=\"n\">byteCount</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">byteCount</span> <span class=\"o\">-</span> <span class=\"n\">required</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// localBuf may have been invalidated by fillbuf</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localBuf</span> <span class=\"o\">!=</span> <span class=\"n\">buf</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">localBuf</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">;</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localBuf</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">throw</span> <span class=\"nf\">streamClosed</span><span class=\"o\">();</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"c1\">// 填充完开始读</span>\n                <span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">pos</span> <span class=\"o\">&gt;=</span> <span class=\"n\">required</span> <span class=\"o\">?</span> <span class=\"n\">required</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">pos</span><span class=\"o\">;</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">localBuf</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"o\">,</span> <span class=\"n\">offset</span><span class=\"o\">,</span> <span class=\"n\">read</span><span class=\"o\">);</span>\n                <span class=\"n\">pos</span> <span class=\"o\">+=</span> <span class=\"n\">read</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">required</span> <span class=\"o\">-=</span> <span class=\"n\">read</span><span class=\"o\">;</span>\n            <span class=\"c1\">// 这里判断够不够数, 够的话直接返回</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">required</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">byteCount</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// 这里判断流有没有读尽, 读尽了直接返回已读的size</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">localIn</span><span class=\"o\">.</span><span class=\"na\">available</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">byteCount</span> <span class=\"o\">-</span> <span class=\"n\">required</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">read</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>逻辑其实很简单, 就是先读当前 buf 的内容, 不够的话进行下一步, 开启循环, 如果没有 mark , 则直接从流中读取, 否则, fillbuf 填充 buf 之后 从 buf 再读取一遍, 直至流被读尽或者读够想要的数字跳出循环返回</p>\n",
      "desc"     : "一、mark / reset 的作用Android Glide 3.7.0 源码解析(七) , 细说图形变换和解码有提到过RecyclableBufferedInputStream 对于 mark(int marklimit) 和 reset() 方法的作用, 本文则是探讨具体的实现思路mark(int marklimit) 的作用是在流中创建一段起点是 markPos 长度是 markLi..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(七) , 细说图形变换和解码",
      "title-lower"    : "android glide 3.7.0 源码解析(七) , 细说图形变换和解码",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/04/01/markdown-glide3.7.0_7/",
      "date"     : "2021-04-01 01:49:42 +0800",
      "content": "<h1 id=\"一概览\">一、概览</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20210330135711769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>Glide 3.7.0 里面涉及的解码/图形变换主要是 <strong>大小缩放</strong>, <strong>CenterCrop</strong> , <strong>FitCenter</strong>, 其中大小缩放是基于<strong>Downsampler(解码工具)</strong> 实现的, 而剩余两个则是 <strong>Transformation(图形变换)</strong> 接口的两个实现类.\n所以本文主要介绍3点:</p>\n<ul>\n  <li><strong>CenterCrop</strong></li>\n  <li><strong>FitCenter</strong></li>\n  <li><strong>大小缩放</strong></li>\n</ul>\n\n<blockquote>\n  <p><a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a>文中的流程可以看出是在 DecodeJob 里面进行 解码 –&gt; 图形变换 的\n<img src=\"https://img-blog.csdnimg.cn/20210330135823576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n关于 fitCenter 和 centerCrop 的理解可以参考这篇文章的描述 <a href=\"https://www.jianshu.com/p/32e335d5b842\">Android ImageView 的scaleType 属性图解</a></p>\n</blockquote>\n\n<p>按照惯例先介绍原理框架, 免得看源码时候迷路\n<img src=\"https://img-blog.csdnimg.cn/20210331101008287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n解码流程详述</p>\n<ul>\n  <li>读取图片的配置, width, height, config, orientation,</li>\n  <li>根据传入的目标 targetWidth  和 targetHeight , 计算出来目标采样率, 就是<code class=\"language-plaintext highlighter-rouge\">缩放比例</code></li>\n  <li>根据缩放比例开始解析原始图片流, 解析出缩放尺寸的图片</li>\n  <li>根据方向 ( <code class=\"language-plaintext highlighter-rouge\">orientation</code> ) 信息对图片进行矩阵变换, 翻转/旋转图片</li>\n</ul>\n\n<blockquote>\n  <p>解码的过程会伴随着大量对象池思想的使用, 关于对象池概念,参看<a href=\"/2021/03/20/markdown-glide3.7.0_4/index.html\">Android Glide 3.7.0 源码解析(四) , BitmapPool作用及原理</a></p>\n</blockquote>\n\n<p>图形转换流程</p>\n<ul>\n  <li>根据目标宽高计算出来合适的缩放比例和偏移量</li>\n  <li>然后通过矩阵变换实现图形变换</li>\n</ul>\n\n<h1 id=\"二解码\">二、解码</h1>\n<p>还记得<a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a>文中提到过 <code class=\"language-plaintext highlighter-rouge\">DownSampler 这个类是将原始图片资源流解析成图片</code>, 我们的解码过程就是在这个类中进行的</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Downsampler</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"nc\">InputStream</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outHeight</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">ByteArrayPool</span> <span class=\"n\">byteArrayPool</span> <span class=\"o\">=</span> <span class=\"nc\">ByteArrayPool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytesForOptions</span> <span class=\"o\">=</span> <span class=\"n\">byteArrayPool</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytesForStream</span> <span class=\"o\">=</span> <span class=\"n\">byteArrayPool</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">getDefaultOptions</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// Use to fix the mark limit to avoid allocating buffers that fit entire images.</span>\n        <span class=\"nc\">RecyclableBufferedInputStream</span> <span class=\"n\">bufferedStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RecyclableBufferedInputStream</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">bytesForStream</span><span class=\"o\">);</span>\n        <span class=\"c1\">// Use to retrieve exceptions thrown while reading.</span>\n        <span class=\"c1\">// TODO(#126): when the framework no longer returns partially decoded Bitmaps or provides a way to determine</span>\n        <span class=\"c1\">// if a Bitmap is partially decoded, consider removing.</span>\n        <span class=\"nc\">ExceptionCatchingInputStream</span> <span class=\"n\">exceptionStream</span> <span class=\"o\">=</span> <span class=\"nc\">ExceptionCatchingInputStream</span><span class=\"o\">.</span><span class=\"na\">obtain</span><span class=\"o\">(</span><span class=\"n\">bufferedStream</span><span class=\"o\">);</span>\n        <span class=\"c1\">// Use to read data.</span>\n        <span class=\"c1\">// Ensures that we can always reset after reading an image header so that we can still attempt to decode the</span>\n        <span class=\"c1\">// full image even when the header decode fails and/or overflows our read buffer. See #283.</span>\n        <span class=\"nc\">MarkEnforcingInputStream</span> <span class=\"n\">invalidatingStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MarkEnforcingInputStream</span><span class=\"o\">(</span><span class=\"n\">exceptionStream</span><span class=\"o\">);</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">exceptionStream</span><span class=\"o\">.</span><span class=\"na\">mark</span><span class=\"o\">(</span><span class=\"no\">MARK_POSITION</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">orientation</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n                <span class=\"n\">orientation</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageHeaderParser</span><span class=\"o\">(</span><span class=\"n\">exceptionStream</span><span class=\"o\">).</span><span class=\"na\">getOrientation</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">WARN</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">w</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Cannot determine the image orientation from header\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"n\">exceptionStream</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">WARN</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                        <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">w</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Cannot reset the input stream\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inTempStorage</span> <span class=\"o\">=</span> <span class=\"n\">bytesForOptions</span><span class=\"o\">;</span>\n\n            <span class=\"kd\">final</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">inDimens</span> <span class=\"o\">=</span> <span class=\"n\">getDimensions</span><span class=\"o\">(</span><span class=\"n\">invalidatingStream</span><span class=\"o\">,</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n            <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">inWidth</span> <span class=\"o\">=</span> <span class=\"n\">inDimens</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">inHeight</span> <span class=\"o\">=</span> <span class=\"n\">inDimens</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n\n            <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">degreesToRotate</span> <span class=\"o\">=</span> <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">getExifOrientationDegrees</span><span class=\"o\">(</span><span class=\"n\">orientation</span><span class=\"o\">);</span>\n            <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">sampleSize</span> <span class=\"o\">=</span> <span class=\"n\">getRoundedSampleSize</span><span class=\"o\">(</span><span class=\"n\">degreesToRotate</span><span class=\"o\">,</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"n\">outHeight</span><span class=\"o\">);</span>\n\n            <span class=\"kd\">final</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">downsampleWithSize</span><span class=\"o\">(</span><span class=\"n\">invalidatingStream</span><span class=\"o\">,</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">,</span>\n            \t\t\t\t\t\t\t\t\t\t\t  <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"n\">sampleSize</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// BitmapFactory swallows exceptions during decodes and in some cases when inBitmap is non null, may catch</span>\n            <span class=\"c1\">// and log a stack trace but still return a non null bitmap. To avoid displaying partially decoded bitmaps,</span>\n            <span class=\"c1\">// we catch exceptions reading from the stream in our ExceptionCatchingInputStream and throw them here.</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Exception</span> <span class=\"n\">streamException</span> <span class=\"o\">=</span> <span class=\"n\">exceptionStream</span><span class=\"o\">.</span><span class=\"na\">getException</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">streamException</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">streamException</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"nc\">Bitmap</span> <span class=\"n\">rotated</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">downsampled</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">rotated</span> <span class=\"o\">=</span> <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">rotateImageExif</span><span class=\"o\">(</span><span class=\"n\">downsampled</span><span class=\"o\">,</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"n\">orientation</span><span class=\"o\">);</span>\n\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">rotated</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">downsampled</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"na\">recycle</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">rotated</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"n\">byteArrayPool</span><span class=\"o\">.</span><span class=\"na\">releaseBytes</span><span class=\"o\">(</span><span class=\"n\">bytesForOptions</span><span class=\"o\">);</span>\n            <span class=\"n\">byteArrayPool</span><span class=\"o\">.</span><span class=\"na\">releaseBytes</span><span class=\"o\">(</span><span class=\"n\">bytesForStream</span><span class=\"o\">);</span>\n            <span class=\"n\">exceptionStream</span><span class=\"o\">.</span><span class=\"na\">release</span><span class=\"o\">();</span>\n            <span class=\"n\">releaseOptions</span><span class=\"o\">(</span><span class=\"n\">options</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>这个函数还蛮长的, 一个片段一个片段看</p>\n\n<p><strong>对象池狂魔</strong></p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">ByteArrayPool</code>典型的对象池的实现, bytesForOptions 赋值给了<strong>options.inTempStorage</strong>, <a href=\"https://developer.android.com/reference/kotlin/android/graphics/BitmapFactory.Options?hl=en#intempstorage\">inTempStorage</a>官方给的解释是解码的时候会用到的缓存, 这里用对象池管理回收,防止内存抖动, 看到此处回收的代码了吗 <code class=\"language-plaintext highlighter-rouge\">byteArrayPool.releaseBytes(bytesForOptions)</code> ;</li>\n  <li>同理 bytesForStream 也被安排了, <strong>RecyclableBufferedInputStream</strong> 看名称就很容易能猜到了, 我们知道在解析流的时候, 如果要求这个流可以回溯读取(读过的内容再读取一遍), 一般需要一个Buffer来缓存从流中读出的数据, 而这里就把这个 Buffer 抽象出来交给 <code class=\"language-plaintext highlighter-rouge\">ByteArrayPool</code> 管理了</li>\n  <li>再来看 <code class=\"language-plaintext highlighter-rouge\">ExceptionCatchingInputStream exceptionStream = ExceptionCatchingInputStream.obtain(bufferedStream);</code> 这行代码, 是不是联想到 Message.obtain(), 没错这里也是个典型的对象池的概念, <code class=\"language-plaintext highlighter-rouge\">exceptionStream.release();</code> 在此处回收进入对象池, 这里就不详述了,感兴趣可以自行跟进 <strong>ExceptionCatchingInputStream</strong> 看看</li>\n  <li>最后, 再来看 <code class=\"language-plaintext highlighter-rouge\">final BitmapFactory.Options options = getDefaultOptions();</code> 和 <code class=\"language-plaintext highlighter-rouge\">releaseOptions(options);</code> 这一组, 也是一个对象池实现</li>\n  <li>还没有结束 <code class=\"language-plaintext highlighter-rouge\">downsampleWithSize(invalidatingStream, bufferedStream, options, pool, inWidth, inHeight, sampleSize, decodeFormat);</code> 这行里面的 <strong>pool</strong> , 就是一个 BitmapPool , 是 Bitmap 的对象池</li>\n</ul>\n\n<blockquote>\n  <p>Android 3.0 之后可以将流中的图像数据解码在一个不用的已创建的 Bitmap 实例里面, 具体参见 <a href=\"/2021/03/30/markdown-bitmap_1/index.html\">Android Bitmap(一), 资源重用</a></p>\n</blockquote>\n\n<h2 id=\"读取图片配置\">读取图片配置</h2>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DownSampler.decode</span>\n\n        <span class=\"nc\">RecyclableBufferedInputStream</span> <span class=\"n\">bufferedStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RecyclableBufferedInputStream</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">bytesForStream</span><span class=\"o\">);</span>\n        <span class=\"nc\">ExceptionCatchingInputStream</span> <span class=\"n\">exceptionStream</span> <span class=\"o\">=</span> <span class=\"nc\">ExceptionCatchingInputStream</span><span class=\"o\">.</span><span class=\"na\">obtain</span><span class=\"o\">(</span><span class=\"n\">bufferedStream</span><span class=\"o\">);</span>\n        <span class=\"nc\">MarkEnforcingInputStream</span> <span class=\"n\">invalidatingStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MarkEnforcingInputStream</span><span class=\"o\">(</span><span class=\"n\">exceptionStream</span><span class=\"o\">);</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>先来三层 InputStream 包装 (设计模式: 装饰者模式),</p>\n<ul>\n  <li><strong>第一层 RecyclableBufferedInputStream</strong> 实现流的回溯功能(mark/reset), 暴露 Buffer 方便接入外面的对象池管理;</li>\n  <li><strong>第二层 ExceptionCatchingInputStream</strong>  担任异常处理功能;</li>\n  <li><strong>第三层 MarkEnforcingInputStream</strong> 这一层是为了防止读取图片头部属性等数据的时候读超了 mark 标记的位数, 之后就无法 reset 了\n    <blockquote>\n      <p>InputStream mark / reset 方法的解释\n<img src=\"https://img-blog.csdnimg.cn/2021033115434729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\nmark(int limit) 的作用是标记一段长度为limit的流, 使它可以被重新读取, 而 reset() 就是将当前的读取位置指向之前 mark() 的位置, 但当超限( 例如: readPos_2位置 )时就无法 reset() 了</p>\n      <ul>\n        <li>在<strong>读取位置是 readPos_0</strong> 时 , mark(int limit) 标记当前读取流的位置</li>\n        <li>在<strong>读取位置是 readPos_1</strong> 时 , 调用 reset 回溯有效( readPos_1 &lt;= limitPos ), 没有超出 limit 的限制, 会回到 markPos 再读一遍流</li>\n        <li>在<strong>读取位置是 readPos_2</strong> 时, 调用 reset  无效 (readPos_1 &gt; limitPos ), 超出 limit 限制</li>\n      </ul>\n\n      <p>关于 RecyclableBufferedInputStream 如何实现 mark 和 reset 方法的, 参考 <a href=\"/2021/04/01/markdown-glide3.7.0_8/index.html\">Android Glide 3.7.0 源码解析(八) , RecyclableBufferedInputStream 的 mark/reset 实现</a></p>\n    </blockquote>\n  </li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DownSampler.decode</span>\n\n\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">exceptionStream</span><span class=\"o\">.</span><span class=\"na\">mark</span><span class=\"o\">(</span><span class=\"no\">MARK_POSITION</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">orientation</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n                <span class=\"n\">orientation</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageHeaderParser</span><span class=\"o\">(</span><span class=\"n\">exceptionStream</span><span class=\"o\">).</span><span class=\"na\">getOrientation</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">WARN</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">w</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Cannot determine the image orientation from header\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"n\">exceptionStream</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">WARN</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                        <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">w</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Cannot reset the input stream\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"o\">...</span>\n     <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>紧接着就用到了 mark / reset 功能 , 读取头部信息里面存储的<strong>方向信息</strong></p>\n\n<blockquote>\n  <p>关于 orientation 值代表的详细含义参考这篇文章:  <a href=\"https://my.oschina.net/u/4283333/blog/3423645\">EXIF 方向参数 Orientation</a></p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DownSampler.decode</span>\n\n\t<span class=\"kd\">final</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">inDimens</span> <span class=\"o\">=</span> <span class=\"n\">getDimensions</span><span class=\"o\">(</span><span class=\"n\">invalidatingStream</span><span class=\"o\">,</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">inWidth</span> <span class=\"o\">=</span> <span class=\"n\">inDimens</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">inHeight</span> <span class=\"o\">=</span> <span class=\"n\">inDimens</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">getDimensions</span><span class=\"o\">(</span><span class=\"nc\">MarkEnforcingInputStream</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"nc\">RecyclableBufferedInputStream</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span>\n            <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inJustDecodeBounds</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">decodeStream</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inJustDecodeBounds</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outWidth</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outHeight</span> <span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>这里获取了待解析图片的宽高</p>\n\n<h2 id=\"计算缩放比例\">计算缩放比例</h2>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DownSampler.decode</span>\n\n\t<span class=\"c1\">// 计算图片被旋转的角度</span>\n\t<span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">degreesToRotate</span> <span class=\"o\">=</span> <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">getExifOrientationDegrees</span><span class=\"o\">(</span><span class=\"n\">orientation</span><span class=\"o\">);</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">sampleSize</span> <span class=\"o\">=</span> <span class=\"n\">getRoundedSampleSize</span><span class=\"o\">(</span><span class=\"n\">degreesToRotate</span><span class=\"o\">,</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"n\">outHeight</span><span class=\"o\">);</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getRoundedSampleSize</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">degreesToRotate</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">targetHeight</span> <span class=\"o\">=</span> <span class=\"n\">outHeight</span> <span class=\"o\">==</span> <span class=\"nc\">Target</span><span class=\"o\">.</span><span class=\"na\">SIZE_ORIGINAL</span> <span class=\"o\">?</span> <span class=\"n\">inHeight</span> <span class=\"o\">:</span> <span class=\"n\">outHeight</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">targetWidth</span> <span class=\"o\">=</span> <span class=\"n\">outWidth</span> <span class=\"o\">==</span> <span class=\"nc\">Target</span><span class=\"o\">.</span><span class=\"na\">SIZE_ORIGINAL</span> <span class=\"o\">?</span> <span class=\"n\">inWidth</span> <span class=\"o\">:</span> <span class=\"n\">outWidth</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">exactSampleSize</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">degreesToRotate</span> <span class=\"o\">==</span> <span class=\"mi\">90</span> <span class=\"o\">||</span> <span class=\"n\">degreesToRotate</span> <span class=\"o\">==</span> <span class=\"mi\">270</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 90 和 270 度 需要把长宽对调来计算缩放比例</span>\n            <span class=\"n\">exactSampleSize</span> <span class=\"o\">=</span> <span class=\"n\">getSampleSize</span><span class=\"o\">(</span><span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"n\">targetWidth</span><span class=\"o\">,</span> <span class=\"n\">targetHeight</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">exactSampleSize</span> <span class=\"o\">=</span> <span class=\"n\">getSampleSize</span><span class=\"o\">(</span><span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"n\">targetWidth</span><span class=\"o\">,</span> <span class=\"n\">targetHeight</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 去一个最大的 且  &lt;= exactSampleSize 且 是2的次方</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">powerOfTwoSampleSize</span> <span class=\"o\">=</span> <span class=\"n\">exactSampleSize</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span>\n                <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">highestOneBit</span><span class=\"o\">(</span><span class=\"n\">exactSampleSize</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// powerOfTwoSampleSize == 0 代表不缩放,也就是返回 1 倍</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">powerOfTwoSampleSize</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">Downsampler</span> <span class=\"no\">AT_LEAST</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Downsampler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">protected</span> <span class=\"kt\">int</span> <span class=\"nf\">getSampleSize</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 按照目标的长宽比判定 至少需要缩放多少倍</span>\n            <span class=\"k\">return</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">inHeight</span> <span class=\"o\">/</span> <span class=\"n\">outHeight</span><span class=\"o\">,</span> <span class=\"n\">inWidth</span> <span class=\"o\">/</span> <span class=\"n\">outWidth</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"AT_LEAST.com.bumptech.glide.load.data.bitmap\"</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">};</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">Downsampler</span> <span class=\"no\">AT_MOST</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Downsampler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">protected</span> <span class=\"kt\">int</span> <span class=\"nf\">getSampleSize</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 按照目标的长宽比判定 至多需要缩放多少倍</span>\n            <span class=\"kt\">int</span> <span class=\"n\">maxIntegerFactor</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">ceil</span><span class=\"o\">(</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">inHeight</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">outHeight</span><span class=\"o\">,</span>\n                <span class=\"n\">inWidth</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">outWidth</span><span class=\"o\">));</span>\n            <span class=\"kt\">int</span> <span class=\"n\">lesserOrEqualSampleSize</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">highestOneBit</span><span class=\"o\">(</span><span class=\"n\">maxIntegerFactor</span><span class=\"o\">));</span>\n            <span class=\"k\">return</span> <span class=\"n\">lesserOrEqualSampleSize</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">(</span><span class=\"n\">lesserOrEqualSampleSize</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxIntegerFactor</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"AT_MOST.com.bumptech.glide.load.data.bitmap\"</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">};</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>先根据目标宽高算出整数的缩放比例, 有两种计算方式(但其实查看 3.7.0的代码, 只用到了 AT_LEAST)</p>\n<ul>\n  <li>AT_LEAST 取 sampleSize 的最小值, 意思是: 至少需要缩放多少倍</li>\n  <li>AT_MOST 取 sampleSize 的最大值 (而且还是 ceil 的方式向上取整) 意思是最多需要缩放多少倍</li>\n</ul>\n\n<p>这步计算我们拿到的 exactSampleSize 却不是最终的 sampleSize, <a href=\"https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inSampleSize\">官文</a>里面有提到, sampleSize 需要是 2 的整数次方 且 大于一, 所以我们<code class=\"language-plaintext highlighter-rouge\">需要在exactSampleSize 范围内找一个最大的满足 2 的整数次方</code>的最终 sampleSize , 并且与 1 进行比较</p>\n\n<blockquote>\n  <p>sampleSize == 4 代表缩小 4 倍\n<img src=\"https://img-blog.csdnimg.cn/20210331163814297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<p>缩放比例就计算完了, 下一步</p>\n\n<h2 id=\"解析原图为对应缩放比例\">解析原图为对应缩放比例</h2>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DownSampler.decode</span>\n\n\t<span class=\"kd\">final</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">downsampleWithSize</span><span class=\"o\">(</span><span class=\"n\">invalidatingStream</span><span class=\"o\">,</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"n\">options</span><span class=\"o\">,</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"n\">sampleSize</span><span class=\"o\">,</span><span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">downsampleWithSize</span><span class=\"o\">(</span><span class=\"nc\">MarkEnforcingInputStream</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"nc\">RecyclableBufferedInputStream</span>  <span class=\"n\">bufferedStream</span><span class=\"o\">,</span>\n            <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inHeight</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sampleSize</span><span class=\"o\">,</span>\n            <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n\t\t<span class=\"c1\">// 读取 config</span>\n        <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">getConfig</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 初始化 options</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inSampleSize</span> <span class=\"o\">=</span> <span class=\"n\">sampleSize</span><span class=\"o\">;</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inPreferredConfig</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">;</span>\n\n\t\t<span class=\"c1\">// 这里利用 BitmapPool 对象池 和 Bitmap 的重用机制, 做了一个Bitmap内存重用的东东</span>\n        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inSampleSize</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">KITKAT</span> <span class=\"o\">&lt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">shouldUsePool</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">targetWidth</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">ceil</span><span class=\"o\">(</span><span class=\"n\">inWidth</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">double</span><span class=\"o\">)</span> <span class=\"n\">sampleSize</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">targetHeight</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">ceil</span><span class=\"o\">(</span><span class=\"n\">inHeight</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">double</span><span class=\"o\">)</span> <span class=\"n\">sampleSize</span><span class=\"o\">);</span>\n            <span class=\"n\">setInBitmap</span><span class=\"o\">(</span><span class=\"n\">options</span><span class=\"o\">,</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"na\">getDirty</span><span class=\"o\">(</span><span class=\"n\">targetWidth</span><span class=\"o\">,</span> <span class=\"n\">targetHeight</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 开始解析</span>\n        <span class=\"k\">return</span> <span class=\"nf\">decodeStream</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">setInBitmap</span><span class=\"o\">(</span><span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">recycled</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">HONEYCOMB</span> <span class=\"o\">&lt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 给 options 的 inBitmap 字段赋值, 可以将原始图片资源解析到一个不用的 Bitmap 对象中去</span>\n            <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inBitmap</span> <span class=\"o\">=</span> <span class=\"n\">recycled</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">decodeStream</span><span class=\"o\">(</span><span class=\"nc\">MarkEnforcingInputStream</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"nc\">RecyclableBufferedInputStream</span> <span class=\"n\">bufferedStream</span><span class=\"o\">,</span>\n            <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeStream</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">...</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>读取 config</li>\n  <li>把 config 和之前算好的 sampleSize 赋值给 options</li>\n  <li>给 options 的 inBitmap 字段赋值, 可以将原始图片资源解析到一个不用的 Bitmap 对象中去</li>\n  <li>利用 Bitmap 的资源重用机制完成对原始图片的解码操作</li>\n</ul>\n\n<blockquote>\n  <p>关于Bitmap的重用机制可以参考, <a href=\"/2021/03/30/markdown-bitmap_1/index.html\">Android Bitmap(一), 资源重用</a>\n关于对象池的概念可以参考, <a href=\"/2021/03/20/markdown-glide3.7.0_4/index.html\">Android Glide 3.7.0 源码解析(四) , BitmapPool作用及原理</a></p>\n</blockquote>\n\n<p>解码过程分析完毕, 接下来的图形转换就很简单了, 一共就两个函数</p>\n\n<h1 id=\"三图形转换-fitcenter\">三、图形转换 fitCenter</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FitCenter</span> <span class=\"kd\">extends</span> <span class=\"nc\">BitmapTransformation</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">FitCenter</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">FitCenter</span><span class=\"o\">(</span><span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">transform</span><span class=\"o\">(</span><span class=\"nc\">BitmapPool</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">toTransform</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t<span class=\"c1\">// 关键代码在这里</span>\n        <span class=\"k\">return</span> <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">fitCenter</span><span class=\"o\">(</span><span class=\"n\">toTransform</span><span class=\"o\">,</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"n\">outHeight</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"FitCenter.com.bumptech.glide.load.resource.bitmap\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// TransformationUtils</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">fitCenter</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">toFit</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">width</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">v</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"requested target size matches input, returning input\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">toFit</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 计算缩放比例 2 代表放大 2 倍, 这里去最小值, 意思是保证能放的进去 ImageView 控件</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">float</span> <span class=\"n\">widthPercentage</span> <span class=\"o\">=</span> <span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">float</span> <span class=\"n\">heightPercentage</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">float</span> <span class=\"n\">minPercentage</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">widthPercentage</span><span class=\"o\">,</span> <span class=\"n\">heightPercentage</span><span class=\"o\">);</span>\n\n\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">targetWidth</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minPercentage</span> <span class=\"o\">*</span> <span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">());</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">targetHeight</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minPercentage</span> <span class=\"o\">*</span> <span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">());</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">targetWidth</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">toFit</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">targetHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">v</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"adjusted target size matches input, returning input\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">toFit</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 对象池获取一个旧的大小匹配的</span>\n        <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">getSafeConfig</span><span class=\"o\">(</span><span class=\"n\">toFit</span><span class=\"o\">);</span>\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">toReuse</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">targetWidth</span><span class=\"o\">,</span> <span class=\"n\">targetHeight</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toReuse</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">toReuse</span> <span class=\"o\">=</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">createBitmap</span><span class=\"o\">(</span><span class=\"n\">targetWidth</span><span class=\"o\">,</span> <span class=\"n\">targetHeight</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 设置透明属性, 官文描述在某些情况下可以提升Bitmap的绘制速度</span>\n        <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">setAlpha</span><span class=\"o\">(</span><span class=\"n\">toFit</span><span class=\"o\">,</span> <span class=\"n\">toReuse</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// 矩阵变换控制缩放</span>\n        <span class=\"nc\">Canvas</span> <span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Canvas</span><span class=\"o\">(</span><span class=\"n\">toReuse</span><span class=\"o\">);</span>\n        <span class=\"nc\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Matrix</span><span class=\"o\">();</span>\n        <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"n\">minPercentage</span><span class=\"o\">,</span> <span class=\"n\">minPercentage</span><span class=\"o\">);</span>\n        <span class=\"nc\">Paint</span> <span class=\"n\">paint</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Paint</span><span class=\"o\">(</span><span class=\"no\">PAINT_FLAGS</span><span class=\"o\">);</span>\n        <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">toFit</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"o\">,</span> <span class=\"n\">paint</span><span class=\"o\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">toReuse</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>以上源码,所见即所得,非常简单, 需要注意的是</p>\n<ul>\n  <li>缩放比例选取最小值, 是为的能放的进去界面组件, 因为是FitCenter</li>\n  <li>TransformationUtils.setAlpha 设置是否包含透明像素的标志位, 某些情况下可以提升绘制速度,查看官文描述如下</li>\n</ul>\n\n<blockquote>\n  <p><img src=\"https://img-blog.csdnimg.cn/20210331172045203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<h1 id=\"四图形转换-centercrop\">四、图形转换 centerCrop</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// CenterCrop</span>\n\n\t<span class=\"kd\">protected</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">transform</span><span class=\"o\">(</span><span class=\"nc\">BitmapPool</span> <span class=\"n\">pool</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">toTransform</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">outHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">toReuse</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"n\">outHeight</span><span class=\"o\">,</span> <span class=\"n\">toTransform</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span>\n                <span class=\"o\">?</span> <span class=\"n\">toTransform</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span><span class=\"o\">.</span><span class=\"na\">ARGB_8888</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 还是在 TransformationUtils 中进行处理</span>\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">centerCrop</span><span class=\"o\">(</span><span class=\"n\">toReuse</span><span class=\"o\">,</span> <span class=\"n\">toTransform</span><span class=\"o\">,</span> <span class=\"n\">outWidth</span><span class=\"o\">,</span> <span class=\"n\">outHeight</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toReuse</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">toReuse</span> <span class=\"o\">!=</span> <span class=\"n\">transformed</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">toReuse</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">toReuse</span><span class=\"o\">.</span><span class=\"na\">recycle</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">transformed</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">centerCrop</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">recycled</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">toCrop</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toCrop</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">width</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">toCrop</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">final</span> <span class=\"kt\">float</span> <span class=\"n\">scale</span><span class=\"o\">;</span>\n        <span class=\"kt\">float</span> <span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dy</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"nc\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Matrix</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 这个算式改成除法比较好理解 toCrop.getWidth()/width &gt; toCrop.getHeight()/height, 结合 CenterCrop 的属性理解</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">height</span> <span class=\"o\">&gt;</span> <span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 宽度超限了,需要对宽度进行裁剪</span>\n        \t<span class=\"c1\">// 按照高度比例进行缩放</span>\n            <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">();</span>\n            <span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">scale</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5f</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 高度超限了,需要对高度进行裁剪</span>\n        \t<span class=\"c1\">// 按照宽度比例进行缩放</span>\n            <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">();</span>\n            <span class=\"n\">dy</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"n\">toCrop</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">scale</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5f</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 先缩放</span>\n        <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"n\">scale</span><span class=\"o\">,</span> <span class=\"n\">scale</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 再平移</span>\n        <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"na\">postTranslate</span><span class=\"o\">((</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">+</span> <span class=\"mf\">0.5f</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dy</span> <span class=\"o\">+</span> <span class=\"mf\">0.5f</span><span class=\"o\">));</span>\n\n\n\t\t<span class=\"c1\">// Bitmap重用机制</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">recycled</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">recycled</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">createBitmap</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">getSafeConfig</span><span class=\"o\">(</span><span class=\"n\">toCrop</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 同前文, 提速用的</span>\n        <span class=\"nc\">TransformationUtils</span><span class=\"o\">.</span><span class=\"na\">setAlpha</span><span class=\"o\">(</span><span class=\"n\">toCrop</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Canvas</span> <span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Canvas</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">);</span>\n        <span class=\"nc\">Paint</span> <span class=\"n\">paint</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Paint</span><span class=\"o\">(</span><span class=\"no\">PAINT_FLAGS</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 绘制到 canvas 上</span>\n        <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">toCrop</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">paint</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>代码比较简单,就是通过缩放和平移,摆好位置后,直接绘制到新的 Bitmap 上, 唯一需要注意的是<code class=\"language-plaintext highlighter-rouge\">toCrop.getWidth()/width &gt; toCrop.getHeight()/height</code>会选取一个比例小的按比例缩放, 把比例大的哪个平移裁剪掉</p>\n\n",
      "desc"     : "一、概览Glide 3.7.0 里面涉及的解码/图形变换主要是 大小缩放, CenterCrop , FitCenter, 其中大小缩放是基于Downsampler(解码工具) 实现的, 而剩余两个则是 Transformation(图形变换) 接口的两个实现类.所以本文主要介绍3点:  CenterCrop  FitCenter  大小缩放  Android Glide 3.7.0 源码解..."
} ,
  
  
  
    {
      "title"    : "Android Bitmap(一), 资源重用",
      "title-lower"    : "android bitmap(一), 资源重用",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "Bitmap, 内存优化",
      "url"      : "/2021/03/31/markdown-bitmap_1/",
      "date"     : "2021-03-31 01:48:40 +0800",
      "content": "<h1 id=\"一为什么bitmap需要资源重用\">一、为什么Bitmap需要资源重用</h1>\n<p>Android 中图片显示的实体其实是一个 Bitmap 对象, 每次图片显示时, 都会构建一个 Bitmap 对象, 不用时再销毁, 假设, 在一个长列表且列表的每项都有一个图片显示, 持续滑动这个列表, 内存中的行为就是, 持续的创建 Bitmap 对象和产生不用的 Bitmap 对象, 当量级到达一定程度, 会触发 GC, 这样持续滑动界面, 势必会频繁触发 GC, 导致界面卡顿</p>\n\n<h1 id=\"二bitmap-内存管理的演变\">二、Bitmap 内存管理的演变</h1>\n<blockquote>\n  <p>以下内容参考官文: <a href=\"https://developer.android.com/topic/performance/graphics/manage-memory#inBitmap\">管理位图内存</a></p>\n</blockquote>\n\n<ul>\n  <li><strong>Android Android 2.2（API 级别 8）及以下</strong>，当发生垃圾回收时，应用的线程会停止。这会导致延迟，从而降低性能。</li>\n  <li><strong>Android 2.3</strong> 添加了并发垃圾回收功能，这意味着系统不再引用位图后，很快就会回收内存。</li>\n  <li><strong>Android 2.3.3（API 级别 10）及以下</strong>，位图的后备像素数据存储在本地内存 ( 不是在虚拟机中是在Native中, 可以简单理解为Android设备内存 ) 中。它与存储在 Dalvik 堆中的位图本身是分开的。本地内存中的像素数据并不以可预测的方式释放，可能会导致应用短暂超出其内存限制并崩溃。</li>\n  <li><strong>Android 3.0（API 级别 11）~ Android 7.1（API 级别 25）</strong>，像素数据会与关联的位图一起存储在 Dalvik 堆上。</li>\n  <li><strong>Android 8.0（API 级别 26）及以上</strong>，位图像素数据存储在原生堆 ( 又存回了Native ) 中。\n<img src=\"https://img-blog.csdnimg.cn/20210330153900146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n\n<p>官文在介绍 Bitmap 重用之前, 为啥介绍内存管理背景?</p>\n<ul>\n  <li>猜测和资源重用有关, 官方介绍Android 3.0 及以后 Bitmap 才支持重用, 在 2.3.3 以前, 只能在不用的时候调用 Bitmap 的 recycle() 方法, 联想到上面的背景, 可能是当时 Bitmap 存储在 Native 上对重用的实现带来了一些难题, 而 Android 3.0~7.1 Bitmap 存储在 Dalvik中时, 这时候可以利用 BitmapFactory.Options.inBitmap 字段实现资源重用. 至于 Android 8.0 以上还支持重用, 则是难题被攻克了, 以上为猜测, 个中原因有待证实</li>\n</ul>\n\n<p>为啥 Android 8.0 以后, Bitmap 的存储又挪回 Native 了呢?</p>\n<ul>\n  <li>应该是借鉴的 iOS 的操作, iOS的一个APP几乎能用近所有的可用内存（除去系统开支), 8.0之后，Android也向这个方向靠拢， 我们都知道 8.0 及以上的机器的内存高达4~8G, 而 Dalvik 虚拟机才能分配到多少, 至多几百兆, 这样势必会造成资源的浪费, 假设一个 4G 的机器, Dalvik 的 heap 分配了 512M, 那剩下的好几个G都浪费了, 如何解决这个问题? 最好的下手对象就是Bitmap，因为它是耗内存大户。我们把 Bitmap 的存储全部挪到 Native(机器存储) 去, 而不是放在 Dalvik 虚拟机分配了可怜的 heap 大小</li>\n</ul>\n\n<h1 id=\"三如何资源重用\">三、如何资源重用</h1>\n<p>前文可知, 分两种情况, <strong>3.0以下</strong> 和 <strong>3.0及以上</strong></p>\n\n<h2 id=\"30以下\">3.0以下</h2>\n<p>只能使用 <strong>Bitmap 的 recycle()</strong> 方法来释放 Bitmap 对象, 并且需要自己管理 Bitmap 的生命周期( 自己记 Bitmap 的引用计数 ), 很麻烦, 资源利用率也不高</p>\n\n<h2 id=\"30及以上\">3.0及以上</h2>\n<p>引入了 <strong>BitmapFactory.Options.inBitmap 字段</strong>, 来完成对 Bitmap 重用的支持</p>\n<blockquote>\n  <p>参考 <a href=\"https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inBitmap\">inBitmap官方文档</a>\n<img src=\"https://img-blog.csdnimg.cn/20210330155442822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<p>可得, 区分 <strong>4.4及以上</strong> 和 <strong>3.0及以上~4.4以下</strong> 两种不同的处理方式</p>\n\n<p>4.4 &lt;= api 需要满足如下条件</p>\n<ul>\n  <li>被重用的 Bitmap 对象是 mutable 的</li>\n  <li>被重用的 Bitmap 对象的 size &gt;= 当前准备解析的</li>\n</ul>\n\n<p>3.0 &lt;= api  &lt; 4.4</p>\n<ul>\n  <li>被重用的 Bitmap 对象是 mutable 的</li>\n  <li>被重用的 Bitmap 对象的 width 和 height 需要和当前准备解析的严格匹配</li>\n  <li>BitmapFactory.Options.inSampleSize == 1</li>\n  <li>被解析的图片需要是 jpeg 或者 png 格式</li>\n</ul>\n\n<p>首先, 我们需要有如下2个 BitmapPool, Bitmap 的缓存池子,分别对应上面的两种情况, 不用的 Bitmap都缓存在这里, 并限制缓存的上限, 和规定淘汰算法LRU</p>\n<blockquote>\n  <p>具体实现原理参照 <a href=\"/2021/03/20/markdown-glide3.7.0_4/index.html\">Android Glide 3.7.0 源码解析(四) , BitmapPool作用及原理</a> 一文</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">BitmapPoolSize</span> <span class=\"o\">{</span>\n\n\t<span class=\"c1\">// 从池子里获取一个大于等于指定大小的, 且config匹配的 Bitmap 实例</span>\n\t<span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n\n\t<span class=\"c1\">// 放置一个不使用的 Bitmap 到池子里</span>\n\t<span class=\"kt\">boolean</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">);</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">BitmapPoolAttribute</span> <span class=\"o\">{</span>\n\n\t<span class=\"c1\">// 从池子里获取一个宽高严格, 且config匹配的 Bitmap 实例</span>\n\t<span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n\n\t<span class=\"c1\">// 放置一个不使用的 Bitmap 到池子里</span>\n\t<span class=\"kt\">boolean</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">);</span>\n\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p>下面是一个需要重用旧的 Bitmap 的代码示例</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">decodeBitmapFromFile</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">pathName</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// 获取待解析图片的配置信息</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span><span class=\"o\">();</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inJustDecodeBounds</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeFile</span><span class=\"o\">(</span><span class=\"n\">pathName</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inJustDecodeBounds</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">targetWidth</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outWidth</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">targetHeight</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outHeight</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">targetWidth</span> <span class=\"o\">*</span> <span class=\"n\">targetHeight</span><span class=\"o\">;</span>\n\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">cache</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 适配第一种情况</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span> <span class=\"o\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">KITKAT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inMutable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"nc\">BitmapPoolSize</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outConfig</span><span class=\"o\">);</span>\n            <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inBitmap</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 适配第二种情况</span>\n\t\t<span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span> <span class=\"o\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">HONEYCOMB</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inMutable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"nc\">BitmapPoolAttribute</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">targetWidth</span><span class=\"o\">,</span> <span class=\"n\">targetHeight</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outConfig</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inSampleSize</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span>\n                <span class=\"o\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">outMimeType</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"image/jpeg\"</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"image/png\"</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n                <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inBitmap</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 数据都被写入缓存的 cache 对象里去了</span>\n        <span class=\"k\">return</span> <span class=\"nc\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeFile</span><span class=\"o\">(</span><span class=\"n\">pathName</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>至此重用解释完毕</p>\n\n<h1 id=\"四faq\">四、FAQ</h1>\n<p><strong>inJustDecodeBounds</strong> 这个属性好像没提到</p>\n<blockquote>\n  <p><img src=\"https://img-blog.csdnimg.cn/20210330170712826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<p>直译过来就是设置了这个属性之后, 在 decode 时, 不会真正的去解析 Bitmap, 而是去给 BitmapFactory.Options 中 out 打头的变量赋值, 来看看都有哪些变量</p>\n<ul>\n  <li>outWidth 宽度</li>\n  <li>outHeight 高度</li>\n  <li>outMimeType 图片类型</li>\n  <li>outConfig 图片配置</li>\n  <li>outColorSpace pixed 数组 ( byte[] ) 的像素排列方式说明</li>\n</ul>\n\n<h1 id=\"五参考\">五、参考</h1>\n<ul>\n  <li>官文_管理位图内存: <a href=\"https://developer.android.com/topic/performance/graphics/manage-memory#inBitmap\">https://developer.android.com/topic/performance/graphics/manage-memory#inBitmap</a></li>\n  <li>官文_inBitmap: <a href=\"https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inBitmap\">https://developer.android.com/reference/android/graphics/BitmapFactory.Options#inBitmap</a></li>\n  <li>Android Developers 论坛: <a href=\"https://groups.google.com/g/android-developers/c/Mp0MFVFi1Fo/m/e8ZQ9FGdWdEJ?pli=1\">https://groups.google.com/g/android-developers/c/Mp0MFVFi1Fo/m/e8ZQ9FGdWdEJ?pli=1</a></li>\n  <li>Android Bitmap变迁与原理解析（4.x-8.x）: <a href=\"https://toutiao.io/posts/ptdi4q/preview\">https://toutiao.io/posts/ptdi4q/preview</a></li>\n</ul>\n\n",
      "desc"     : "一、为什么Bitmap需要资源重用Android 中图片显示的实体其实是一个 Bitmap 对象, 每次图片显示时, 都会构建一个 Bitmap 对象, 不用时再销毁, 假设, 在一个长列表且列表的每项都有一个图片显示, 持续滑动这个列表, 内存中的行为就是, 持续的创建 Bitmap 对象和产生不用的 Bitmap 对象, 当量级到达一定程度, 会触发 GC, 这样持续滑动界面, 势必会频..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(六) , 缓存结构详述",
      "title-lower"    : "android glide 3.7.0 源码解析(六) , 缓存结构详述",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/03/28/markdown-glide3.7.0_6/",
      "date"     : "2021-03-28 04:38:32 +0800",
      "content": "<h1 id=\"结构总览\">结构总览</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20210325222328644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_10\" alt=\"在这里插入图片描述\" /></p>\n\n<ol>\n  <li>内存缓存是由 LruResourceCache 和 activeResources 组成, 缓存的是 <strong>EngineResource</strong> 类型\n<strong>第一级缓存</strong>: <strong>LruResourceCache</strong> 是一个最终是一个 LinkedHashMap 来实现 Lru , 存储的是没有被界面使用的缓存资源, 并由LRU控制缓存大小\n<strong>第二级缓存</strong>: <strong>activeResources</strong> 是由一个 Map&lt;Key, WeakReference&lt;EngineResource&lt;?»&gt; 构成, 存储的是正在被界面使用的资源弱引用缓存, 不同于内存缓存用 Lru 算法策略的是，该缓存是无容量大小限制的，内部用引用计数来确定是否被外界所正在使用，当引用为0时会从该缓存中移除，加入到内存缓存</li>\n  <li>DiskLruCacheWrapper(data) DiskLruCacheWrapper(source) 组成了磁盘缓存, DiskLruCacheWrapper 内部是由一个 DiskLruCache 构建, 提供了文件级别的LRU策略缓存\n<strong>第三级缓存</strong>: <strong>DiskLruCacheWrapper(data)</strong>, 缓存的是图形转换后的资源\n<strong>第四级缓存</strong>: <strong>DiskLruCacheWrapper(source)</strong>, 缓存的是未经图形转换的原始资源, 未处理是指没有经过图形变换(裁剪, 缩放等)</li>\n  <li><strong>第三级缓存和第四级缓存公用一个 Lru 缓存 DiskLruCacheWrapper, 只是因为这个缓存中存储的数据类型不一样所以本文中称之为 DiskLruCacheWrapper(data) 和 DiskLruCacheWrapper(source)</strong>\n    <blockquote>\n      <p>查找时: 是由 Engine.load 时候产生Key(由10多个参数决定), 来进行缓存匹配, 其中当获取原始未处理资源时会调用 Key.getOriginalKey 来产生一个参数较少的 Key, 用来匹配未被处理的原始资源</p>\n    </blockquote>\n  </li>\n</ol>\n\n<blockquote>\n  <p>还记得<a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析(二), 从一次图片加载流程看源码</a> 文章中提到的\n<img src=\"https://img-blog.csdnimg.cn/20210325223704783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n\n<ul>\n  <li><strong>缓存</strong>的初始化是在 Glide 单例<strong>创建</strong>时进行的</li>\n  <li><strong>内存缓存匹配</strong>是在 Engine.load方法中用传入的 Key 进行<strong>匹配</strong>, 先匹配 <strong>LruResourceCache(第一级)</strong> 再匹配 <strong>activeResources(第二级)</strong></li>\n</ul>\n\n<blockquote>\n  <p><strong>LruResourceCache(第一级)</strong> 和  <strong>activeResources(第二级)</strong> 的区别:\n\t* <strong>LruResourceCache(第一级)</strong> 中存储的是不被界面使用的资源实例\n\t* <strong>activeResources(第二级)</strong> 中存储的是正在被界面组件使用的资源实例(可以使多个界面组件,使用同一个活跃缓存)</p>\n\n  <p><strong>activeResources(第二级)</strong> 存在的意义:</p>\n  <ul>\n    <li>不同于 <strong>LruResourceCache(第一级)</strong> 用 Lru 算法策略的是，该缓存是无容量大小限制的，内部用引用计数来确定是否被外界所正在使用，当引用为0时会从该缓存中移除，加入到内存缓存, 该缓存的作用是保护正在使用的资源并复用，试想一下如果没有这级缓存，只有 <strong>LruResourceCache(第一级)</strong> 那么当 <strong>LruResourceCache(第一级)</strong> 缓存达到容量上限时有可能移除掉正在使用的图片资源，当应用中另外一个地方需要同时显示同样的图片资源时Glide将在内存中找不到这个资源对象则又会重建一个新的资源对象。</li>\n  </ul>\n\n  <p><strong>Glide 4.x行为变化</strong></p>\n  <ul>\n    <li>Glide 4.x.x版本, 会先从 <strong>activeResources(第二级)</strong> 中匹配, 再从  <strong>LruResourceCache(第一级)</strong> 中匹配</li>\n    <li><strong>磁盘缓存匹配</strong>是在 EngineRunable.run 开始 decode 时, <strong>先匹配</strong>有没有图形转化后的数据, 即 <strong>DiskLruCacheWrapper(data 第三级)</strong> , <strong>再匹配</strong> Source (图片的原数据) 即 <strong>DiskLruCacheWrapper(Source 第四级)</strong>, 为什么不放在 Engine.load 一起匹配, 因为存储在磁盘中的缓存格式是未经转码或者未经图形转换的数据, 需要在 EngineRunable.run 开辟的 <strong>非主线程(转码/图形转换耗时)</strong> 中用 EngineJob 的 decode() 方法来对缓存数据进行转码/图形转换, 而内存缓存则没有这种问题, 内存缓存缓存的就是处理(转码/图形转换)之后的数据, 即 <strong>EngineResource</strong></li>\n    <li><strong>磁盘缓存存入</strong> 是在 EngineRunable.run 方法中 EngineJob 真正 decode(从网络下载) 完毕开始的, 在解析 SourceData 也就是图片原始数据时, cacheAndDecodeSourceData() 方法来执行<strong>加入 DiskLruCacheWrapper(Source 第四级)</strong> 缓存, 在 writeTransformedToCache() 方法中把图形变换后的图形数据(非原始) <strong>加入 DiskLruCacheWrapper(data 第三级)</strong> 缓存</li>\n    <li><strong>内存缓存存入</strong> 在 Engine.onEngineJobComplete 方法中缓存到 <strong>activeResources(第二级)</strong> 表示正在被界面使用, 在 EngineResource release 的时候, 判断引用计数是否到 0 (是否匹配 <strong>activeResources(第二级)</strong> ), 如果不匹配, 则尝试放入 <strong>LruResourceCache(第一级)</strong> 中</li>\n  </ul>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210327190719464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>以上是一个缓存使用的流程图, 解释一下</p>\n<ol>\n  <li>Engine.load 检查 <strong>LruResourceCache(第一级)</strong> 和 <strong>activeResources(第二级)</strong> 缓存</li>\n  <li>切换线程, 到执行下载的地方, 开始检查 <strong>DiskLruCacheWrapper(data 第三级)</strong> 和 <strong>DiskLruCacheWrapper(Source 第四级)</strong> 缓存</li>\n  <li>都没有缓存, 执行下载, 下载完成保存到 <strong>DiskLruCacheWrapper(Source 第四级)</strong> , 处理过后(解码/图形变换) 保存到 <strong>DiskLruCacheWrapper(data 第三级)</strong></li>\n  <li>往界面回调时, 保存到 <strong>activeResources(第二级)</strong></li>\n  <li>当界面被释放时, 回调 Request(真实) 的 clear函数, 查看 <strong>activeResources(第二级)</strong> 有没有计数为0的缓存, 保存到 <strong>LruResourceCache(第一级)</strong>\n    <blockquote>\n      <p><a href=\"/2021/03/20/markdown-glide3.7.0_3/index.html\">Android Glide 3.7.0 源码解析(三), 生命周期绑定</a> 一文中有提到界面被释放时, Request(真实) 的行为</p>\n    </blockquote>\n  </li>\n</ol>\n\n<p>框架逻辑已经有概念了, 接下来看源码就不会迷路了</p>\n\n<h1 id=\"缓存创建\">缓存创建</h1>\n<p><strong>LruResourceCache(第一级) 创建</strong>, 是在 Glide 单例初始化的时候 GlideBuilder.createGlide()</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideBuilder</span>\n\t<span class=\"nc\">Glide</span> <span class=\"nf\">createGlide</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memoryCache</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 创建了一个 LruResourceCache 实例</span>\n            <span class=\"n\">memoryCache</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LruResourceCache</span><span class=\"o\">(</span><span class=\"n\">calculator</span><span class=\"o\">.</span><span class=\"na\">getMemoryCacheSize</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><strong>activeResources(第二级) 缓存创建</strong>,  也是在 Glide 单例初始化的时候 GlideBuilder.createGlide(), 创建了一个 Engine 实例, 并在这个实例的构造函数中初始化了 activeResources 弱引用数组</p>\n<blockquote>\n  <p>activeResources 是一个 Map&lt;Key, WeakReference&lt;EngineResource&lt;?»&gt; 类型\nEngine 实例是 Glide 单例的一个成员变量, 即, 也是全局唯一的</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideBuilder</span>\n\t<span class=\"nc\">Glide</span> <span class=\"nf\">createGlide</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">engine</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Engine</span><span class=\"o\">(</span><span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"n\">diskCacheFactory</span><span class=\"o\">,</span> <span class=\"n\">diskCacheService</span><span class=\"o\">,</span> <span class=\"n\">sourceService</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">Engine</span><span class=\"o\">(</span><span class=\"nc\">MemoryCache</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"nc\">DiskCache</span><span class=\"o\">.</span><span class=\"na\">Factory</span> <span class=\"n\">diskCacheFactory</span><span class=\"o\">,</span> <span class=\"nc\">ExecutorService</span> <span class=\"n\">diskCacheService</span><span class=\"o\">,</span>\n            <span class=\"nc\">ExecutorService</span> <span class=\"n\">sourceService</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"n\">diskCacheFactory</span><span class=\"o\">,</span> <span class=\"n\">diskCacheService</span><span class=\"o\">,</span> <span class=\"n\">sourceService</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">Engine</span><span class=\"o\">(</span><span class=\"nc\">MemoryCache</span> <span class=\"n\">cache</span><span class=\"o\">,</span> <span class=\"nc\">DiskCache</span><span class=\"o\">.</span><span class=\"na\">Factory</span> <span class=\"n\">diskCacheFactory</span><span class=\"o\">,</span> <span class=\"nc\">ExecutorService</span> <span class=\"n\">diskCacheService</span><span class=\"o\">,</span>\n            <span class=\"nc\">ExecutorService</span> <span class=\"n\">sourceService</span><span class=\"o\">,</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Key</span><span class=\"o\">,</span> <span class=\"nc\">EngineJob</span><span class=\"o\">&gt;</span> <span class=\"n\">jobs</span><span class=\"o\">,</span> <span class=\"nc\">EngineKeyFactory</span> <span class=\"n\">keyFactory</span><span class=\"o\">,</span>\n            <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Key</span><span class=\"o\">,</span> <span class=\"nc\">WeakReference</span><span class=\"o\">&lt;</span><span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;&gt;&gt;</span> <span class=\"n\">activeResources</span><span class=\"o\">,</span> <span class=\"nc\">EngineJobFactory</span> <span class=\"n\">engineJobFactory</span><span class=\"o\">,</span>\n            <span class=\"nc\">ResourceRecycler</span> <span class=\"n\">resourceRecycler</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">activeResources</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 最终创建了一个 HashMap</span>\n            <span class=\"n\">activeResources</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Key</span><span class=\"o\">,</span> <span class=\"nc\">WeakReference</span><span class=\"o\">&lt;</span><span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;&gt;&gt;();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">activeResources</span> <span class=\"o\">=</span> <span class=\"n\">activeResources</span><span class=\"o\">;</span>\n\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><strong>DiskLruCacheWrapper(data 第三级)</strong> 和 <strong>DiskLruCacheWrapper(Source 第四级)</strong> 缓存的创建</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideBuilder</span>\n\t<span class=\"nc\">Glide</span> <span class=\"nf\">createGlide</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diskCacheFactory</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">diskCacheFactory</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InternalCacheDiskCacheFactory</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\t\t<span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// InternalCacheDiskCacheFactory</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"nc\">InternalCacheDiskCacheFactory</span> <span class=\"kd\">extends</span> <span class=\"nc\">DiskLruCacheFactory</span> <span class=\"o\">{}</span>\n\n<span class=\"c1\">// DiskLruCacheFactory</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">DiskCache</span> <span class=\"nf\">build</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nc\">DiskLruCacheWrapper</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">cacheDir</span><span class=\"o\">,</span> <span class=\"n\">diskCacheSize</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// DiskLruCacheWrapper</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">synchronized</span> <span class=\"nc\">DiskCache</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"nc\">File</span> <span class=\"n\">directory</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">maxSize</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">wrapper</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 最终创建了一个 DiskLruCacheWrapper 实例</span>\n            <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DiskLruCacheWrapper</span><span class=\"o\">(</span><span class=\"n\">directory</span><span class=\"o\">,</span> <span class=\"n\">maxSize</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"缓存的使用\">缓存的使用</h1>\n<p>根据上文的框架流程图, 直接看 Engine.load</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Engine</span>\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">LoadStatus</span> <span class=\"nf\">load</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">Transformation</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n            <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"nc\">DiskCacheStrategy</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"kt\">long</span> <span class=\"n\">startTime</span> <span class=\"o\">=</span> <span class=\"nc\">LogTime</span><span class=\"o\">.</span><span class=\"na\">getLogTime</span><span class=\"o\">();</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 可以看到在这里打包了一个 Key 值, 用来唯一标识内存中的一个缓存实例</span>\n        <span class=\"nc\">EngineKey</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">keyFactory</span><span class=\"o\">.</span><span class=\"na\">buildKey</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getCacheDecoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">(),</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getEncoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">transcoder</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceEncoder</span><span class=\"o\">());</span>\n\n\t\t<span class=\"c1\">// 先从 【LruResourceCache(第一级)】 中搜索</span>\n        <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">cached</span> <span class=\"o\">=</span> <span class=\"n\">loadFromCache</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cached</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 匹配中数据直接回调上抛</span>\n            <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">cached</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\t\t<span class=\"c1\">// 再从 【activeResources(第二级)】 中搜索</span>\n        <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"n\">loadFromActiveResources</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">active</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">active</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n       \t<span class=\"o\">...</span>\n\t\t<span class=\"c1\">// 如果都匹配不到就执行下载</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">engineJob</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">(</span><span class=\"n\">runnable</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">loadFromCache</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isMemoryCacheable</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 尝试从【LruResourceCache(第一级)】中获取/移除</span>\n        <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">cached</span> <span class=\"o\">=</span> <span class=\"n\">getEngineResourceFromCache</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cached</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">cached</span><span class=\"o\">.</span><span class=\"na\">acquire</span><span class=\"o\">();</span>\n            <span class=\"c1\">// 成功了, 加入到【activeResources(第二级)】中去</span>\n            <span class=\"n\">activeResources</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ResourceWeakReference</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">cached</span><span class=\"o\">,</span> <span class=\"n\">getReferenceQueue</span><span class=\"o\">()));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">cached</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">loadFromActiveResources</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isMemoryCacheable</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 尝试从【activeResources(第二级)】中匹配</span>\n        <span class=\"nc\">WeakReference</span><span class=\"o\">&lt;</span><span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;&gt;</span> <span class=\"n\">activeRef</span> <span class=\"o\">=</span> <span class=\"n\">activeResources</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">activeRef</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"n\">activeRef</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">active</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 匹配到,则增加引用计数, 表示界面上正有多少元素在使用它</span>\n                <span class=\"n\">active</span><span class=\"o\">.</span><span class=\"na\">acquire</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 匹配为空, 可能被释放了, 移除被释放资源的弱引用</span>\n                <span class=\"n\">activeResources</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">active</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li>先从 <strong>LruResourceCache(第一级)</strong> 中匹配, 再从 <strong>activeResources(第二级)</strong> 中匹配</li>\n  <li>不行就执行下载</li>\n</ul>\n\n<p>下面跟进去看下载的流程</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// EngineRunnable</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 执行下载</span>\n        <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 下载成功回调</span>\n        <span class=\"n\">onLoadComplete</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">decode</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isDecodingFromCache</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 先匹配【三/四级缓存】</span>\n            <span class=\"k\">return</span> <span class=\"nf\">decodeFromCache</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 匹配不到就真的去下载</span>\n            <span class=\"k\">return</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">decodeFromCache</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 匹配【DiskLruCacheWrapper(data 第三级)】</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">decodeJob</span><span class=\"o\">.</span><span class=\"na\">decodeResultFromCache</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">DEBUG</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Exception decoding result from cache: \"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 匹配【DiskLruCacheWrapper(Source 第四级)】</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">decodeJob</span><span class=\"o\">.</span><span class=\"na\">decodeSourceFromCache</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>看到在线程切换之后开始匹配  <strong>DiskLruCacheWrapper(data 第三级)</strong> 和 <strong>DiskLruCacheWrapper(Source 第四级)</strong></li>\n</ul>\n\n<p>匹配不到, 下载完成之后又做了些啥?</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// EngineRunnable</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">onLoadComplete</span><span class=\"o\">(</span><span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// EngineJob</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resource</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"o\">;</span>\n        <span class=\"no\">MAIN_THREAD_HANDLER</span><span class=\"o\">.</span><span class=\"na\">obtainMessage</span><span class=\"o\">(</span><span class=\"no\">MSG_COMPLETE</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">).</span><span class=\"na\">sendToTarget</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">MainThreadCallback</span> <span class=\"kd\">implements</span> <span class=\"nc\">Handler</span><span class=\"o\">.</span><span class=\"na\">Callback</span> <span class=\"o\">{</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">handleMessage</span><span class=\"o\">(</span><span class=\"nc\">Message</span> <span class=\"n\">message</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"no\">MSG_COMPLETE</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">what</span> <span class=\"o\">||</span> <span class=\"no\">MSG_EXCEPTION</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">what</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">EngineJob</span> <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">EngineJob</span><span class=\"o\">)</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">obj</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"no\">MSG_COMPLETE</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">what</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                \t<span class=\"c1\">// 走这里, 开始处理下载完成, 上抛图片数据到界面的逻辑了</span>\n                    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"na\">handleResultOnMainThread</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"na\">handleExceptionOnMainThread</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">handleResultOnMainThread</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// listener是Engine实例</span>\n        <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"na\">onEngineJobComplete</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">engineResource</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">// cb 是在 Engine.load中传入的 GenericRequest 实例</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span> <span class=\"o\">:</span> <span class=\"n\">cbs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isInIgnoredCallbacks</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">engineResource</span><span class=\"o\">.</span><span class=\"na\">acquire</span><span class=\"o\">();</span>\n                <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">engineResource</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onEngineJobComplete</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"nc\">EngineResource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 这里加入资源到【activeResources(第二级)】</span>\n        <span class=\"n\">activeResources</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ResourceWeakReference</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"n\">getReferenceQueue</span><span class=\"o\">()));</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>可以看到在上抛图片数据到界面的过程中, 将其缓存到  <strong>activeResources(第二级)</strong>\n最后来看看何时缓存到 <strong>LruResourceCache(第一级)</strong>\n通过 <a href=\"/2021/03/20/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析(三), 生命周期绑定</a>一文, 我们知道, 界面释放时, 会触发 GenericRequest 的 clear 方法</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">clear</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">CLEARED</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">cancel</span><span class=\"o\">();</span>\n        <span class=\"c1\">// Resource must be released before canNotifyStatusChanged is called.</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resource</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 重点在这里, 需要释放界面正在使用的 【activeResources(第二级)】</span>\n            <span class=\"n\">releaseResource</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">canNotifyStatusChanged</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">onLoadCleared</span><span class=\"o\">(</span><span class=\"n\">getPlaceholderDrawable</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// Must be after cancel().</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">CLEARED</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">releaseResource</span><span class=\"o\">(</span><span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 进入 Engine 实例看看</span>\n        <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"na\">release</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resource</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">release</span><span class=\"o\">(</span><span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"o\">((</span><span class=\"nc\">EngineResource</span><span class=\"o\">)</span> <span class=\"n\">resource</span><span class=\"o\">).</span><span class=\"na\">release</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// EngineResource</span>\n\t<span class=\"kt\">void</span> <span class=\"nf\">release</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">acquired</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalStateException</span><span class=\"o\">(</span><span class=\"s\">\"Cannot release a recycled or not yet acquired resource\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"nc\">Looper</span><span class=\"o\">.</span><span class=\"na\">getMainLooper</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"nc\">Looper</span><span class=\"o\">.</span><span class=\"na\">myLooper</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalThreadStateException</span><span class=\"o\">(</span><span class=\"s\">\"Must call release on the main thread\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(--</span><span class=\"n\">acquired</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 缩减引用计数, 当达到0时触发listener去处理(这里listener是Engine实例)</span>\n            <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"na\">onResourceReleased</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReleased</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">cacheKey</span><span class=\"o\">,</span> <span class=\"nc\">EngineResource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 从 【activeResources(第二级)】中移除</span>\n        <span class=\"n\">activeResources</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">cacheKey</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">isCacheable</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 存入到 【DiskLruCacheWrapper(data 第三级)】</span>\n            <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">cacheKey</span><span class=\"o\">,</span> <span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">resourceRecycler</span><span class=\"o\">.</span><span class=\"na\">recycle</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>界面释放资源的时候, 如果 <strong>activeResources(第二级)</strong> 的资源引用计数归零, 则将资源从 <strong>activeResources(第二级)</strong> 移除, 并尝试将移除的资源放置到 <strong>LruResourceCache(第一级)</strong> 至此, 源代码分析完毕!</p>\n\n",
      "desc"     : "结构总览  内存缓存是由 LruResourceCache 和 activeResources 组成, 缓存的是 EngineResource 类型第一级缓存: LruResourceCache 是一个最终是一个 LinkedHashMap 来实现 Lru , 存储的是没有被界面使用的缓存资源, 并由LRU控制缓存大小第二级缓存: activeResources 是由一个 Map&amp;l..."
} ,
  
  
  
    {
      "title"    : "github clone 提速",
      "title-lower"    : "github clone 提速",
      "sub-titile" : "github clone 准备搭载火箭~",
      "sub-titile-lower" : "github clone 准备搭载火箭~",
      "categories" : "",
      "tags"     : "github, 代理",
      "url"      : "/2021/03/22/markdown-github_speed/",
      "date"     : "2021-03-22 01:55:13 +0800",
      "content": "<h1 id=\"1-修改-hosts-文件\">1. 修改 Hosts 文件</h1>\n<p>利用 <a href=\"https://www.ipaddress.com/\">https://www.ipaddress.com/</a> 链接查询以下三个链接的DNS解析地址</p>\n<ol>\n  <li>github.com</li>\n  <li>assets-cdn.github.com</li>\n  <li>github.global.ssl.fastly.net</li>\n</ol>\n\n<p>打开系统的 Hosts 文件进行修改</p>\n\n<ul>\n  <li>windows\n修改C:\\Windows\\System32\\drivers\\etc\\hosts文件的权限，指定可写入：右击-&gt;hosts-&gt;属性-&gt;安全-&gt;编辑-&gt;点击Users-&gt;在Users的权限“写入”后面打勾。如下：\n<img src=\"https://img-blog.csdnimg.cn/20210321174757732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n右击-&gt;hosts-&gt;打开方式-&gt;选定记事本（或者你喜欢的编辑器）-&gt;在末尾处添加以下内容：</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"mf\">199.232</span><span class=\"o\">.</span><span class=\"mf\">69.194</span> <span class=\"n\">github</span><span class=\"o\">.</span><span class=\"na\">global</span><span class=\"o\">.</span><span class=\"na\">ssl</span><span class=\"o\">.</span><span class=\"na\">fastly</span><span class=\"o\">.</span><span class=\"na\">Net</span>\n<span class=\"mf\">140.82</span><span class=\"o\">.</span><span class=\"mf\">114.3</span> <span class=\"n\">github</span><span class=\"o\">.</span><span class=\"na\">com</span>\n<span class=\"mf\">185.199</span><span class=\"o\">.</span><span class=\"mf\">109.153</span> <span class=\"n\">assets</span><span class=\"o\">-</span><span class=\"n\">cdn</span><span class=\"o\">.</span><span class=\"na\">github</span><span class=\"o\">.</span><span class=\"na\">com</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li>mac</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nb\">sudo </span>vim /ect/hosts\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>文末添加如下内容</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"mf\">199.232</span><span class=\"o\">.</span><span class=\"mf\">69.194</span> <span class=\"n\">github</span><span class=\"o\">.</span><span class=\"na\">global</span><span class=\"o\">.</span><span class=\"na\">ssl</span><span class=\"o\">.</span><span class=\"na\">fastly</span><span class=\"o\">.</span><span class=\"na\">Net</span>\n<span class=\"mf\">140.82</span><span class=\"o\">.</span><span class=\"mf\">114.3</span> <span class=\"n\">github</span><span class=\"o\">.</span><span class=\"na\">com</span>\n<span class=\"mf\">185.199</span><span class=\"o\">.</span><span class=\"mf\">109.153</span> <span class=\"n\">assets</span><span class=\"o\">-</span><span class=\"n\">cdn</span><span class=\"o\">.</span><span class=\"na\">github</span><span class=\"o\">.</span><span class=\"na\">com</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>注意</strong>: CDN 地址会因为地域, 时间而变化, 每个人都是不一样的, 而且要定时刷新, 否则可能会失效 ( 又回到原来低速的github了 )</p>\n\n<h1 id=\"2-镜像下载\">2. 镜像下载</h1>\n<blockquote>\n  <p>主要用来提速 git clone</p>\n</blockquote>\n\n<p>我们将原本的 clone 地址中的 <strong>github.com</strong> 进行<strong>替换为 github.com.cnpmjs.org</strong></p>\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"nx\">clone</span><span class=\"w\"> </span><span class=\"nx\">https://github.com.cnpmjs.org/bumptech/glide.git</span><span class=\"w\">\n</span></pre></td></tr></tbody></table></code></pre></div></div>\n<p>再<strong>恢复 origin 远程仓库配置</strong></p>\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"nx\">remote</span><span class=\"w\"> </span><span class=\"nx\">rm</span><span class=\"w\"> </span><span class=\"nx\">origin</span><span class=\"w\">\n </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"nx\">remote</span><span class=\"w\"> </span><span class=\"nx\">add</span><span class=\"w\"> </span><span class=\"nx\">origin</span><span class=\"w\"> </span><span class=\"nx\">https://github.com/bumptech/glide.git</span><span class=\"w\">\n</span></pre></td></tr></tbody></table></code></pre></div></div>\n\n<h1 id=\"参考\">参考</h1>\n<p><a href=\"https://cloud.tencent.com/developer/article/1686178\">https://cloud.tencent.com/developer/article/1686178</a></p>\n\n",
      "desc"     : "1. 修改 Hosts 文件利用 https://www.ipaddress.com/ 链接查询以下三个链接的DNS解析地址  github.com  assets-cdn.github.com  github.global.ssl.fastly.net打开系统的 Hosts 文件进行修改  windows修改C:\Windows\System32\drivers\etc\hosts文件的权..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(五) , 如何获得ImageView的宽高",
      "title-lower"    : "android glide 3.7.0 源码解析(五) , 如何获得imageview的宽高",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/03/20/markdown-glide3.7.0_5/",
      "date"     : "2021-03-20 23:19:42 +0800",
      "content": "<h1 id=\"前言\">前言</h1>\n<p>通过前面的 <a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a> 我们知道\nRequest(真实) 只有在图片组件的大小准备好了才会开始真正的加载</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">begin</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">startTime</span> <span class=\"o\">=</span> <span class=\"nc\">LogTime</span><span class=\"o\">.</span><span class=\"na\">getLogTime</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">model</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">onException</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">WAITING_FOR_SIZE</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isValidDimensions</span><span class=\"o\">(</span><span class=\"n\">overrideWidth</span><span class=\"o\">,</span> <span class=\"n\">overrideHeight</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 指定了特定的 size</span>\n            <span class=\"n\">onSizeReady</span><span class=\"o\">(</span><span class=\"n\">overrideWidth</span><span class=\"o\">,</span> <span class=\"n\">overrideHeight</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 未指定, 则去获取 size , 得到后调用 onSizeReady()...</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isComplete</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">isFailed</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">canNotifyStatusChanged</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">onLoadStarted</span><span class=\"o\">(</span><span class=\"n\">getPlaceholderDrawable</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">logV</span><span class=\"o\">(</span><span class=\"s\">\"finished run method in \"</span> <span class=\"o\">+</span> <span class=\"nc\">LogTime</span><span class=\"o\">.</span><span class=\"na\">getElapsedMillis</span><span class=\"o\">(</span><span class=\"n\">startTime</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>我们参考 <a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a> 一文中介绍的流程, 可得 target 是一个 GlideDrawableImageViewTarget 类型, 下面就来看看是如何获取 size 的</p>\n\n<h1 id=\"如何获取-size\">如何获取 size</h1>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideDrawableImageViewTarget</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">SizeDeterminer</span> <span class=\"n\">sizeDeterminer</span><span class=\"o\">;</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">getSize</span><span class=\"o\">(</span><span class=\"nc\">SizeReadyCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sizeDeterminer</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// SizeDeterminer</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">getSize</span><span class=\"o\">(</span><span class=\"nc\">SizeReadyCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">// 计算当前View宽高的代码</span>\n            <span class=\"kt\">int</span> <span class=\"n\">currentWidth</span> <span class=\"o\">=</span> <span class=\"n\">getViewWidthOrParam</span><span class=\"o\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">currentHeight</span> <span class=\"o\">=</span> <span class=\"n\">getViewHeightOrParam</span><span class=\"o\">();</span>\n            <span class=\"c1\">// 直接开始计算View的宽高, 如果&gt;0或者是WRAP_CONTENT(-2)就代表有效</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isSizeValid</span><span class=\"o\">(</span><span class=\"n\">currentWidth</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isSizeValid</span><span class=\"o\">(</span><span class=\"n\">currentHeight</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// View 已经加载完, 能算出宽高了</span>\n                <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">onSizeReady</span><span class=\"o\">(</span><span class=\"n\">currentWidth</span><span class=\"o\">,</span> <span class=\"n\">currentHeight</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">cbs</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">cbs</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">layoutListener</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                \t<span class=\"c1\">// 给View的刷新注册监听, 希望View加载完, SizeDeterminerLayoutListener 能收到通知事件</span>\n                    <span class=\"kd\">final</span> <span class=\"nc\">ViewTreeObserver</span> <span class=\"n\">observer</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getViewTreeObserver</span><span class=\"o\">();</span>\n                    <span class=\"n\">layoutListener</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SizeDeterminerLayoutListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n                    <span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"na\">addOnPreDrawListener</span><span class=\"o\">(</span><span class=\"n\">layoutListener</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSizeValid</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">size</span> <span class=\"o\">==</span> <span class=\"nc\">LayoutParams</span><span class=\"o\">.</span><span class=\"na\">WRAP_CONTENT</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>关于 isSizeValid &gt;0 有效可以理解, <strong>为啥  size == LayoutParams.WRAP_CONTENT 也会被判定有效???</strong>\n其实在分析完后, 发现这条判断条件好像也用不上</p>\n</blockquote>\n\n<p>需要弄清楚两个问题:</p>\n<ol>\n  <li><strong>getViewWidthOrParam()</strong> 和 <strong>getViewHeightOrParam()</strong> 方法是如何计算宽高的</li>\n  <li><strong>SizeDeterminerLayoutListener</strong> 监听 View 的变化之后, 又做了些啥</li>\n</ol>\n\n<h2 id=\"计算size的基本函数\">计算Size的基本函数</h2>\n<p>我们来看看如何计算 <strong>当前状态下(可能没加载完全)</strong> 的View的宽高</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// SizeDeterminer</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"no\">PENDING_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getViewHeightOrParam</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">LayoutParams</span> <span class=\"n\">layoutParams</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getLayoutParams</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isSizeValid</span><span class=\"o\">(</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 直接 getHeight 如果 &gt;0 的话</span>\n                <span class=\"k\">return</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">layoutParams</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 其他情况</span>\n                <span class=\"k\">return</span> <span class=\"nf\">getSizeForParam</span><span class=\"o\">(</span><span class=\"n\">layoutParams</span><span class=\"o\">.</span><span class=\"na\">height</span><span class=\"o\">,</span> <span class=\"kc\">true</span> <span class=\"cm\">/*isHeight*/</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 默认返回计算失败 0</span>\n                <span class=\"k\">return</span> <span class=\"no\">PENDING_SIZE</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getViewWidthOrParam</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">LayoutParams</span> <span class=\"n\">layoutParams</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getLayoutParams</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isSizeValid</span><span class=\"o\">(</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 直接 getWidth 如果 &gt;0 的话</span>\n                <span class=\"k\">return</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">layoutParams</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 其他情况</span>\n                <span class=\"k\">return</span> <span class=\"nf\">getSizeForParam</span><span class=\"o\">(</span><span class=\"n\">layoutParams</span><span class=\"o\">.</span><span class=\"na\">width</span><span class=\"o\">,</span> <span class=\"kc\">false</span> <span class=\"cm\">/*isHeight*/</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 默认返回计算失败 0</span>\n                <span class=\"k\">return</span> <span class=\"no\">PENDING_SIZE</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// WRAP_CONTETNT 的情况计算</span>\n        <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">getSizeForParam</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">param</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isHeight</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">param</span> <span class=\"o\">==</span> <span class=\"nc\">LayoutParams</span><span class=\"o\">.</span><span class=\"na\">WRAP_CONTENT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 计算 WRAP_CONTETNT 的核心代码</span>\n                <span class=\"nc\">Point</span> <span class=\"n\">displayDimens</span> <span class=\"o\">=</span> <span class=\"n\">getDisplayDimens</span><span class=\"o\">();</span>\n                <span class=\"k\">return</span> <span class=\"n\">isHeight</span> <span class=\"o\">?</span> <span class=\"n\">displayDimens</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">:</span> <span class=\"n\">displayDimens</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">param</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Point</span> <span class=\"nf\">getDisplayDimens</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">displayDimens</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">displayDimens</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"nc\">WindowManager</span> <span class=\"n\">windowManager</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">WindowManager</span><span class=\"o\">)</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">().</span><span class=\"na\">getSystemService</span><span class=\"o\">(</span><span class=\"nc\">Context</span><span class=\"o\">.</span><span class=\"na\">WINDOW_SERVICE</span><span class=\"o\">);</span>\n            <span class=\"c1\">// 很简单, 就是获取 View 的展示区域</span>\n            <span class=\"nc\">Display</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"n\">windowManager</span><span class=\"o\">.</span><span class=\"na\">getDefaultDisplay</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span> <span class=\"o\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">HONEYCOMB_MR2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">displayDimens</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Point</span><span class=\"o\">();</span>\n                <span class=\"n\">display</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"n\">displayDimens</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">displayDimens</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Point</span><span class=\"o\">(</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"n\">display</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">displayDimens</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>至此, 我们看完了<strong>计算 View 大小的函数</strong> ( getViewWidthOrParam() / getViewHeightOrParam() ) , 原理很简单</p>\n<ol>\n  <li>getHeight / getWidth 能计算出来 &gt;0 的值, 就以它为准</li>\n  <li>LayoutParams.WRAP_CONTENT 或者 LayoutParams.MATCH_PARENT 时, <strong>windowManager.getDefaultDisplay()</strong> 来获得 View 的显示区域</li>\n</ol>\n\n<p>简单画了一个流程图\n<img src=\"https://img-blog.csdnimg.cn/20210320150020953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"windowManager.getDefaultDisplay()\" /></p>\n<ol>\n  <li>一种是返回 0 或者 MATCH_PARENT , 表示我没计算出来</li>\n  <li>一种是返回 getHeight / getWidth 或者 windowManager.getDefaultDisplay() , 表示我计算出来了</li>\n</ol>\n\n<p>分析完基本的计算宽高的函数, 我们再来看看, <strong>SizeDeterminerLayoutListener</strong> 监听 View 刷新之后都做了啥</p>\n\n<h2 id=\"监听-view-刷新\">监听 View 刷新</h2>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// SizeDeterminerLayoutListener</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">SizeDeterminerLayoutListener</span> <span class=\"kd\">implements</span> <span class=\"nc\">ViewTreeObserver</span><span class=\"o\">.</span><span class=\"na\">OnPreDrawListener</span> <span class=\"o\">{</span>\n            <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">WeakReference</span><span class=\"o\">&lt;</span><span class=\"nc\">SizeDeterminer</span><span class=\"o\">&gt;</span> <span class=\"n\">sizeDeterminerRef</span><span class=\"o\">;</span>\n\n            <span class=\"kd\">public</span> <span class=\"nf\">SizeDeterminerLayoutListener</span><span class=\"o\">(</span><span class=\"nc\">SizeDeterminer</span> <span class=\"n\">sizeDeterminer</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sizeDeterminerRef</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">WeakReference</span><span class=\"o\">&lt;</span><span class=\"nc\">SizeDeterminer</span><span class=\"o\">&gt;(</span><span class=\"n\">sizeDeterminer</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">onPreDraw</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// View 刷新的回调</span>\n                <span class=\"nc\">SizeDeterminer</span> <span class=\"n\">sizeDeterminer</span> <span class=\"o\">=</span> <span class=\"n\">sizeDeterminerRef</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sizeDeterminer</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                \t<span class=\"c1\">// SizeDeterminer 去检查当前 View 的宽高是否有效</span>\n                    <span class=\"n\">sizeDeterminer</span><span class=\"o\">.</span><span class=\"na\">checkCurrentDimens</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n<span class=\"c1\">// SizeDeterminer</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">checkCurrentDimens</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cbs</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n\t\t\t<span class=\"c1\">// 重新再计算宽高</span>\n            <span class=\"kt\">int</span> <span class=\"n\">currentWidth</span> <span class=\"o\">=</span> <span class=\"n\">getViewWidthOrParam</span><span class=\"o\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">currentHeight</span> <span class=\"o\">=</span> <span class=\"n\">getViewHeightOrParam</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isSizeValid</span><span class=\"o\">(</span><span class=\"n\">currentWidth</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">isSizeValid</span><span class=\"o\">(</span><span class=\"n\">currentHeight</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n\t\t\t<span class=\"c1\">// 宽高有效, 通知 GenericRequest</span>\n            <span class=\"n\">notifyCbs</span><span class=\"o\">(</span><span class=\"n\">currentWidth</span><span class=\"o\">,</span> <span class=\"n\">currentHeight</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// 移除对 View 刷新的监听</span>\n            <span class=\"nc\">ViewTreeObserver</span> <span class=\"n\">observer</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getViewTreeObserver</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"na\">isAlive</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"na\">removeOnPreDrawListener</span><span class=\"o\">(</span><span class=\"n\">layoutListener</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">layoutListener</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">notifyCbs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">SizeReadyCallback</span> <span class=\"n\">cb</span> <span class=\"o\">:</span> <span class=\"n\">cbs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 这里的 cb 就是 GenericRequest 实例了</span>\n                <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">onSizeReady</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">cbs</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>逻辑很简单</p>\n<ol>\n  <li>View 刷新了</li>\n  <li>再次计算宽高, 有效 -&gt; GenericRequest.onSizeReady\n() 开始加载图片; 移除刷新监听</li>\n  <li>再次计算宽高, 无效 -&gt; 啥也不做, 继续傻等</li>\n</ol>\n\n<h1 id=\"小结\">小结</h1>\n<p>说了那么多, 总结一下流程\n<img src=\"https://img-blog.csdnimg.cn/20210320151209911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n",
      "desc"     : "前言通过前面的 Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码 我们知道Request(真实) 只有在图片组件的大小准备好了才会开始真正的加载123456789101112131415161718192021222324// GenericRequest	public void begin() {        startTime = LogTime...."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(四), BitmapPool作用及原理",
      "title-lower"    : "android glide 3.7.0 源码解析(四), bitmappool作用及原理",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/03/20/markdown-glide3.7.0_4/",
      "date"     : "2021-03-20 23:18:48 +0800",
      "content": "<h1 id=\"一作用\">一、作用</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20210317194500875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ol>\n  <li>Android 中图片显示的实体其实是一个 Bitmap 对象, 每次图片显示时, 都会构建一个 Bitmap 对象, 不用时再销毁</li>\n  <li>假设: 一个长列表每项都有个图片需要显示, 我们在快速滑动长列表的时候, 会产生什么?\n  \tBitmap 对象被频繁的创建和释放, 导致 GC 频繁</li>\n  <li>如何解决上述问题?\n BitmapPool , 一个 Bitmap 的对象池, 让一个新的图片资源复用在旧的 Bitmap对象上, 假设, 长列表一页有 20 个图片资源, BitmapPool 大小也刚好是 20 , 那么当滑动列表的时候, 我们一直在沿用最开始创建的 20 个 Bitmap 对象, 也就解决了频繁 GC 的问题(频繁的 GC 会导致卡顿)</li>\n</ol>\n\n<h1 id=\"二原理\">二、原理</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20210317200040202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<h2 id=\"框架结构\">框架结构</h2>\n<p>如上图:</p>\n<ol>\n  <li>BitmapPool 一共有两种实现 <strong>BitmapPoolAdapter</strong> 和 <strong>LruBitmapPool</strong></li>\n  <li>其中, <strong>BitmapPoolAdapter</strong> 是<strong>空实现</strong></li>\n  <li><strong>LruBitmapPool</strong> 字面意思可猜: <strong>一个 LRU 算法实现的 Bitmap 缓存池</strong></li>\n  <li>LruBitmapPool 的 <strong>LRU 算法</strong>实现依赖于 <strong>LruPoolStrategy 提供功能支持</strong></li>\n  <li>又 , LruPoolStrategy 有三种实现方案 <strong>AttributeStrategy</strong> , <strong>SizeConfigStrategy</strong> 和 <strong>SizeStrategy</strong></li>\n</ol>\n\n<h2 id=\"接口抽象\">接口抽象</h2>\n<p>先来看看 BitmapPool 接口是如何抽象的</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">/**\n * 定义了一个允许复用 Bitmap 对象的池子的接口\n */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">BitmapPool</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n     * 返回当前 BitmapPool 的最大容量，单位是 byte 字节\n     */</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">getMaxSize</span><span class=\"o\">();</span>\n\n    <span class=\"cm\">/**\n     * 可以通过此方法设置一个因子，此因子会乘以最开始设置的最大容量，将结果作为新的最大容量\n     *\n     * Note1: 上面计算完成以后，如果 BitmapPool 的当前实际容量比当前最大容量大，则会清除 BitampPool 中的对象，直到当前实际容量小于当前最大容量\n     * Note2: 开发者可以通过此方法动态地、同步地调整 BitmapPool 最大容量\n     */</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">setSizeMultiplier</span><span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">sizeMultiplier</span><span class=\"o\">);</span>\n\n    <span class=\"cm\">/**\n     * 加入一个新的不用的 bitmap 实例到池子中, 如果加入失败返回 false 且 , 需要调用者自行执行 bitmap.recycle() 来释放资源\n     *\n     * 可能返回失败的情况:\n     * 1. bitmap.isMutable() 返回false\n     * 2. bitmap 加入之后就超过了池子的最大容量\n     */</span>\n    <span class=\"kt\">boolean</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">);</span>\n\n    <span class=\"cm\">/**\n     * 根据传入的条件返回合适的 bitmap 实例, 如果没有合适的则返回null\n     * 该方法会默认擦除原 bitmap 实例中存储的像素值, 赋值成透明\n     * 速度比 getDirty() 要慢些\n     */</span>\n    <span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n\n    <span class=\"cm\">/**\n     * 和 get() 方法语义一致, 区别是, 不会擦除旧的像素数据\n     * 速度比 get() 要快\n     */</span>\n    <span class=\"nc\">Bitmap</span> <span class=\"nf\">getDirty</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n\n    <span class=\"cm\">/**\n     * 清空池子中的缓存数据\n     */</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">clearMemory</span><span class=\"o\">();</span>\n\n    <span class=\"cm\">/**\n     * 做指定级别的缓存数据清空 ( 意思是清除多少数据由 level 决定 )\n     */</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">trimMemory</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>看完上面的接口抽象, 大家应该对 BitmapPool 要实现的功能有所了解了, 下面来看看 BitmapPool 的具体实现</p>\n<ol>\n  <li><strong>BitmapPoolAdapter</strong>  空实现</li>\n  <li><strong>LruBitmapPool</strong> 遵循 LRU(least recently used) 算法的实现</li>\n</ol>\n\n<h2 id=\"bitmappooladapter-空实现\">BitmapPoolAdapter 空实现</h2>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BitmapPoolAdapter</span> <span class=\"kd\">implements</span> <span class=\"nc\">BitmapPool</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getMaxSize</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setSizeMultiplier</span><span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">sizeMultiplier</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Do nothing.</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t<span class=\"c1\">// 空实现, 谁来都返回 false</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">getDirty</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">clearMemory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Do nothing.</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">trimMemory</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Do nothing.</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>可以直接看 put() 方法, 谁来都返回 false , 池子里不可能有数据, 所以很容易得出, 是个<strong>假实现</strong></p>\n<ul>\n  <li><strong>问题: 为啥需要这个假实现 ???</strong>\n追踪 Glide 中 BitmapPool 初始化的地方\n    <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GlideBuilder</span>\n  <span class=\"nc\">Glide</span> <span class=\"nf\">createGlide</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n      <span class=\"o\">...</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bitmapPool</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      \t<span class=\"c1\">// Build.VERSION_CODES.HONEYCOMB ( api: 11 , android 3.0)</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span> <span class=\"o\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">HONEYCOMB</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n              <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">calculator</span><span class=\"o\">.</span><span class=\"na\">getBitmapPoolSize</span><span class=\"o\">();</span>\n              <span class=\"n\">bitmapPool</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LruBitmapPool</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">);</span>\n          <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n          \t<span class=\"c1\">// android 3.0 以下需要这个空实现</span>\n              <span class=\"n\">bitmapPool</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BitmapPoolAdapter</span><span class=\"o\">();</span>\n          <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"o\">...</span>\n  <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div>    </div>\n    <p>因为在3.0以前 Bitmap 的数据是存在 native 区域，3.0以后存在 Dalvik 内存区域，API11 后 系统提供了 Bitmap 复用的 API, <a href=\"https://developer.android.com/topic/performance/graphics/manage-memory.html\">官方详细传送门</a>\n分析完 BitmapPoolAdapter 空实现存在的意义, 赶紧来看看正经实现长啥样</p>\n  </li>\n</ul>\n\n<h2 id=\"lrubitmappool-lru算法实现\">LruBitmapPool LRU算法实现</h2>\n\n<h3 id=\"lrubitmappool-外壳\">LruBitmapPool 外壳</h3>\n<p>先看构造函数</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// LruBitmapPool</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">LruBitmapPool</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">maxSize</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">maxSize</span><span class=\"o\">,</span> <span class=\"n\">getDefaultStrategy</span><span class=\"o\">(),</span> <span class=\"n\">getDefaultAllowedConfigs</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">LruBitmapPool</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">maxSize</span><span class=\"o\">,</span> <span class=\"nc\">LruPoolStrategy</span> <span class=\"n\">strategy</span><span class=\"o\">,</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span><span class=\"o\">&gt;</span> <span class=\"n\">allowedConfigs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">initialMaxSize</span> <span class=\"o\">=</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">maxSize</span> <span class=\"o\">=</span> <span class=\"n\">maxSize</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">strategy</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">allowedConfigs</span> <span class=\"o\">=</span> <span class=\"n\">allowedConfigs</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">tracker</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">NullBitmapTracker</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>有几个问题需要弄明白:</p>\n  <ol>\n    <li>size 传的多少, 在哪边计算的?\n默认4个屏幕大小, 在 MemorySizeCalculator 中可查找答案</li>\n    <li>strategy 是干嘛的?\n真正实现 LRU 策略的地方</li>\n    <li>allowedConfigs 又是干嘛的?\n约束缓存的 Bitmap 实例的 config, 要求必须是 allowedConfigs 中的一种</li>\n  </ol>\n</blockquote>\n\n<p>池子最主要是看 get() 和 put() 方法</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LruBitmapPool</span> <span class=\"kd\">implements</span> <span class=\"nc\">BitmapPool</span> <span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">boolean</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bitmap</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">NullPointerException</span><span class=\"o\">(</span><span class=\"s\">\"Bitmap must not be null\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">bitmap</span><span class=\"o\">.</span><span class=\"na\">isMutable</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxSize</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">allowedConfigs</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// bitmap.isMutable() == false;</span>\n            <span class=\"c1\">// 加入这个 bitmap 实例, 会超出池子的最大存储容量</span>\n            <span class=\"c1\">// 这个 bitmap 的 config 不在池子允许的范畴内</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 加入真正的 LRU 缓存中</span>\n        <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 修改当前池子的大小</span>\n        <span class=\"n\">currentSize</span> <span class=\"o\">+=</span> <span class=\"n\">size</span><span class=\"o\">;</span>\n\t\t<span class=\"c1\">// 检查当前池子大小, 如果大于最大容量, 就往外丢 bitmap 实例, 直到不超容量</span>\n        <span class=\"n\">evict</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">getDirty</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 擦除原来 bitmap 实例的像素数据</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">eraseColor</span><span class=\"o\">(</span><span class=\"nc\">Color</span><span class=\"o\">.</span><span class=\"na\">TRANSPARENT</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">getDirty</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 从 LRU 缓存中拿出一个符合条件的 bitmap 实例</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Bitmap</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">config</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">config</span> <span class=\"o\">:</span> <span class=\"no\">DEFAULT_CONFIG</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 拿出失败, 返回 null</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 拿出成功, 重新计算池子大小</span>\n            <span class=\"n\">currentSize</span> <span class=\"o\">-=</span> <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>通过上面的代码可以看出:</p>\n<ol>\n  <li>核心的<strong>缓存功能</strong>都是 <strong>LruPoolStrategy</strong> 在实现</li>\n  <li>LruBitmapPool 主要负责 <strong>入口的条件判断</strong> ( put()时 ) 和 <strong>池子的大小管理</strong></li>\n</ol>\n\n<h3 id=\"lrupoolstrategy-核心\">LruPoolStrategy 核心</h3>\n<p>下面追踪 LruPoolStrategy 的实现</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// LruBitmapPool</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">LruBitmapPool</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">maxSize</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">maxSize</span><span class=\"o\">,</span> <span class=\"n\">getDefaultStrategy</span><span class=\"o\">(),</span> <span class=\"n\">getDefaultAllowedConfigs</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">LruPoolStrategy</span> <span class=\"nf\">getDefaultStrategy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">LruPoolStrategy</span> <span class=\"n\">strategy</span><span class=\"o\">;</span>\n        <span class=\"c1\">// KITKAT ( api: 19 , android 4.4 )</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span> <span class=\"o\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"o\">.</span><span class=\"na\">VERSION_CODES</span><span class=\"o\">.</span><span class=\"na\">KITKAT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SizeConfigStrategy</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">AttributeStrategy</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">strategy</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>问题:\n为啥 KITKAT 前后使用不同的实现方案? 这地方暂时还说明不了, 等到文章快结束时进行说明</p>\n</blockquote>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20210317210215215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_10,color_FFFFFF,t_10\" alt=\"在这里插入图片描述\" />\n这张图大家还有印象吧, 我们先来看看其中一个 <strong>AttributeStrategy 的数据结构</strong>, 其他的使用类推, 就会简单很多了\n<img src=\"https://img-blog.csdnimg.cn/20210320135643832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>下面来对各个属性进行说明</p>\n<ol>\n  <li><strong>Key</strong> 是<strong>查找条件</strong>, 用来唯一识别 <strong>一组Bitmaps</strong></li>\n  <li><strong>KeyPool</strong> 是用来<strong>缓存并复用 Key 实例</strong>的,  想想看: 上述案例, 长列表滑动, 频繁的从 BitmapPool 里面 get() put() 势必会频繁的创建和释放 Key 实例, 这里用个 Pool 把 Key 实例们缓存起来, 不必频繁创建了( 颇有套娃嫌疑! )</li>\n  <li><strong>GroupedLinkedMap</strong>里面封存了LRU缓存策略’</li>\n  <li><strong>HashMap结构</strong>是用来<strong>降低</strong>查找符合 Key 条件的<strong>算法时间复杂度的</strong>, 如果在<strong>LRU 单向循环列表</strong>里面执行查找, 是 O(n) , 而在 HashMap 中查找是 O(1) ~ O(n) ( <a href=\"\">算法的时间复杂度/空间复杂度详解,暂未实现,标记一下</a> ), 这里是一个典型的<strong>以空间换时间</strong>的案例</li>\n  <li><strong>LRU 单向循环列表</strong> 是真正的 <strong>LRU 缓存</strong>\n    <blockquote>\n      <p>每个节点都是一个 LinkedEntry 实例;\n每个 LinkedEntry 实例又存储了<strong>符合 Key 条件的 一组 Bitmap</strong>;\n当往 BitmapPool put() 的时候: 1. 找到符合 Key 条件的 Entry, 插入Entry 的 values 队尾; 2. 找不到, 永远插入队尾, 代表着最近不常使用\n当往 BitmapPool get() 的时候: 1. 找到符合 Key 条件的 Entry, 移除 Entry 中 values 最后一条给外部使用; 2.  3. 找不到, 创建一个新的条件为 Key 的 Entry; 4.  移动 Entry 到队头, 代表最近最常使用</p>\n    </blockquote>\n  </li>\n</ol>\n\n<p>理论讲完来看看实践 ( 源码 )</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// AttributeStrategy</span>\n<span class=\"kd\">class</span> <span class=\"nc\">AttributeStrategy</span> <span class=\"kd\">implements</span> <span class=\"nc\">LruPoolStrategy</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">KeyPool</span> <span class=\"n\">keyPool</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">KeyPool</span><span class=\"o\">();</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">GroupedLinkedMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Key</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">groupedMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GroupedLinkedMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Key</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;();</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t<span class=\"c1\">// 从 keyPool 缓存中拿取 Key 实例进行复用</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Key</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"n\">bitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">(),</span> <span class=\"n\">bitmap</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">());</span>\n\n\t\t<span class=\"c1\">// 调用 GroupedLinkedMap 来进行 LRU 缓存</span>\n        <span class=\"n\">groupedMap</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">bitmap</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t<span class=\"c1\">// 从 keyPool 缓存中拿取 Key 实例进行复用</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Key</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// 调用 GroupedLinkedMap 来进行 LRU 缓存的获取</span>\n        <span class=\"k\">return</span> <span class=\"n\">groupedMap</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// AttributeStrategy$KeyPool</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">KeyPool</span> <span class=\"kd\">extends</span> <span class=\"nc\">BaseKeyPool</span><span class=\"o\">&lt;</span><span class=\"nc\">Key</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n        <span class=\"kd\">public</span> <span class=\"nc\">Key</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Key</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"o\">();</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">init</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">protected</span> <span class=\"nc\">Key</span> <span class=\"nf\">create</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Key</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// BaseKeyPool</span>\n<span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">BaseKeyPool</span><span class=\"o\">&lt;</span><span class=\"no\">T</span> <span class=\"kd\">extends</span> <span class=\"nc\">Poolable</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"no\">MAX_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"o\">;</span>\n    <span class=\"c1\">// 就是个简单的队列实现, 最大存储容量是20</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Queue</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">keyPool</span> <span class=\"o\">=</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">createQueue</span><span class=\"o\">(</span><span class=\"no\">MAX_SIZE</span><span class=\"o\">);</span>\n\n    <span class=\"kd\">protected</span> <span class=\"no\">T</span> <span class=\"nf\">get</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"no\">T</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">offer</span><span class=\"o\">(</span><span class=\"no\">T</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&lt;</span> <span class=\"no\">MAX_SIZE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">protected</span> <span class=\"kd\">abstract</span> <span class=\"no\">T</span> <span class=\"nf\">create</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>可以看到</p>\n<ol>\n  <li>KeyPool, 就是一个容量为 20 的队列, 很简单,</li>\n  <li>put() 和 get() 还是通过 <strong>GroupedLinkedMap</strong>来实现功能</li>\n</ol>\n\n<p>追踪进去 GroupedLinkedMap</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">class</span> <span class=\"nc\">GroupedLinkedMap</span><span class=\"o\">&lt;</span><span class=\"no\">K</span> <span class=\"kd\">extends</span> <span class=\"nc\">Poolable</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\t<span class=\"c1\">// 单向循环链表</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;</span> <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;();</span>\n    <span class=\"c1\">// 空间换时间的 HashMap</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">keyToEntry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;&gt;();</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"no\">K</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"no\">V</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">keyToEntry</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n            <span class=\"c1\">// 插入新的, 直接插入到循环链表队尾, 代表最近不常使用</span>\n            <span class=\"n\">makeTail</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">);</span>\n            <span class=\"n\">keyToEntry</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">entry</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 插入旧的(匹配到Key条件), 直接插入</span>\n        <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"no\">V</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"no\">K</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">keyToEntry</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n            <span class=\"c1\">// 找不到符合 Key 条件的, 创建一个符合 Key 条件的 Entry</span>\n            <span class=\"n\">keyToEntry</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">entry</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 移动 Entry 到队头, 代表最近最常使用</span>\n        <span class=\"n\">makeHead</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// 移除 Entry 的 values 里的一个 Bitmap 对象供外部使用</span>\n        <span class=\"k\">return</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">removeLast</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// 内存不足的时候需要清理了</span>\n\t<span class=\"kd\">public</span> <span class=\"no\">V</span> <span class=\"nf\">removeLast</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 从队尾开始清除, 清除最近不常使用</span>\n        <span class=\"nc\">LinkedEntry</span><span class=\"o\">&lt;</span><span class=\"no\">K</span><span class=\"o\">,</span> <span class=\"no\">V</span><span class=\"o\">&gt;</span> <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">prev</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"no\">V</span> <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">removeLast</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">removed</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">removed</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">removeEntry</span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">);</span>\n                <span class=\"n\">keyToEntry</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">);</span>\n                <span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">last</span><span class=\"o\">.</span><span class=\"na\">prev</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>以上 AttributeStrategy 的原理讲完了, 下面来看看另外一个实现 SizeConfigStrategy,</p>\n<ol>\n  <li>它和 AttributeStrategy 的区别在于存储的Key值条件不一样, <strong>SizeConfigStrategy 的 Key 是 size (w*h) 和 config 组成</strong>, 之所以能这么做完全依赖于 Bitmap 的一个方法 reconfigure()</li>\n  <li>还记得前文提到 KITKAT 前后 LruPoolStrategy 的不同实现, <strong>reconfigure()</strong> 方法就是在 KITKAT 之后才支持的</li>\n  <li><strong>reconfigure()</strong> 作用很简单就是修改已存在的 Bitmap 的大小配置, 这样才能让缓存以比较模糊的 Size 维度进行, 而不是 width 和 height 的强制匹配</li>\n</ol>\n\n<p>下面来看看 <strong>SizeConfigStrategy</strong> 与 <strong>AttributeStrategy</strong> 不同的地方</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// SizeConfigStrategy</span>\n\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Bitmap</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getBitmapByteSize</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"nc\">Key</span> <span class=\"n\">targetKey</span> <span class=\"o\">=</span> <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 关键代码在这里, 找到一个合适的 size 的 Bitmap 缓存实例</span>\n        <span class=\"nc\">Key</span> <span class=\"n\">bestKey</span> <span class=\"o\">=</span> <span class=\"n\">findBestKey</span><span class=\"o\">(</span><span class=\"n\">targetKey</span><span class=\"o\">,</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">groupedMap</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">bestKey</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// Decrement must be called before reconfigure.</span>\n            <span class=\"n\">decrementBitmapOfSize</span><span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getBitmapByteSize</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">),</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">());</span>\n            <span class=\"c1\">// 将缓存的 Bitmap 宽高和配置重行修改, 返回给下张图用</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">reconfigure</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span>\n                    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getConfig</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span><span class=\"o\">.</span><span class=\"na\">ARGB_8888</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Key</span> <span class=\"nf\">findBestKey</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Key</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">possibleConfig</span> <span class=\"o\">:</span> <span class=\"n\">getInConfigs</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 找到符合 config 的一组 size</span>\n            <span class=\"nc\">NavigableMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">sizesForPossibleConfig</span> <span class=\"o\">=</span> <span class=\"n\">getSizesForConfig</span><span class=\"o\">(</span><span class=\"n\">possibleConfig</span><span class=\"o\">);</span>\n            <span class=\"c1\">// 从 size 里面比当前需要的大的所有size中, 找到最小的那个 返回给外面</span>\n            <span class=\"nc\">Integer</span> <span class=\"n\">possibleSize</span> <span class=\"o\">=</span> <span class=\"n\">sizesForPossibleConfig</span><span class=\"o\">.</span><span class=\"na\">ceilingKey</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">possibleSize</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">possibleSize</span> <span class=\"o\">&lt;=</span> <span class=\"n\">size</span> <span class=\"o\">*</span> <span class=\"no\">MAX_SIZE_MULTIPLE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">possibleSize</span> <span class=\"o\">!=</span> <span class=\"n\">size</span>\n                        <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">possibleConfig</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">config</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">:</span> <span class=\"o\">!</span><span class=\"n\">possibleConfig</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">keyPool</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">possibleSize</span><span class=\"o\">,</span> <span class=\"n\">possibleConfig</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">NavigableMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">getSizesForConfig</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 找到符合 config 的一组 size</span>\n        <span class=\"nc\">NavigableMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">sizes</span> <span class=\"o\">=</span> <span class=\"n\">sortedSizes</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sizes</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sizes</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">TreeMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">&gt;();</span>\n            <span class=\"n\">sortedSizes</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">,</span> <span class=\"n\">sizes</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sizes</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// 缓存, 按照 config 为 Key 的方式存储一组 Bitmap 的 size</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span><span class=\"o\">,</span> <span class=\"nc\">NavigableMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">sortedSizes</span> <span class=\"o\">=</span>\n            <span class=\"k\">new</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">Config</span><span class=\"o\">,</span> <span class=\"nc\">NavigableMap</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span> <span class=\"nc\">Integer</span><span class=\"o\">&gt;&gt;();</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ol>\n  <li>关于 sortedSizes 还是为了 <strong>空间换时间</strong> , 主要赚取一个遍历的时间成本差价</li>\n  <li>get 方法会先找到 config 相关的一组size; 然后找出这一组 size 中比当前需要 size 大的全部 size; 最后, 在筛选之后的 size 组中, 找到一个最小的, 返回给外面使用 ( 总之: <strong>找一个比需要 size 大的,并且最贴近需要 size 的 Bitmap 缓存实例</strong> )</li>\n</ol>\n\n<h2 id=\"回顾\">回顾</h2>\n<p>至此, BitmapPool 相关的就讲完了, 下面回顾下这张图\n<img src=\"https://img-blog.csdnimg.cn/2021032013563065.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<p>核心原理都在这里了, 就是一个<strong>遵循 LRU 算法的 对象池子</strong>, 或者再精确些, 就是一个<strong>单向循环链表</strong>, 列表的每个元素都存着一组 Bitmap 缓存实例, 以备外面使用</p>\n",
      "desc"     : "一、作用  Android 中图片显示的实体其实是一个 Bitmap 对象, 每次图片显示时, 都会构建一个 Bitmap 对象, 不用时再销毁  假设: 一个长列表每项都有个图片需要显示, 我们在快速滑动长列表的时候, 会产生什么?  	Bitmap 对象被频繁的创建和释放, 导致 GC 频繁  如何解决上述问题? BitmapPool , 一个 Bitmap 的对象池, 让一个新的图片资..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(三), 生命周期绑定",
      "title-lower"    : "android glide 3.7.0 源码解析(三), 生命周期绑定",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/03/20/markdown-glide3.7.0_3/",
      "date"     : "2021-03-20 23:16:58 +0800",
      "content": "<h1 id=\"一流程图解\">一、流程图解</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20210314175314605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n  <p>注意:</p>\n  <ul>\n    <li>一个 Fragment / Activity 会对应生成一个 RequestManager</li>\n    <li>一个 Application 对应一个 applicationManager , 这是一个全局唯一的 RequestManager</li>\n    <li>每个 RequestManager 会有一个 Lifecycle 和 一个 RequestTracker</li>\n    <li>每个 RequestTracker 有个 List&lt; Request &gt;\n<img src=\"https://img-blog.csdnimg.cn/20210314182433256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  </ul>\n</blockquote>\n\n<ol>\n  <li>如果是主线程就注册创建一个<strong>无界面的 Fragment</strong> 加到 Fragment / Activity , 依赖这个Fragment 来监听生命周期</li>\n  <li>如果是非主线程 , 就创建一个 Application 级别的 Lifecycle , 模拟生命周期</li>\n  <li>在 1. 中创建的 Fragment 可以反馈 <strong>内存</strong> 和 <strong>界面</strong> 的 生命周期 , 这就完成了对内存和界面的监听</li>\n  <li>可以根据 1. 中 Fragment , 来决定是否监控 <strong>网络状态</strong> ( 如果界面都没了, 那自然也就没必要监控网络状态了 )</li>\n</ol>\n\n<h1 id=\"二源码分析\">二、源码分析</h1>\n\n<h2 id=\"生命周期创建\">生命周期创建</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/2021031418002898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\nGlide 的 5 个 with 方法最终都对应的是 RequestManagerRetriever 的 5 个 get()\n<img src=\"https://img-blog.csdnimg.cn/2021031418023553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n而 RequestManagerRetriever 的 5 个 get() 最终对应 RequestManagerRetriever 的三个方法</p>\n<ul>\n  <li><strong>非主线程时</strong> : get(activity.getApplicationContext())</li>\n  <li><strong>主线程 + Activity 时</strong> : fragmentGet(activity, activity.getFragmentManager())</li>\n  <li><strong>主线程 + Fragment 时</strong> : supportFragmentGet(fragment.getActivity(), fragment.getChildFragmentManager())</li>\n</ul>\n\n<p>先来看看简单点的, <strong>非主线时</strong></p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManagerRetriever</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">RequestManager</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalArgumentException</span><span class=\"o\">(</span><span class=\"s\">\"You cannot start a load on a null Context\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isOnMainThread</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!(</span><span class=\"n\">context</span> <span class=\"k\">instanceof</span> <span class=\"nc\">Application</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"k\">instanceof</span> <span class=\"nc\">FragmentActivity</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"nf\">get</span><span class=\"o\">((</span><span class=\"nc\">FragmentActivity</span><span class=\"o\">)</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"k\">instanceof</span> <span class=\"nc\">Activity</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"nf\">get</span><span class=\"o\">((</span><span class=\"nc\">Activity</span><span class=\"o\">)</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"k\">instanceof</span> <span class=\"nc\">ContextWrapper</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"nf\">get</span><span class=\"o\">(((</span><span class=\"nc\">ContextWrapper</span><span class=\"o\">)</span> <span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">getBaseContext</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// 最终走到这里</span>\n        <span class=\"k\">return</span> <span class=\"nf\">getApplicationManager</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">RequestManager</span> <span class=\"nf\">getApplicationManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">applicationManager</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">applicationManager</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">applicationManager</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RequestManager</span><span class=\"o\">(</span>\n                    \t\t<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getApplicationContext</span><span class=\"o\">(),</span>\n                            <span class=\"k\">new</span> <span class=\"nf\">ApplicationLifecycle</span><span class=\"o\">(),</span>\n                            <span class=\"k\">new</span> <span class=\"nf\">EmptyRequestManagerTreeNode</span><span class=\"o\">());</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// applicationManager 全局唯一</span>\n        <span class=\"k\">return</span> <span class=\"n\">applicationManager</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ApplicationLifecycle</span>\n\t<span class=\"kd\">class</span> <span class=\"nc\">ApplicationLifecycle</span> <span class=\"kd\">implements</span> <span class=\"nc\">Lifecycle</span> <span class=\"o\">{</span>\n    \t<span class=\"nd\">@Override</span>\n    \t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addListener</span><span class=\"o\">(</span><span class=\"nc\">LifecycleListener</span> <span class=\"n\">listener</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \t\t<span class=\"c1\">// 这里模拟了一个假的生命周期, 只有start</span>\n        \t<span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"na\">onStart</span><span class=\"o\">();</span>\n    \t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>小结:</p>\n<ul>\n  <li>创建了一个 <strong>ApplicationLifecycle</strong> ( 模拟生命周期 / 全局生命周期 )</li>\n  <li>放进一个全局唯一 <strong>applicationManager</strong> ( RequestManager 实例 ) 中</li>\n</ul>\n\n<p><strong>主线程 + Activity 时</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManagerRetriever</span>\n\t<span class=\"nc\">RequestManager</span> <span class=\"nf\">fragmentGet</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">app</span><span class=\"o\">.</span><span class=\"na\">FragmentManager</span> <span class=\"n\">fm</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 这里应该就是生成空白 Fragment 的步骤</span>\n        <span class=\"nc\">RequestManagerFragment</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">getRequestManagerFragment</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">requestManager</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RequestManager</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span>\n        \t\t\t\t\t\t<span class=\"c1\">// 这里就是创建生命周期的地方了</span>\n        \t\t\t\t\t\t<span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getLifecycle</span><span class=\"o\">(),</span>\n        \t\t\t\t\t\t<span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getRequestManagerTreeNode</span><span class=\"o\">());</span>\n        <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">setRequestManager</span><span class=\"o\">(</span><span class=\"n\">requestManager</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">requestManager</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">RequestManagerFragment</span> <span class=\"nf\">getRequestManagerFragment</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">app</span><span class=\"o\">.</span><span class=\"na\">FragmentManager</span> <span class=\"n\">fm</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n\t\t<span class=\"c1\">// 一系列验证当前界面是否绑定过 Glide 的空白 Fragment</span>\n        <span class=\"nc\">RequestManagerFragment</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">RequestManagerFragment</span><span class=\"o\">)</span> <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">findFragmentByTag</span><span class=\"o\">(</span><span class=\"no\">FRAGMENT_TAG</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">current</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">pendingRequestManagerFragments</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">current</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            \t<span class=\"c1\">// 未绑定过 , 创建一个新的</span>\n                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RequestManagerFragment</span><span class=\"o\">();</span>\n                <span class=\"n\">pendingRequestManagerFragments</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"n\">current</span><span class=\"o\">);</span>\n                <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">beginTransaction</span><span class=\"o\">().</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">,</span><span class=\"no\">FRAGMENT_TAG</span><span class=\"o\">)</span>\n                \t\t\t\t\t <span class=\"o\">.</span><span class=\"na\">commitAllowingStateLoss</span><span class=\"o\">();</span>\n                <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">obtainMessage</span><span class=\"o\">(</span><span class=\"no\">ID_REMOVE_FRAGMENT_MANAGER</span><span class=\"o\">,</span> <span class=\"n\">fm</span><span class=\"o\">).</span><span class=\"na\">sendToTarget</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">current</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// RequestManagerFragment</span>\n\t<span class=\"nc\">ActivityFragmentLifecycle</span> <span class=\"nf\">getLifecycle</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 根据上面的代码, 应该是在构造函数里创建了, 跟进去看看</span>\n        <span class=\"k\">return</span> <span class=\"n\">lifecycle</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nf\">RequestManagerFragment</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 最终创建了一个 ActivityFragmentLifecycle 实例 , 来看看它是如何工作的</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ActivityFragmentLifecycle</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">RequestManagerFragment</span><span class=\"o\">(</span><span class=\"nc\">ActivityFragmentLifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lifecycle</span> <span class=\"o\">=</span> <span class=\"n\">lifecycle</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onStart</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onStart</span><span class=\"o\">();</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">onStart</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onStop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onStop</span><span class=\"o\">();</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">onStop</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onDestroy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onDestroy</span><span class=\"o\">();</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">onDestroy</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ActivityFragmentLifecycle</span>\n\t<span class=\"kt\">void</span> <span class=\"nf\">onStart</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">isStarted</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">LifecycleListener</span> <span class=\"n\">lifecycleListener</span> <span class=\"o\">:</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getSnapshot</span><span class=\"o\">(</span><span class=\"n\">lifecycleListeners</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">lifecycleListener</span><span class=\"o\">.</span><span class=\"na\">onStart</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">onStop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">isStarted</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">LifecycleListener</span> <span class=\"n\">lifecycleListener</span> <span class=\"o\">:</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getSnapshot</span><span class=\"o\">(</span><span class=\"n\">lifecycleListeners</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">lifecycleListener</span><span class=\"o\">.</span><span class=\"na\">onStop</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">onDestroy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">isDestroyed</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">LifecycleListener</span> <span class=\"n\">lifecycleListener</span> <span class=\"o\">:</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getSnapshot</span><span class=\"o\">(</span><span class=\"n\">lifecycleListeners</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">lifecycleListener</span><span class=\"o\">.</span><span class=\"na\">onDestroy</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>很简单,</p>\n<ul>\n  <li>往 <strong>Activity</strong> 插入一个没界面的 <strong>RequestManagerFragment</strong></li>\n  <li>创建了一个 <strong>ActivityFragmentLifecycle 实例</strong>, 在 <strong>RequestManagerFragment</strong> 生命周期函数被调用时调用</li>\n</ul>\n\n<p><strong>主线程 + Fragment 时</strong></p>\n\n<p>我们就不看了, 结果差不多</p>\n<ul>\n  <li>往 <strong>Fragment</strong> 插入一个没界面的 <strong>SupportRequestManagerFragment</strong></li>\n  <li>创建了一个 <strong>ActivityFragmentLifecycle 实例</strong>, 在 <strong>SupportRequestManagerFragment</strong> 生命周期函数被调用时调用</li>\n</ul>\n\n<h2 id=\"内存监听\">内存监听</h2>\n<ul>\n  <li>在 SupportRequestManagerFragment 的 onLowMemory()</li>\n  <li>在 RequestManagerFragment  的 onTrimMemory() / onLowMemory()</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// SupportRequestManagerFragment</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onLowMemory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">requestManager</span><span class=\"o\">.</span><span class=\"na\">onLowMemory</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// RequestManagerFragment</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onTrimMemory</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">requestManager</span><span class=\"o\">.</span><span class=\"na\">onTrimMemory</span><span class=\"o\">(</span><span class=\"n\">level</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onLowMemory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">requestManager</span><span class=\"o\">.</span><span class=\"na\">onLowMemory</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// requestManager 是啥? 还记得 RequestManagerFragment 创建的代码 ?</span>\n<span class=\"c1\">// RequestManagerRetriever</span>\n\t<span class=\"nc\">RequestManager</span> <span class=\"nf\">fragmentGet</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">app</span><span class=\"o\">.</span><span class=\"na\">FragmentManager</span> <span class=\"n\">fm</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">RequestManagerFragment</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">getRequestManagerFragment</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">requestManager</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RequestManager</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span>\n        \t\t\t\t\t\t<span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getLifecycle</span><span class=\"o\">(),</span>\n        \t\t\t\t\t\t<span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getRequestManagerTreeNode</span><span class=\"o\">());</span>\n        <span class=\"c1\">// 这里这里这里</span>\n        <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">setRequestManager</span><span class=\"o\">(</span><span class=\"n\">requestManager</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">requestManager</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// RequestManager</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onTrimMemory</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">trimMemory</span><span class=\"o\">(</span><span class=\"n\">level</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onLowMemory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">clearMemory</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Glide 单例</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">clearMemory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">...</span>\n        <span class=\"n\">memoryCache</span><span class=\"o\">.</span><span class=\"na\">clearMemory</span><span class=\"o\">();</span>\n        <span class=\"n\">bitmapPool</span><span class=\"o\">.</span><span class=\"na\">clearMemory</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">trimMemory</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">memoryCache</span><span class=\"o\">.</span><span class=\"na\">trimMemory</span><span class=\"o\">(</span><span class=\"n\">level</span><span class=\"o\">);</span>\n        <span class=\"n\">bitmapPool</span><span class=\"o\">.</span><span class=\"na\">trimMemory</span><span class=\"o\">(</span><span class=\"n\">level</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>小结:</p>\n<ul>\n  <li>空白 Fragment 返回存储吃紧的时候, 交由 Glide 处理去了</li>\n  <li>memoryCache 清理内存缓存</li>\n  <li>bitmapPool 清理内存缓存\n    <blockquote>\n      <p>memoryCache 很容易就能猜出来是 Glide 的用来做内存缓存的;\n那么 bitmapPool 是个啥? <a href=\"/2021/03/20/markdown-glide3.7.0_4/index.html\">Android Glide 3.7.0 源码解析(四), BitmapPool作用及原理</a></p>\n      <ol>\n        <li>在 Android 中图片的显示实体是一个 Bitmap 对象, 每一次图片显示都会先将图片资源构建成一个 Bitmap 对象, 而创建和销毁 Bitmap 的过程比较耗系统资源, 严重时还会引起GC频繁, 界面卡顿</li>\n        <li>举个例子: 列表显示头像, 一页10个头像展示, 假定GC的阈值就是10张图\n 普通方案: 创建10个 Bitmap 再释放, 再创建10个 Bitmap 用来展示下一页, 这样没滑动一页就是触发一次GC\n Glide 方案: 创建一个 BitmapPool 参照线程池理解, 创建好10个 bitmap 不释放, 下一页的10个图像, 借用已有的 Bitmap 的内存空间, 不论滑动多少页, 都不会触发 GC 了</li>\n      </ol>\n    </blockquote>\n  </li>\n</ul>\n\n<h2 id=\"请求任务监听\">请求任务监听</h2>\n<p>来看看 RequestManager 的构造函数</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">RequestManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManagerTreeNode</span> <span class=\"n\">treeNode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"n\">treeNode</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">RequestTracker</span><span class=\"o\">(),</span> <span class=\"k\">new</span> <span class=\"nc\">ConnectivityMonitorFactory</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">RequestManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManagerTreeNode</span> <span class=\"n\">treeNode</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestTracker</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"nc\">ConnectivityMonitorFactory</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getApplicationContext</span><span class=\"o\">();</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lifecycle</span> <span class=\"o\">=</span> <span class=\"n\">lifecycle</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">treeNode</span> <span class=\"o\">=</span> <span class=\"n\">treeNode</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">requestTracker</span> <span class=\"o\">=</span> <span class=\"n\">requestTracker</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">glide</span> <span class=\"o\">=</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">optionsApplier</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">OptionsApplier</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">ConnectivityMonitor</span> <span class=\"n\">connectivityMonitor</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nf\">RequestManagerConnectivityListener</span><span class=\"o\">(</span><span class=\"n\">requestTracker</span><span class=\"o\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isOnBackgroundThread</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Handler</span><span class=\"o\">(</span><span class=\"nc\">Looper</span><span class=\"o\">.</span><span class=\"na\">getMainLooper</span><span class=\"o\">()).</span><span class=\"na\">post</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Runnable</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                <span class=\"nd\">@Override</span>\n                <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                    <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"nc\">RequestManager</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 把 RequestManager 自身注册进入 lifecycle</span>\n            <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 这里是网络状态的生命周期注册, 下一小节讲</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"n\">connectivityMonitor</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// RequestManager 的 LifecycleListener 实现</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onStart</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// onStart might not be called because this object may be created after the fragment/activity's onStart method.</span>\n        <span class=\"n\">resumeRequests</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">resumeRequests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"n\">requestTracker</span><span class=\"o\">.</span><span class=\"na\">resumeRequests</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE\n     * permission is present) and pauses in progress loads.\n     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onStop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">pauseRequests</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pauseRequests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"n\">requestTracker</span><span class=\"o\">.</span><span class=\"na\">pauseRequests</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"cm\">/**\n     * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed\n     * requests.\n     */</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onDestroy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">requestTracker</span><span class=\"o\">.</span><span class=\"na\">clearRequests</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ol>\n  <li>RequestManager 在初始化的时候, 把自己注册进入 Lifecycle</li>\n  <li>而通过 RequestManager 对 LifecycleListener 的 实现可得, 最终都是调用 <strong>RequestManager.requestTracker</strong> 来实现功能</li>\n</ol>\n\n<p>现在我们来追踪 requestTracker 看看</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">RequestManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManagerTreeNode</span> <span class=\"n\">treeNode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 这里直接 new 了一个对象</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"n\">treeNode</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">RequestTracker</span><span class=\"o\">(),</span> <span class=\"k\">new</span> <span class=\"nc\">ConnectivityMonitorFactory</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// RequestTracker</span>\n\n\t<span class=\"c1\">// LifecycleListener.onStart</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">resumeRequests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">isPaused</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Request</span> <span class=\"n\">request</span> <span class=\"o\">:</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getSnapshot</span><span class=\"o\">(</span><span class=\"n\">requests</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">isComplete</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">isCancelled</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">isRunning</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">begin</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">pendingRequests</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// LifecycleListener.onStop</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pauseRequests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">isPaused</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Request</span> <span class=\"n\">request</span> <span class=\"o\">:</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getSnapshot</span><span class=\"o\">(</span><span class=\"n\">requests</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">isRunning</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">pause</span><span class=\"o\">();</span>\n                <span class=\"n\">pendingRequests</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// LifecycleListener.onDestroy</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">clearRequests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Request</span> <span class=\"n\">request</span> <span class=\"o\">:</span> <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">getSnapshot</span><span class=\"o\">(</span><span class=\"n\">requests</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">pendingRequests</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ol>\n  <li>可以看到这里最终调用的是 Request(真实) 的 begin() , pause() , clear()</li>\n  <li>这里的 Request(真实) 是一个 GenericRequest 对象 (详细参考: <a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析(二), 从一次图片加载流程看源码</a>)</li>\n</ol>\n\n<p>继续追踪 GenericRequest</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\n\t<span class=\"c1\">// LifecycleListener.onStart</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">begin</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">startTime</span> <span class=\"o\">=</span> <span class=\"nc\">LogTime</span><span class=\"o\">.</span><span class=\"na\">getLogTime</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">model</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">onException</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">WAITING_FOR_SIZE</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isValidDimensions</span><span class=\"o\">(</span><span class=\"n\">overrideWidth</span><span class=\"o\">,</span> <span class=\"n\">overrideHeight</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 就是调用这个方法开始新一次的下载任务</span>\n            <span class=\"n\">onSizeReady</span><span class=\"o\">(</span><span class=\"n\">overrideWidth</span><span class=\"o\">,</span> <span class=\"n\">overrideHeight</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isComplete</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">isFailed</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">canNotifyStatusChanged</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">onLoadStarted</span><span class=\"o\">(</span><span class=\"n\">getPlaceholderDrawable</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">logV</span><span class=\"o\">(</span><span class=\"s\">\"finished run method in \"</span> <span class=\"o\">+</span> <span class=\"nc\">LogTime</span><span class=\"o\">.</span><span class=\"na\">getElapsedMillis</span><span class=\"o\">(</span><span class=\"n\">startTime</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// LifecycleListener.onStop</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pause</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 看来 onStop 和 onDestroy  是调用的相同的逻辑</span>\n        <span class=\"n\">clear</span><span class=\"o\">();</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">PAUSED</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// LifecycleListener.onDestroy</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">clear</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">CLEARED</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 任务的停止都是在这边控制</span>\n        <span class=\"n\">cancel</span><span class=\"o\">();</span>\n        <span class=\"c1\">// Resource must be released before canNotifyStatusChanged is called.</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resource</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 此处就是一些资源的释放, 过滤不看</span>\n            <span class=\"n\">releaseResource</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">canNotifyStatusChanged</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">onLoadCleared</span><span class=\"o\">(</span><span class=\"n\">getPlaceholderDrawable</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// Must be after cancel().</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">CLEARED</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kt\">void</span> <span class=\"nf\">cancel</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nc\">Status</span><span class=\"o\">.</span><span class=\"na\">CANCELLED</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">loadStatus</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">loadStatus</span><span class=\"o\">.</span><span class=\"na\">cancel</span><span class=\"o\">();</span>\n            <span class=\"n\">loadStatus</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// LoadStatus</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">LoadStatus</span> <span class=\"o\">{</span>\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">EngineJob</span> <span class=\"n\">engineJob</span><span class=\"o\">;</span>\n        <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">public</span> <span class=\"nf\">LoadStatus</span><span class=\"o\">(</span><span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">,</span> <span class=\"nc\">EngineJob</span> <span class=\"n\">engineJob</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">cb</span> <span class=\"o\">=</span> <span class=\"n\">cb</span><span class=\"o\">;</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">engineJob</span> <span class=\"o\">=</span> <span class=\"n\">engineJob</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">cancel</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 最终调用这个 EngineJob 来实现任务的取消的</span>\n            <span class=\"n\">engineJob</span><span class=\"o\">.</span><span class=\"na\">removeCallback</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ol>\n  <li>生命周期方法 onStart() 最终通过 Request 的 begin() 来发起一个请求</li>\n  <li>而 onStop() 和 onDestroy() 则是通过 EngineJob 的 removeCallback() 来实现</li>\n  <li>这个 EngineJob 其实是管理下载时 Request 的线程调度的(具体参见: <a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析(二), 从一次图片加载流程看源码</a>)\n<img src=\"https://img-blog.csdnimg.cn/20210315105844940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n\n<p>继续追踪 EngineJob 来看看</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// EngineJob</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">removeCallback</span><span class=\"o\">(</span><span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">assertMainThread</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasResource</span> <span class=\"o\">||</span> <span class=\"n\">hasException</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">addIgnoredCallback</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 先移除监听回调</span>\n            <span class=\"n\">cbs</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cbs</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 都移除完毕之后, 看看它做了啥</span>\n                <span class=\"n\">cancel</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kt\">void</span> <span class=\"nf\">cancel</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hasException</span> <span class=\"o\">||</span> <span class=\"n\">hasResource</span> <span class=\"o\">||</span> <span class=\"n\">isCancelled</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">engineRunnable</span><span class=\"o\">.</span><span class=\"na\">cancel</span><span class=\"o\">();</span>\n        <span class=\"nc\">Future</span> <span class=\"n\">currentFuture</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentFuture</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 这里的 future 是一个 ExecutorService.submit 返回的最终到这里终止任务</span>\n            <span class=\"n\">currentFuture</span><span class=\"o\">.</span><span class=\"na\">cancel</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">isCancelled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"na\">onEngineJobCancelled</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>说明:</p>\n<ol>\n  <li>Glide 单例在实例化的时候, 会创建一个 diskCacheService ( ExecutorService 类型 ) 和 Engine 对象, 并把 diskCacheService 封装进 Engine</li>\n  <li>调用 Engine.load() 来执行一个 Request(真实) 的任务</li>\n  <li>Engine.load() 会 创建一个 EngineJob 实例, 并把 diskCacheService 传递进去</li>\n  <li>EngineJob.start() 来开始一个任务, 其实就是调用 diskCacheService.submit()</li>\n  <li>所以, 上面的 cancel() 其实就是 Future.cancel()\n<img src=\"https://img-blog.csdnimg.cn/20210315111813772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  <li>每个 Request(真实) 对应一个 EngineJob 实例</li>\n</ol>\n\n<p>还剩下最后一个没有看了, 网络状态变化的监听</p>\n\n<h2 id=\"网络状态变化的监听\">网络状态变化的监听</h2>\n<p>还记得 RequestManager 的构造函数?</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nf\">RequestManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManagerTreeNode</span> <span class=\"n\">treeNode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"n\">treeNode</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">RequestTracker</span><span class=\"o\">(),</span> <span class=\"k\">new</span> <span class=\"nc\">ConnectivityMonitorFactory</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nc\">RequestManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManagerTreeNode</span> <span class=\"n\">treeNode</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestTracker</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"nc\">ConnectivityMonitorFactory</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getApplicationContext</span><span class=\"o\">();</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lifecycle</span> <span class=\"o\">=</span> <span class=\"n\">lifecycle</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">treeNode</span> <span class=\"o\">=</span> <span class=\"n\">treeNode</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">requestTracker</span> <span class=\"o\">=</span> <span class=\"n\">requestTracker</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">glide</span> <span class=\"o\">=</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">optionsApplier</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">OptionsApplier</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">ConnectivityMonitor</span> <span class=\"n\">connectivityMonitor</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nf\">RequestManagerConnectivityListener</span><span class=\"o\">(</span><span class=\"n\">requestTracker</span><span class=\"o\">));</span>\n\n        <span class=\"c1\">// If we're the application level request manager, we may be created on a background thread. In that case we</span>\n        <span class=\"c1\">// cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding</span>\n        <span class=\"c1\">// ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isOnBackgroundThread</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Handler</span><span class=\"o\">(</span><span class=\"nc\">Looper</span><span class=\"o\">.</span><span class=\"na\">getMainLooper</span><span class=\"o\">()).</span><span class=\"na\">post</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Runnable</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                <span class=\"nd\">@Override</span>\n                <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                    <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"nc\">RequestManager</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 就是这里 创建了一个 connectivityMonitor 实例, 并注册进监听</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"n\">connectivityMonitor</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">//DefaultConnectivityMonitor ConnectivityMonitor 子类</span>\n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onStart</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">register</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onStop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">unregister</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">register</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isRegistered</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">isConnected</span> <span class=\"o\">=</span> <span class=\"n\">isConnected</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">registerReceiver</span><span class=\"o\">(</span><span class=\"n\">connectivityReceiver</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">IntentFilter</span><span class=\"o\">(</span><span class=\"nc\">ConnectivityManager</span><span class=\"o\">.</span><span class=\"na\">CONNECTIVITY_ACTION</span><span class=\"o\">));</span>\n        <span class=\"n\">isRegistered</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">unregister</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">isRegistered</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">unregisterReceiver</span><span class=\"o\">(</span><span class=\"n\">connectivityReceiver</span><span class=\"o\">);</span>\n        <span class=\"n\">isRegistered</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>很简单 ,  就是界面活着的时候去监听网络状态变换, 界面销毁的时候, 解注册对网络状态变化的监测</p>\n\n",
      "desc"     : "一、流程图解  注意:      一个 Fragment / Activity 会对应生成一个 RequestManager    一个 Application 对应一个 applicationManager , 这是一个全局唯一的 RequestManager    每个 RequestManager 会有一个 Lifecycle 和 一个 RequestTracker    每个 Req..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码",
      "title-lower"    : "android glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/03/14/markdown-glide3.7.0_2/",
      "date"     : "2021-03-14 23:02:35 +0800",
      "content": "<h1 id=\"一加载图片代码\">一、加载图片代码</h1>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">with</span><span class=\"o\">(</span><span class=\"n\">activity</span><span class=\"o\">).</span><span class=\"na\">load</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">).</span><span class=\"na\">into</span><span class=\"o\">(</span><span class=\"n\">imageView</span><span class=\"o\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h1 id=\"二流程图\">二、流程图</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20210310215407519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n  <ol>\n    <li>Glide.with 方法, 创建 RequestManager 实例</li>\n    <li>\n      <p>RequestManager.load 方法, 创建 GenericRequestBuilder 实例, 并打包编/解码, 转码, 图形转换, 下载等工具\n解码: File, InputStream 转换成 Bitmap, Drawable\n编码: 将数据写入缓存区</p>\n    </li>\n    <li>GenericRequestBuilder.into 方法, 使用 load 构建的参数构建一个 Request 实例</li>\n    <li>Request 实例, 执行下载, 解码, 图形变换, 数据转码, 生成 Resource 图片资源</li>\n    <li>onSourceReady 方法, 将处理好的 Resource 回调到 Target 并显示出来</li>\n  </ol>\n</blockquote>\n\n<h1 id=\"三源码执行过程\">三、源码执行过程</h1>\n<h2 id=\"31-with\">[3.1] with()</h2>\n<blockquote>\n  <ul>\n    <li>特别注意: 源码较多, 为了精简不会贴全, 省略部分会以 … 来表示</li>\n  </ul>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Glide</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">RequestManager</span> <span class=\"nf\">with</span><span class=\"o\">(</span><span class=\"nc\">Activity</span> <span class=\"n\">activity</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">RequestManagerRetriever</span> <span class=\"n\">retriever</span> <span class=\"o\">=</span> <span class=\"nc\">RequestManagerRetriever</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">retriever</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">activity</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>进入 RequestManagerRetriever.get</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManagerRetriever</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">RequestManager</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"nc\">Activity</span> <span class=\"n\">activity</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isOnBackgroundThread</span><span class=\"o\">()</span> <span class=\"o\">...)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">...;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">app</span><span class=\"o\">.</span><span class=\"na\">FragmentManager</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">activity</span><span class=\"o\">.</span><span class=\"na\">getFragmentManager</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span> <span class=\"nf\">fragmentGet</span><span class=\"o\">(</span><span class=\"n\">activity</span><span class=\"o\">,</span> <span class=\"n\">fm</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>两个分支, 假定, 在主线程调用, 则, 进入 fragmentGet</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManagerRetriever</span>\n\n    <span class=\"nc\">RequestManager</span> <span class=\"nf\">fragmentGet</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">app</span><span class=\"o\">.</span><span class=\"na\">FragmentManager</span> <span class=\"n\">fm</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">RequestManagerFragment</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">getRequestManagerFragment</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">requestManager</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RequestManager</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getLifecycle</span><span class=\"o\">(),</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getRequestManagerTreeNode</span><span class=\"o\">());</span>\n        <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">setRequestManager</span><span class=\"o\">(</span><span class=\"n\">requestManager</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">requestManager</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <ul>\n    <li>RequestManagerFragment 是用来监测生命周期, 内存的, 另外网络状态 ConnectivityMonitor 也会将自己绑入生命周期, 不是主线这里不做赘述, 详细原理可以点击查看这篇文章, <a href=\"/2021/03/20/markdown-glide3.7.0_3/index.html\">Android Glide 3.7.0 源码解析(三), 生命周期绑定</a></li>\n  </ul>\n</blockquote>\n\n<p>创建了一个 RequestManager 实例, 传入<strong>生命周期 ( ActivityFragmentLifecycle ) **和</strong>生命里面的Fragment树结构 ( RequestManagerTreeNode )**</p>\n<h3 id=\"311-requestmanagerglide\">[3.1.1] RequestManager.glide</h3>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\n\t<span class=\"nc\">RequestManager</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManagerTreeNode</span> <span class=\"n\">treeNode</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestTracker</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"nc\">ConnectivityMonitorFactory</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">glide</span> <span class=\"o\">=</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p><strong>这里创建了一个 Glide 单例</strong>, 留作后用</p>\n<h2 id=\"32-load\">[3.2] load()</h2>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">load</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;)</span> <span class=\"n\">fromString</span><span class=\"o\">().</span><span class=\"na\">load</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <ul>\n    <li><strong>创建了一个 DrawableTypeRequest , 它是个啥?</strong>\n继承自 GenericRequestBuilder ( <a href=\"https://img-blog.csdnimg.cn/20210311195313868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">UML 类图参考</a> ) , <strong>集合了编/解码, 图形变换, 转码, 下载功能</strong> ( 下面的流程中我们需要注意这些功能都是怎么集合进去的 )</li>\n    <li>在流程中的位置和功能:\n<img src=\"https://img-blog.csdnimg.cn/20210311193627438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n功能: <strong>调用 GenericRequestBuilder.into 生成真正的 Request 实例</strong>, GenericRequestBuilder 可以理解为一个用户态的 Request</li>\n  </ul>\n</blockquote>\n\n<p>1 行代码, 2 个分支, 第一 fromString, 第二 load, 先看第 1 个分支</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">fromString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">loadGeneric</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">loadGeneric</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamModelLoader</span> <span class=\"o\">=</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">buildStreamModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorModelLoader</span> <span class=\"o\">=</span>\n                <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">buildFileDescriptorModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">optionsApplier</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span>\n                <span class=\"k\">new</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">,</span>\n                        <span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"n\">optionsApplier</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>留意一下这里的 modelClass == String.class\nStreamStringLoader 和 FileDescriptorStringLoader 都属于 ModelLoader ( <a href=\"https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">UML 类图参考</a> ) 类型, 功用: <strong>数据下载</strong></p>\n  <ol>\n    <li>构建 StreamStringLoader 和 FileDescriptorStringLoader 实例, 属于<strong>下载模块</strong></li>\n    <li>以 1 中实例 , 构建 DrawableTypeRequest 实例, <strong>集合了编/解码, 图形变换, 转码, 下载功能</strong></li>\n  </ol>\n</blockquote>\n\n<p>下面来看看这些个功能模块是怎么初始化, 被打包进 DrawableTypeRequest 的</p>\n\n<h3 id=\"321-创建request用户态\">[3.2.1] 创建Request(用户态)</h3>\n<p>创建Request(用户态) DrawableTypeRequest</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager</span>\n\t<span class=\"kd\">private</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">loadGeneric</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamModelLoader</span> <span class=\"o\">=</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">buildStreamModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorModelLoader</span> <span class=\"o\">=</span>\n                <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">buildFileDescriptorModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">optionsApplier</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span>\n                <span class=\"k\">new</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">,</span>\n                        <span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"n\">optionsApplier</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// DrawableTypeRequest</span>\n\n\t<span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">Glide</span> <span class=\"n\">glide</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestTracker</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"nc\">RequestManager</span><span class=\"o\">.</span><span class=\"na\">OptionsApplier</span> <span class=\"n\">optionsApplier</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span>\n        \t\t<span class=\"c1\">// 构建一个 FixedLoadProvider</span>\n                <span class=\"n\">buildProvider</span><span class=\"o\">(</span><span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                        <span class=\"nc\">GlideDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">),</span>\n                <span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 2 个下载模块, 存储到自己的成员变量中</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">streamModelLoader</span> <span class=\"o\">=</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">fileDescriptorModelLoader</span> <span class=\"o\">=</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">;</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">DrawableRequestBuilder</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">LoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">,</span> <span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">,</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">Glide</span> <span class=\"n\">glide</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestTracker</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 十字星消失动画工厂</span>\n        <span class=\"n\">crossFade</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\t<span class=\"nc\">GenericRequestBuilder</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">LoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">,</span> <span class=\"nc\">DataType</span><span class=\"o\">,</span> <span class=\"nc\">ResourceType</span><span class=\"o\">,</span> <span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span>\n            <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">transcodeClass</span><span class=\"o\">,</span> <span class=\"nc\">Glide</span> <span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"nc\">RequestTracker</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"nc\">Lifecycle</span> <span class=\"n\">lifecycle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">;</span>\n        <span class=\"c1\">// String.class</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">modelClass</span> <span class=\"o\">=</span> <span class=\"n\">modelClass</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 转码类型</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">transcodeClass</span> <span class=\"o\">=</span> <span class=\"n\">transcodeClass</span><span class=\"o\">;</span>\n        <span class=\"c1\">// glide 单例</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">glide</span> <span class=\"o\">=</span> <span class=\"n\">glide</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">requestTracker</span> <span class=\"o\">=</span> <span class=\"n\">requestTracker</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 生命周期</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lifecycle</span> <span class=\"o\">=</span> <span class=\"n\">lifecycle</span><span class=\"o\">;</span>\n        <span class=\"c1\">// ChildLoadProvider</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">loadProvider</span> <span class=\"o\">=</span> <span class=\"n\">loadProvider</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span>\n                <span class=\"o\">?</span> <span class=\"k\">new</span> <span class=\"nc\">ChildLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">,</span> <span class=\"nc\">DataType</span><span class=\"o\">,</span> <span class=\"nc\">ResourceType</span><span class=\"o\">,</span> <span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;(</span><span class=\"n\">loadProvider</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">final</span> <span class=\"nc\">DrawableRequestBuilder</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">&gt;</span> <span class=\"nf\">crossFade</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 十字星消失动画工厂</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">animate</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DrawableCrossFadeFactory</span><span class=\"o\">&lt;</span><span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;());</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">GenericRequestBuilder</span><span class=\"o\">&lt;</span><span class=\"nc\">ModelType</span><span class=\"o\">,</span> <span class=\"nc\">DataType</span><span class=\"o\">,</span> <span class=\"nc\">ResourceType</span><span class=\"o\">,</span> <span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"nf\">animate</span><span class=\"o\">(</span>\n            <span class=\"nc\">GlideAnimationFactory</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">animationFactory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">animationFactory</span> <span class=\"o\">=</span> <span class=\"n\">animationFactory</span><span class=\"o\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>捋一下上面创建了哪些模块</p>\n<ul>\n  <li>2 个下载模块, StreamStringLoader 和 FileDescriptorStringLoader</li>\n  <li>十字星渐变动画工厂 DrawableCrossFadeFactory &lt; GlideDrawable &gt;</li>\n  <li>modelClass , 类型是 String.class</li>\n  <li>转码类型 transcodeClass , 是 GlideDrawable.class</li>\n  <li>生命周期 lifecycle</li>\n  <li>ChildLoadProvider</li>\n</ul>\n\n<h3 id=\"322-创建下载模块1\">[3.2.2] 创建下载模块1</h3>\n<p>创建下载模块1 StreamStringLoader</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Glide</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildStreamModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">buildModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">getLoaderFactory</span><span class=\"o\">().</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">GenericLoaderFactory</span> <span class=\"nf\">getLoaderFactory</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">loaderFactory</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>进入 GenericLoaderFactory.buildModelLoader 查看</p>\n<blockquote>\n  <p>留意一下这里的 modelClass == String.class , resourceClass == InputStream.class</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericLoaderFactory</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">getFactory</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nf\">getFactory</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        \t<span class=\"c1\">// 从 modelClassToResourceFactories map 里面读取 factory</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">registeredModelClass</span> <span class=\"o\">:</span> <span class=\"n\">modelClassToResourceFactories</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"o\">...</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">registeredModelClass</span><span class=\"o\">.</span><span class=\"na\">isAssignableFrom</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Class</span><span class=\"cm\">/*Y*/</span><span class=\"o\">,</span> <span class=\"nc\">ModelLoaderFactory</span><span class=\"cm\">/*T, Y*/</span><span class=\"o\">&gt;</span> <span class=\"n\">currentResourceToFactories</span> <span class=\"o\">=</span>\n                            <span class=\"n\">modelClassToResourceFactories</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">registeredModelClass</span><span class=\"o\">);</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentResourceToFactories</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">currentResourceToFactories</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">break</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>找下 modelClassToResourceFactories.put 看看在哪赋的值</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericLoaderFactory</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nf\">register</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">modelClassToResourceFactories</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">resourceToFactories</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"nc\">ModelLoaderFactory</span><span class=\"cm\">/*T, Y*/</span> <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">resourceToFactories</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">resourceClass</span><span class=\"o\">,</span> <span class=\"n\">factory</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">previous</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Glide</span>\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"kt\">void</span> <span class=\"nf\">register</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span> <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">factory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">loaderFactory</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span> <span class=\"n\">factory</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">Glide</span><span class=\"o\">(</span><span class=\"nc\">Engine</span> <span class=\"n\">engine</span><span class=\"o\">,</span> <span class=\"nc\">MemoryCache</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorFileLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamFileLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorStringLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"c1\">// 匹配到此 Factory</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamStringLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorUriLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamUriLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"no\">URL</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamUrlLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">GlideUrl</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">HttpUrlGlideUrlLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[].</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamByteArrayLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n\t<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>留意一下这里的 modelClass == String.class , resourceClass == InputStream.class</p>\n</blockquote>\n\n<p>可以看到在 Glide 单例构建的时候, 注册了一系列 Factory ,  根据上面我们传入的参数, 匹配到 <strong>StreamStringLoader.Factory</strong>, 回到上面我们开始找 Factory 的地方 ( <em>直接复制过来, 避免上下翻找文章</em> )</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericLoaderFactory</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">ModelLoaderFactory</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">getFactory</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// StreamStringLoader.Factory</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"nf\">build</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">GenericLoaderFactory</span> <span class=\"n\">factories</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">StreamStringLoader</span><span class=\"o\">(</span><span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// 装饰者模式, 传入另一个 ModelLoader</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">StreamStringLoader</span><span class=\"o\">(</span><span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">uriLoader</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>查看 StreamStringLoader ( 也是 ModelLoader 类型 ) 的构造函数, 得, 装饰了另外一个 ModelLoader 类型 ( 功能: <strong>数据下载</strong> )</li>\n  <li>另外一个是谁 ? 追踪 GenericLoaderFactory.buildModelLoader(Uri.class, InputStream.class)</li>\n  <li>又回到上面找 Factory 的步骤, 根据 Glide 构造函数里面的注册代码得, Factory == new StreamUriLoader.Factory()</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// StreamUriLoader.Factory</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"nf\">build</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">GenericLoaderFactory</span> <span class=\"n\">factories</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">StreamUriLoader</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">GlideUrl</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li>又来了, 找 Factory , 根据 Glide 的注册代码得, Factory == HttpUrlGlideUrlLoader.Factory</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// HttpUrlGlideUrlLoader.Factory</span>\n\n        <span class=\"kd\">public</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">GlideUrl</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"nf\">build</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">GenericLoaderFactory</span> <span class=\"n\">factories</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">HttpUrlGlideUrlLoader</span><span class=\"o\">(</span><span class=\"n\">modelCache</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<ul>\n  <li>找了 3 个 Factory, 梳理一下</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">//Glide</span>\n\t<span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">getLoaderFactory</span><span class=\"o\">().</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// StreamStringLoader.Factory</span>\n    <span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// StreamUriLoader.Factory</span>\n    <span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">GlideUrl</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// HttpUrlGlideUrlLoader.Factory</span>\n\t<span class=\"n\">uriLoader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HttpUrlGlideUrlLoader</span><span class=\"o\">(</span><span class=\"n\">modelCache</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// StreamStringLoader</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">StreamStringLoader</span><span class=\"o\">(</span><span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">uriLoader</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// StringLoader</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">StringLoader</span><span class=\"o\">(</span><span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">uriLoader</span> <span class=\"o\">=</span> <span class=\"n\">uriLoader</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>构建了 HttpUrlGlideUrlLoader 和 StreamStringLoader 实例, 并将 HttpUrlGlideUrlLoader 存放在 StreamStringLoader 实例的 uriLoader 变量中</li>\n</ul>\n\n<p>至此, <strong>StreamStringLoader&lt;String, InputStream&gt; 创建完毕</strong> 在其中保存了一个 HttpUrlGlideUrlLoader 实例\n<img src=\"https://img-blog.csdnimg.cn/20210313135738439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_10,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<h3 id=\"323-创建下载模块2\">[3.2.3] 创建下载模块2</h3>\n<p>FileDescriptorStringLoader , 这里回顾一下, 在 load 方法中有提到如下代码</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// RequestManager.load</span>\n\n\t<span class=\"kd\">private</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">loadGeneric</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamModelLoader</span> <span class=\"o\">=</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">buildStreamModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorModelLoader</span> <span class=\"o\">=</span>\n                <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">buildFileDescriptorModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">optionsApplier</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span>\n                <span class=\"k\">new</span> <span class=\"nc\">DrawableTypeRequest</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">,</span>\n                        <span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">requestTracker</span><span class=\"o\">,</span> <span class=\"n\">lifecycle</span><span class=\"o\">,</span> <span class=\"n\">optionsApplier</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>留意一下这里的 modelClass == String.class</p>\n</blockquote>\n\n<p>下面我们就来查看 FileDescriptorStringLoader 的创建</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Glide</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildFileDescriptorModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">buildModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Y</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"o\">...</span>\n         <span class=\"c1\">// modelClass == String.class , resourceClass == ParcelFileDescriptor.class</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Glide</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">getLoaderFactory</span><span class=\"o\">().</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"n\">modelClass</span><span class=\"o\">,</span> <span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">Glide</span><span class=\"o\">(</span><span class=\"nc\">Engine</span> <span class=\"n\">engine</span><span class=\"o\">,</span> <span class=\"nc\">MemoryCache</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorFileLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamFileLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamResourceLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"c1\">// 匹配到此 Factory</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorStringLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamStringLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorUriLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamUriLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"no\">URL</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamUrlLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">GlideUrl</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">HttpUrlGlideUrlLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n        <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[].</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamByteArrayLoader</span><span class=\"o\">.</span><span class=\"na\">Factory</span><span class=\"o\">());</span>\n\t<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>有了上面 StreamStringLoader 创建分析, 找 Factory 相信大家都很熟练了, 直接上结果</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// FileDescriptorStringLoader.Factory</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"nf\">build</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">GenericLoaderFactory</span> <span class=\"n\">factories</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">FileDescriptorStringLoader</span><span class=\"o\">(</span><span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// FileDescriptorUriLoader.Factory</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"nf\">build</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">GenericLoaderFactory</span> <span class=\"n\">factories</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">FileDescriptorUriLoader</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span>\n\t\t\t\t\t<span class=\"c1\">// 无匹配项, 返回 null</span>\n\t\t\t\t\t<span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"na\">buildModelLoader</span><span class=\"o\">(</span><span class=\"nc\">GlideUrl</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                    <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">));</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// FileDescriptorStringLoader extends StringLoader</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">FileDescriptorStringLoader</span><span class=\"o\">(</span><span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 这里 uriLoader == null</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">uriLoader</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// StringLoader</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">StringLoader</span><span class=\"o\">(</span><span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"nc\">Uri</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">uriLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">uriLoader</span> <span class=\"o\">=</span> <span class=\"n\">uriLoader</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>至此, <strong>FileDescriptorStringLoader&lt;String, ParcelFileDescriptor&gt;</strong> 创建完毕,</li>\n  <li>FileDescriptorStringLoader.uriLoader == FileDescriptorUriLoader</li>\n  <li>FileDescriptorUriLoader.uriLoader == null\n<img src=\"https://img-blog.csdnimg.cn/20210313161815572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n    <blockquote>\n      <p>FileDescriptorStringLoader 和 StreamStringLoader 是 ModelLoader ( <a href=\"https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">UML类图结构</a> )</p>\n    </blockquote>\n  </li>\n</ul>\n\n<p>2 个下载模块都创建完了, 我们继续跟进 DrawableTypeRequest 的创建</p>\n\n<h3 id=\"324-创建工具集合1\">[3.2.4] 创建工具集合1</h3>\n<p>创建工具集合  ChildLoadProvider , 接着 load() 的代码看</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DrawableTypeRequest</span>\n\n\t<span class=\"n\">buildProvider</span><span class=\"o\">(</span><span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                        <span class=\"nc\">GlideDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">FixedLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildProvider</span><span class=\"o\">(</span><span class=\"nc\">Glide</span> <span class=\"n\">glide</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcodedClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">transcoder</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 初始化转码工具</span>\n            <span class=\"n\">transcoder</span> <span class=\"o\">=</span> <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">buildTranscoder</span><span class=\"o\">(</span><span class=\"n\">resourceClass</span><span class=\"o\">,</span> <span class=\"n\">transcodedClass</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">dataLoadProvider</span> <span class=\"o\">=</span> <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">buildDataProvider</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                <span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n        <span class=\"nc\">ImageVideoModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">&gt;</span> <span class=\"n\">modelLoader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageVideoModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">&gt;(</span><span class=\"n\">streamModelLoader</span><span class=\"o\">,</span>\n                <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nc\">FixedLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;(</span><span class=\"n\">modelLoader</span><span class=\"o\">,</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span> <span class=\"n\">dataLoadProvider</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>注意\nresourceClass == GifBitmapWrapper.class , transcodedClass == GlideDrawable.class\nZ == GifBitmapWrapper.class , R == GlideDrawable.class\nA == String.class</p>\n\n  <ul>\n    <li>构建了一个转码工具 GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt;</li>\n    <li>构建 DataLoadProvider &lt; ImageVideoWrapper , GifBitmapWrapper &gt;</li>\n    <li>构建 ImageVideoModelLoader &lt; String &gt;</li>\n    <li>用上面的三个参数 <strong>构建 FixedLoadProvider &lt; String , ImageVideoWrapper , GifBitmapWrapper , GlideDrawable&gt;</strong>\n<img src=\"https://img-blog.csdnimg.cn/20210313140321453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_20,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n  </ul>\n</blockquote>\n\n<h4 id=\"构建工具集合转码1\">构建工具集合(转码1)</h4>\n<p>构建转码 ResourceTranscoder 实例</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DrawableTypeRequest</span>\n\t<span class=\"n\">transcoder</span> <span class=\"o\">=</span> <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">buildTranscoder</span><span class=\"o\">(</span><span class=\"n\">resourceClass</span><span class=\"o\">,</span> <span class=\"n\">transcodedClass</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// Glide</span>\n\t<span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildTranscoder</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">decodedClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcodedClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 看看 transcoderRegistry 在哪边注册的</span>\n        <span class=\"k\">return</span> <span class=\"n\">transcoderRegistry</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">decodedClass</span><span class=\"o\">,</span> <span class=\"n\">transcodedClass</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n   \t<span class=\"nc\">Glide</span><span class=\"o\">(</span><span class=\"nc\">Engine</span> <span class=\"n\">engine</span><span class=\"o\">,</span> <span class=\"nc\">MemoryCache</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">...</span>\n\t\t<span class=\"c1\">// 和下载模块一样, 也是在 Glide 单例实例化的时候注册的</span>\n\t\t<span class=\"n\">transcoderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">GlideBitmapDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nf\">GlideBitmapDrawableTranscoder</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getResources</span><span class=\"o\">(),</span> <span class=\"n\">bitmapPool</span><span class=\"o\">));</span>\n        <span class=\"n\">transcoderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nf\">GifBitmapWrapperDrawableTranscoder</span><span class=\"o\">(</span>\n                        <span class=\"k\">new</span> <span class=\"nf\">GlideBitmapDrawableTranscoder</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getResources</span><span class=\"o\">(),</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)));</span>\n\t\t<span class=\"o\">...</span>\n\t<span class=\"o\">}</span>\n\n<span class=\"c1\">// GifBitmapWrapperDrawableTranscoder</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">GifBitmapWrapperDrawableTranscoder</span><span class=\"o\">(</span>\n            <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">,</span> <span class=\"nc\">GlideBitmapDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">bitmapDrawableResourceTranscoder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">bitmapDrawableResourceTranscoder</span> <span class=\"o\">=</span> <span class=\"n\">bitmapDrawableResourceTranscoder</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideBitmapDrawableTranscoder</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">GlideBitmapDrawableTranscoder</span><span class=\"o\">(</span><span class=\"nc\">Resources</span> <span class=\"n\">resources</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resources</span> <span class=\"o\">=</span> <span class=\"n\">resources</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">bitmapPool</span> <span class=\"o\">=</span> <span class=\"n\">bitmapPool</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>最后构建了一个 GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt;实例;</li>\n  <li>并且包含一个 GlideBitmapDrawableTranscoder 实例, 作用是 GifBitmapWrapper 转换成 GlideDrawable\n<img src=\"https://img-blog.csdnimg.cn/20210313140440482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n\n<h4 id=\"构建工具集合编解码1\">构建工具集合(编/解码1)</h4>\n<p>构建工具集合(子类) ImageVideoGifDrawableLoadProvider &lt; ImageVideoWrapper , GifBitmapWrapper &gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DrawableTypeRequest</span>\n\n\t<span class=\"cm\">/* resourceClass == GifBitmapWrapper.class */</span>\n\t<span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">dataLoadProvider</span> <span class=\"o\">=</span> <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">buildDataProvider</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                <span class=\"n\">resourceClass</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// Glide</span>\n\t<span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildDataProvider</span><span class=\"o\">(</span><span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">dataClass</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">decodedClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 似曾相识? 没错也是在 Glide 单例初始化的时候注册的</span>\n        <span class=\"k\">return</span> <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">dataClass</span><span class=\"o\">,</span> <span class=\"n\">decodedClass</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">Glide</span><span class=\"o\">(</span><span class=\"nc\">Engine</span> <span class=\"n\">engine</span><span class=\"o\">,</span> <span class=\"nc\">MemoryCache</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      \t<span class=\"o\">...</span>\n        <span class=\"n\">dataLoadProviderRegistry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DataLoadProviderRegistry</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">StreamBitmapDataLoadProvider</span> <span class=\"n\">streamBitmapLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">StreamBitmapDataLoadProvider</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n        <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">streamBitmapLoadProvider</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">FileDescriptorBitmapDataLoadProvider</span> <span class=\"n\">fileDescriptorLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">FileDescriptorBitmapDataLoadProvider</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n        <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorLoadProvider</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">ImageVideoDataLoadProvider</span> <span class=\"n\">imageVideoDataLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">ImageVideoDataLoadProvider</span><span class=\"o\">(</span><span class=\"n\">streamBitmapLoadProvider</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorLoadProvider</span><span class=\"o\">);</span>\n        <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">GifDrawableLoadProvider</span> <span class=\"n\">gifDrawableLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">GifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n        <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">GifDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// 匹配到这个</span>\n        <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nf\">ImageVideoGifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">,</span> <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">));</span>\n\n        <span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">InputStream</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">StreamFileDataLoadProvider</span><span class=\"o\">());</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ImageVideoGifDrawableLoadProvider</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">ImageVideoGifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">bitmapProvider</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">InputStream</span><span class=\"o\">,</span> <span class=\"nc\">GifDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">gifProvider</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">GifBitmapWrapperResourceDecoder</span> <span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResourceDecoder</span><span class=\"o\">(</span>\n                <span class=\"n\">bitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">gifProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">bitmapPool</span>\n        <span class=\"o\">);</span>\n        <span class=\"c1\">// 解码工具</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileToStreamDecoder</span><span class=\"o\">&lt;</span><span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">&gt;(</span><span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperStreamResourceDecoder</span><span class=\"o\">(</span><span class=\"n\">decoder</span><span class=\"o\">));</span>\n        <span class=\"n\">sourceDecoder</span> <span class=\"o\">=</span> <span class=\"n\">decoder</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 编码工具</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResourceEncoder</span><span class=\"o\">(</span><span class=\"n\">bitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getEncoder</span><span class=\"o\">(),</span> <span class=\"n\">gifProvider</span><span class=\"o\">.</span><span class=\"na\">getEncoder</span><span class=\"o\">());</span>\n\n        <span class=\"c1\">//TODO: what about the gif provider?</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"n\">bitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceEncoder</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>DataLoadProvider和我们最终需要创建的ChildLoadProvider是什么关系?  <a href=\"https://img-blog.csdnimg.cn/20210313124817824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">UML类图参考</a></p>\n</blockquote>\n\n<ol>\n  <li>初始化解码工具 cacheDecoder: FileToStreamDecoder , sourceDecoder: GifBitmapWrapperResourceDecoder</li>\n  <li>初始化编码工具 encoder: GifBitmapWrapperResourceEncoder , sourceEncoder: bitmapProvider.getSourceEncoder()</li>\n</ol>\n\n<p>看看具体都是怎么初始化的</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Glide 构造函数</span>\n\t<span class=\"nc\">StreamBitmapDataLoadProvider</span> <span class=\"n\">streamBitmapLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">StreamBitmapDataLoadProvider</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n    <span class=\"nc\">FileDescriptorBitmapDataLoadProvider</span> <span class=\"n\">fileDescriptorLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">FileDescriptorBitmapDataLoadProvider</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n\t<span class=\"nc\">ImageVideoDataLoadProvider</span> <span class=\"n\">imageVideoDataLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">ImageVideoDataLoadProvider</span><span class=\"o\">(</span><span class=\"n\">streamBitmapLoadProvider</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorLoadProvider</span><span class=\"o\">);</span>\n    <span class=\"o\">...</span>\n    <span class=\"nc\">GifDrawableLoadProvider</span> <span class=\"n\">gifDrawableLoadProvider</span> <span class=\"o\">=</span>\n                <span class=\"k\">new</span> <span class=\"nf\">GifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n    <span class=\"o\">...</span>\n\t<span class=\"n\">dataLoadProviderRegistry</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span>\n                <span class=\"k\">new</span> <span class=\"nf\">ImageVideoGifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">,</span> <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// StreamBitmapDataLoadProvider 构造</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">StreamBitmapDataLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamEncoder</span><span class=\"o\">();</span>\n        <span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamBitmapDecoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BitmapEncoder</span><span class=\"o\">();</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileToStreamDecoder</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;(</span><span class=\"n\">decoder</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// FileDescriptorBitmapDataLoadProvider 构造</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">FileDescriptorBitmapDataLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileToStreamDecoder</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;(</span><span class=\"k\">new</span> <span class=\"nc\">StreamBitmapDecoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">));</span>\n        <span class=\"n\">sourceDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorBitmapDecoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BitmapEncoder</span><span class=\"o\">();</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"nc\">NullEncoder</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ImageVideoDataLoadProvider 构造</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">ImageVideoDataLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">InputStream</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">streamBitmapProvider</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorBitmapProvider</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">streamBitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getEncoder</span><span class=\"o\">();</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageVideoWrapperEncoder</span><span class=\"o\">(</span><span class=\"n\">streamBitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceEncoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">fileDescriptorBitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceEncoder</span><span class=\"o\">());</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"n\">streamBitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getCacheDecoder</span><span class=\"o\">();</span>\n        <span class=\"n\">sourceDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageVideoBitmapDecoder</span><span class=\"o\">(</span><span class=\"n\">streamBitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">fileDescriptorBitmapProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GifDrawableLoadProvider 构造</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">GifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifResourceDecoder</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileToStreamDecoder</span><span class=\"o\">&lt;</span><span class=\"nc\">GifDrawable</span><span class=\"o\">&gt;(</span><span class=\"n\">decoder</span><span class=\"o\">);</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifResourceEncoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamEncoder</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>根据上面的代码我们来换算一下 ImageVideoGifDrawableLoadProvider 的构造</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// ImageVideoGifDrawableLoadProvider 构造函数</span>\n\n\t<span class=\"cm\">/*\n\t\tbitmapProvider &gt;&gt;&gt; imageVideoDataLoadProvider\n\t\t;\n\t\tgifProvider &gt;&gt;&gt; gifDrawableLoadProvider\n\t*/</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">ImageVideoGifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">InputStream</span><span class=\"o\">,</span> <span class=\"nc\">GifDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">GifBitmapWrapperResourceDecoder</span> <span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResourceDecoder</span><span class=\"o\">(</span>\n                <span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">(),</span>\n                <span class=\"n\">bitmapPool</span>\n        <span class=\"o\">);</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileToStreamDecoder</span><span class=\"o\">&lt;</span><span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">&gt;(</span><span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperStreamResourceDecoder</span><span class=\"o\">(</span><span class=\"n\">decoder</span><span class=\"o\">));</span>\n        <span class=\"n\">sourceDecoder</span> <span class=\"o\">=</span> <span class=\"n\">decoder</span><span class=\"o\">;</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResourceEncoder</span><span class=\"o\">(</span><span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">.</span><span class=\"na\">getEncoder</span><span class=\"o\">(),</span> <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">.</span><span class=\"na\">getEncoder</span><span class=\"o\">());</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceEncoder</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"cm\">/*\n\t\timageVideoDataLoadProvider.getSourceDecoder\n\t\t&gt;&gt;&gt;\n\t\tnew ImageVideoBitmapDecoder(streamBitmapProvider.getSourceDecoder(),fileDescriptorBitmapProvider.getSourceDecoder())\n        &gt;&gt;&gt;\n        new ImageVideoBitmapDecoder(new StreamBitmapDecoder(bitmapPool, decodeFormat), new FileDescriptorBitmapDecoder(bitmapPool, decodeFormat))\n\t\t;\n\t\tgifDrawableLoadProvider.getSourceDecoder() &gt;&gt;&gt; new GifResourceDecoder(context, bitmapPool)\n\t\t;\n\t\timageVideoDataLoadProvider.getEncoder() &gt;&gt;&gt; streamBitmapProvider.getEncoder() &gt;&gt;&gt; new BitmapEncoder()\n\t\t;\n\t\tgifDrawableLoadProvider.getEncoder() &gt;&gt;&gt; new GifResourceEncoder(bitmapPool)\n\t\t;\n\t\timageVideoDataLoadProvider.getSourceEncoder()\n\t\t&gt;&gt;&gt;\n\t\tnew ImageVideoWrapperEncoder(streamBitmapProvider.getSourceEncoder(), fileDescriptorBitmapProvider.getSourceEncoder())\n        &gt;&gt;&gt;\n        new ImageVideoWrapperEncoder(new StreamEncoder(), NullEncoder.get())\n\t*/</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">ImageVideoGifDrawableLoadProvider</span><span class=\"o\">(</span><span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">imageVideoDataLoadProvider</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">InputStream</span><span class=\"o\">,</span> <span class=\"nc\">GifDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">gifDrawableLoadProvider</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">GifBitmapWrapperResourceDecoder</span> <span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResourceDecoder</span><span class=\"o\">(</span>\n                <span class=\"k\">new</span> <span class=\"nf\">ImageVideoBitmapDecoder</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">StreamBitmapDecoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">),</span> <span class=\"k\">new</span> <span class=\"nc\">FileDescriptorBitmapDecoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)),</span>\n                <span class=\"k\">new</span> <span class=\"nf\">GifResourceDecoder</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">),</span>\n                <span class=\"n\">bitmapPool</span>\n        <span class=\"o\">);</span>\n        <span class=\"n\">cacheDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileToStreamDecoder</span><span class=\"o\">&lt;</span><span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">&gt;(</span><span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperStreamResourceDecoder</span><span class=\"o\">(</span><span class=\"n\">decoder</span><span class=\"o\">));</span>\n        <span class=\"n\">sourceDecoder</span> <span class=\"o\">=</span> <span class=\"n\">decoder</span><span class=\"o\">;</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResourceEncoder</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">BitmapEncoder</span><span class=\"o\">(),</span> <span class=\"k\">new</span> <span class=\"nc\">GifResourceEncoder</span><span class=\"o\">(</span><span class=\"n\">bitmapPool</span><span class=\"o\">));</span>\n        <span class=\"n\">sourceEncoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageVideoWrapperEncoder</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">StreamEncoder</span><span class=\"o\">(),</span> <span class=\"nc\">NullEncoder</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>总结一下, 看看 ImageVideoGifDrawableLoadProvider 都初始化了哪些内容</p>\n<ul>\n  <li>FileToStreamDecoder 存储在 cacheDecoder</li>\n  <li>GifBitmapWrapperStreamResourceDecoder 存储在 sourceDecoder</li>\n  <li>GifBitmapWrapperResourceEncoder 存储在 encoder</li>\n  <li>ImageVideoWrapperEncoder 存储在  sourceEncoder\n<img src=\"https://img-blog.csdnimg.cn/20210313164653242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n\n<p>回到 <strong>[3.2.4] ChildLoadProvider 工具集合的创建</strong> , 还差个工具没有构建 ImageVideoModelLoader &lt; String &gt;</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DrawableTypeRequest</span>\n\n\t<span class=\"n\">buildProvider</span><span class=\"o\">(</span><span class=\"n\">glide</span><span class=\"o\">,</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">FixedLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildProvider</span><span class=\"o\">(</span><span class=\"nc\">Glide</span> <span class=\"n\">glide</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamModelLoader</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">resourceClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcodedClass</span><span class=\"o\">,</span>\n            <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"nc\">ImageVideoModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">&gt;</span> <span class=\"n\">modelLoader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageVideoModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">&gt;(</span><span class=\"n\">streamModelLoader</span><span class=\"o\">,</span>\n                <span class=\"n\">fileDescriptorModelLoader</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>可能之前的创建过程大家已经忘记了, 需要补充的是:</p>\n  <ul>\n    <li>streamModelLoader 可以参考目录 <strong>创建下载模块1</strong></li>\n    <li>fileDescriptorModelLoader 可以参考 <strong>创建下载模块2</strong></li>\n    <li>A 是 <strong>String.class</strong></li>\n  </ul>\n</blockquote>\n\n<h4 id=\"构建工具集合下载3\">构建工具集合(下载3)</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre> <span class=\"c1\">// ImageVideoModelLoader</span>\n\n \t<span class=\"kd\">public</span> <span class=\"nf\">ImageVideoModelLoader</span><span class=\"o\">(</span><span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"n\">streamLoader</span><span class=\"o\">,</span>\n            <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"nc\">ParcelFileDescriptor</span><span class=\"o\">&gt;</span> <span class=\"n\">fileDescriptorLoader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">streamLoader</span> <span class=\"o\">=</span> <span class=\"n\">streamLoader</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">fileDescriptorLoader</span> <span class=\"o\">=</span> <span class=\"n\">fileDescriptorLoader</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>所以最后创建的是 ImageVideoModelLoader &lt; String &gt; , 其下封装了两个之前创建的下载模块</p>\n<ul>\n  <li>下载模块1 StreamStringLoader</li>\n  <li>下载模块2 FileDescriptorStringLoader\n<img src=\"https://img-blog.csdnimg.cn/20210313141039582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n\n<h2 id=\"33-load-小结\">[3.3] load() 小结</h2>\n<p>load() 从头至尾只构建了 <strong>Request(用户)</strong> 这一个实例 , 并把 <strong>一系列工具</strong> 打包进这个实例</p>\n<ol>\n  <li>创建: Request(用户) 实例 , <a href=\"https://img-blog.csdnimg.cn/20210311195313868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">GenericRequestBuilder 类型</a></li>\n  <li>打包: 下载工具1 ( <a href=\"https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">ModelLoader 类型</a> )</li>\n  <li>打包: 下载工具2 ( <a href=\"https://img-blog.csdnimg.cn/20210311202331373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">ModelLoader 类型</a> )</li>\n  <li>打包: 工具集合1 ( <a href=\"https://img-blog.csdnimg.cn/20210313142352405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">DataLoadProvider 类型</a> )\n    a. 打包: 转码1 ( GifBitmapWrapperDrawableTranscoder 类型 )\n    b. 打包: 编/解码1 ( ImageVideoGifDrawableLoadProvider &lt; ImageVideoWrapper , GifBitmapWrapper &gt; 类型 )\n    c. 打包: 下载3 ( ImageVideoModelLoader &lt; String &gt; 类型)\n<img src=\"https://img-blog.csdnimg.cn/20210313143350768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n现在再来看这张流程图解, 是不是清晰一点?\n<img src=\"https://img-blog.csdnimg.cn/20210313143433730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_20,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n\n<h2 id=\"34-into\">[3.4] into()</h2>\n<p><strong>工具</strong>都备齐了, 下面开始走 <strong>构建Request(真实)»下载 »&gt; 解码 »&gt; 转码 »&gt; 加载</strong> 流程\n<img src=\"https://img-blog.csdnimg.cn/20210313143806550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n\n<h3 id=\"341-构建request真实\">[3.4.1] 构建Request(真实)</h3>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequestBuilder (Request用户实例)</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"nf\">into</span><span class=\"o\">(</span><span class=\"nc\">ImageView</span> <span class=\"n\">view</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 前文创建 Request(用户) 提过 , GlideDrawable.class = transcodeClass</span>\n        <span class=\"k\">return</span> <span class=\"nf\">into</span><span class=\"o\">(</span><span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">buildImageViewTarget</span><span class=\"o\">(</span><span class=\"n\">view</span><span class=\"o\">,</span> <span class=\"n\">transcodeClass</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Glide</span>\n\t<span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildImageViewTarget</span><span class=\"o\">(</span><span class=\"nc\">ImageView</span> <span class=\"n\">imageView</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcodedClass</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">imageViewTargetFactory</span><span class=\"o\">.</span><span class=\"na\">buildTarget</span><span class=\"o\">(</span><span class=\"n\">imageView</span><span class=\"o\">,</span> <span class=\"n\">transcodedClass</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ImageViewTargetFactory</span>\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">buildTarget</span><span class=\"o\">(</span><span class=\"nc\">ImageView</span> <span class=\"n\">view</span><span class=\"o\">,</span> <span class=\"nc\">Class</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">clazz</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">GlideDrawable</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">isAssignableFrom</span><span class=\"o\">(</span><span class=\"n\">clazz</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;)</span> <span class=\"k\">new</span> <span class=\"nc\">GlideDrawableImageViewTarget</span><span class=\"o\">(</span><span class=\"n\">view</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>创建了一个 GlideDrawableImageViewTarget &lt; GlideDrawable &gt; 实例 , 再往下跟进 into</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequestBuilder (Request用户实例)</span>\n\n\t<span class=\"c1\">// TranscodeType = GlideDrawable</span>\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">Y</span> <span class=\"kd\">extends</span> <span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;&gt;</span> <span class=\"no\">Y</span> <span class=\"nf\">into</span><span class=\"o\">(</span><span class=\"no\">Y</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 这里开始构建 Request(真实)!!!</span>\n        <span class=\"nc\">Request</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">buildRequest</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">setRequest</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">);</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"n\">requestTracker</span><span class=\"o\">.</span><span class=\"na\">runRequest</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">target</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Request</span> <span class=\"nf\">buildRequest</span><span class=\"o\">(</span><span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nf\">buildRequestRecursive</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Request</span> <span class=\"nf\">buildRequestRecursive</span><span class=\"o\">(</span><span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"nc\">ThumbnailRequestCoordinator</span> <span class=\"n\">parentCoordinator</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nf\">obtainRequest</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"n\">sizeMultiplier</span><span class=\"o\">,</span> <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"n\">parentCoordinator</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Request</span> <span class=\"nf\">obtainRequest</span><span class=\"o\">(</span><span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"kt\">float</span> <span class=\"n\">sizeMultiplier</span><span class=\"o\">,</span> <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestCoordinator</span> <span class=\"n\">requestCoordinator</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nc\">GenericRequest</span><span class=\"o\">.</span><span class=\"na\">obtain</span><span class=\"o\">(</span>\n                <span class=\"n\">loadProvider</span><span class=\"o\">,</span>\n                <span class=\"n\">model</span><span class=\"o\">,</span>\n                <span class=\"n\">signature</span><span class=\"o\">,</span>\n                <span class=\"n\">context</span><span class=\"o\">,</span>\n                <span class=\"n\">priority</span><span class=\"o\">,</span>\n                <span class=\"n\">target</span><span class=\"o\">,</span>\n                <span class=\"n\">sizeMultiplier</span><span class=\"o\">,</span>\n                <span class=\"n\">placeholderDrawable</span><span class=\"o\">,</span>\n                <span class=\"n\">placeholderId</span><span class=\"o\">,</span>\n                <span class=\"n\">errorPlaceholder</span><span class=\"o\">,</span>\n                <span class=\"n\">errorId</span><span class=\"o\">,</span>\n                <span class=\"n\">fallbackDrawable</span><span class=\"o\">,</span>\n                <span class=\"n\">fallbackResource</span><span class=\"o\">,</span>\n                <span class=\"n\">requestListener</span><span class=\"o\">,</span>\n                <span class=\"n\">requestCoordinator</span><span class=\"o\">,</span>\n                <span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">getEngine</span><span class=\"o\">(),</span>\n                <span class=\"n\">transformation</span><span class=\"o\">,</span>\n                <span class=\"n\">transcodeClass</span><span class=\"o\">,</span>\n                <span class=\"n\">isCacheable</span><span class=\"o\">,</span>\n                <span class=\"n\">animationFactory</span><span class=\"o\">,</span>\n                <span class=\"n\">overrideWidth</span><span class=\"o\">,</span>\n                <span class=\"n\">overrideHeight</span><span class=\"o\">,</span>\n                <span class=\"n\">diskCacheStrategy</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>以上, Request(真实) ( <a href=\"https://img-blog.csdnimg.cn/20210313145538902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5\">GenericRequest 类型</a> ) 构建完毕 , 可以看出它包含了所有 Glide 加载所需的工具 , 参数等\n<img src=\"https://img-blog.csdnimg.cn/20210313145821672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<h3 id=\"342-下载\">[3.4.2] 下载</h3>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequestBuilder (Request用户实例)</span>\n\n\t<span class=\"c1\">// TranscodeType = GlideDrawable</span>\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">Y</span> <span class=\"kd\">extends</span> <span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;&gt;</span> <span class=\"no\">Y</span> <span class=\"nf\">into</span><span class=\"o\">(</span><span class=\"no\">Y</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 这里开始构建 Request(真实)!!!</span>\n        <span class=\"nc\">Request</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">buildRequest</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">setRequest</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">);</span>\n        <span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"na\">addListener</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 开始任务啦</span>\n        <span class=\"n\">requestTracker</span><span class=\"o\">.</span><span class=\"na\">runRequest</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">target</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// RequestTracker</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">runRequest</span><span class=\"o\">(</span><span class=\"nc\">Request</span> <span class=\"n\">request</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">begin</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>已知 Request 是 GenericRequest 类型</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">begin</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Util</span><span class=\"o\">.</span><span class=\"na\">isValidDimensions</span><span class=\"o\">(</span><span class=\"n\">overrideWidth</span><span class=\"o\">,</span> <span class=\"n\">overrideHeight</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 最终走这个分支</span>\n            <span class=\"n\">onSizeReady</span><span class=\"o\">(</span><span class=\"n\">overrideWidth</span><span class=\"o\">,</span> <span class=\"n\">overrideHeight</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 异步获取 size , 最终回调 onSizeReady 方法</span>\n            <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\t\t<span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>Glide 会按照 ImageView 控件的大小来计算所需要的图片的大小, 尽量减少内存开支\n如果对于 异步计算界面 ImageView 组件大小感兴趣 , 可以看看这篇文章 <a href=\"/2021/03/20/markdown-glide3.7.0_5/index.html\">Android Glide 3.7.0 源码解析(五) , 如何获得ImageView的宽高</a></p>\n</blockquote>\n\n<p>下面进入 onSizeReady 继续</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onSizeReady</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">round</span><span class=\"o\">(</span><span class=\"n\">sizeMultiplier</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"o\">);</span>\n        <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">round</span><span class=\"o\">(</span><span class=\"n\">sizeMultiplier</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelLoader</span> <span class=\"o\">=</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getModelLoader</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">dataFetcher</span> <span class=\"o\">=</span> <span class=\"n\">modelLoader</span><span class=\"o\">.</span><span class=\"na\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span> <span class=\"o\">=</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getTranscoder</span><span class=\"o\">();</span>\n\n        <span class=\"n\">loadedFromMemoryCache</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"c1\">// 这里</span>\n        <span class=\"n\">loadStatus</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"na\">load</span><span class=\"o\">(</span><span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">dataFetcher</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n                <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"n\">loadedFromMemoryCache</span> <span class=\"o\">=</span> <span class=\"n\">resource</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>可以翻看 <strong>Request(真实)的构建</strong>得, engine 是</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">//</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">Request</span> <span class=\"nf\">obtainRequest</span><span class=\"o\">(</span><span class=\"nc\">Target</span><span class=\"o\">&lt;</span><span class=\"nc\">TranscodeType</span><span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"kt\">float</span> <span class=\"n\">sizeMultiplier</span><span class=\"o\">,</span> <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span>\n            <span class=\"nc\">RequestCoordinator</span> <span class=\"n\">requestCoordinator</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nc\">GenericRequest</span><span class=\"o\">.</span><span class=\"na\">obtain</span><span class=\"o\">(</span>\n        \t\t\t\t<span class=\"o\">...</span>\n\t\t\t\t\t\t<span class=\"n\">glide</span><span class=\"o\">.</span><span class=\"na\">getEngine</span><span class=\"o\">()</span>\n\t\t\t\t\t\t<span class=\"o\">...</span>\n\t\t\t\t\t\t<span class=\"o\">);</span>\n\n<span class=\"c1\">// Glide</span>\n\t<span class=\"nc\">Engine</span> <span class=\"nf\">getEngine</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">engine</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"nc\">Glide</span><span class=\"o\">(</span><span class=\"nc\">Engine</span> <span class=\"n\">engine</span><span class=\"o\">,</span> <span class=\"nc\">MemoryCache</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"nc\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"nc\">DecodeFormat</span> <span class=\"n\">decodeFormat</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">engine</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideBuilder</span>\n\t<span class=\"nc\">Glide</span> <span class=\"nf\">createGlide</span><span class=\"o\">(){</span>\n\t\t<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Engine</span><span class=\"o\">(</span><span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"n\">diskCacheFactory</span><span class=\"o\">,</span> <span class=\"n\">diskCacheService</span><span class=\"o\">,</span> <span class=\"n\">sourceService</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Glide</span><span class=\"o\">(</span><span class=\"n\">engine</span><span class=\"o\">,</span> <span class=\"n\">memoryCache</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>下面进入 Engine 的 load 方法</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// Engine</span>\n\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">LoadStatus</span> <span class=\"nf\">load</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">Transformation</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n            <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"nc\">DiskCacheStrategy</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"nc\">EngineJob</span> <span class=\"n\">engineJob</span> <span class=\"o\">=</span> <span class=\"n\">engineJobFactory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">);</span>\n        <span class=\"nc\">DecodeJob</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">decodeJob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DecodeJob</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"n\">transformation</span><span class=\"o\">,</span>\n                <span class=\"n\">transcoder</span><span class=\"o\">,</span> <span class=\"n\">diskCacheProvider</span><span class=\"o\">,</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"n\">priority</span><span class=\"o\">);</span>\n        <span class=\"nc\">EngineRunnable</span> <span class=\"n\">runnable</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EngineRunnable</span><span class=\"o\">(</span><span class=\"n\">engineJob</span><span class=\"o\">,</span> <span class=\"n\">decodeJob</span><span class=\"o\">,</span> <span class=\"n\">priority</span><span class=\"o\">);</span>\n        <span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">engineJob</span><span class=\"o\">);</span>\n        <span class=\"n\">engineJob</span><span class=\"o\">.</span><span class=\"na\">addCallback</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 调用 EngineRunnable.run</span>\n        <span class=\"n\">engineJob</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">(</span><span class=\"n\">runnable</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>根据 <strong>构建的 Request ( 用户 )</strong> FixedLoadProvider &lt; String , ImageVideoWrapper , GifBitmapWrapper , GlideDrawable&gt; 得</p>\n  <ul>\n    <li>T : ImageVideoWrapper</li>\n    <li>Z : GifBitmapWrapper</li>\n  </ul>\n\n  <p>根据 <strong>创建的转码1</strong> GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt; 得</p>\n  <ul>\n    <li>R : GlideDrawable</li>\n  </ul>\n</blockquote>\n\n<p>最终走到 EngineRunnable 的 run 方法</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// EngineRunnable</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">decode</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">decodeFromSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">decodeJob</span><span class=\"o\">.</span><span class=\"na\">decodeFromSource</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// DecodeJob</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n\t    <span class=\"c1\">// 分支1, 下载 &amp;&amp; 解码</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeSource</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 分支2, 转码</span>\n        <span class=\"k\">return</span> <span class=\"nf\">transformEncodeAndTranscode</span><span class=\"o\">(</span><span class=\"n\">decoded</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// 此小节我们先分析 下载</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"kd\">final</span> <span class=\"no\">A</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeFromSourceData</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n        <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">cleanup</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">decoded</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<blockquote>\n  <p>注意: 线程已切换到子线程</p>\n</blockquote>\n\n<p>来看看 fetcher 在哪边赋的值</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onSizeReady</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">ModelLoader</span><span class=\"o\">&lt;</span><span class=\"no\">A</span><span class=\"o\">,</span> <span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">modelLoader</span> <span class=\"o\">=</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getModelLoader</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">dataFetcher</span> <span class=\"o\">=</span> <span class=\"n\">modelLoader</span><span class=\"o\">.</span><span class=\"na\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"c1\">// 这里</span>\n        <span class=\"n\">loadStatus</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"na\">load</span><span class=\"o\">(...,</span> <span class=\"n\">dataFetcher</span><span class=\"o\">...);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n\t<span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">LoadStatus</span> <span class=\"nf\">load</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">Transformation</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n            <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"nc\">DiskCacheStrategy</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 这里</span>\n        <span class=\"nc\">DecodeJob</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">decodeJob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DecodeJob</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;(...,</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span> <span class=\"o\">...);</span>\n\t\t<span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>根据 <strong>创建的集合工具1中的下载3</strong> ImageVideoModelLoader &lt; String &gt; 得, 调用的是ImageVideoModelLoader.getResourceFetcher</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// ImageVideoModelLoader</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">&gt;</span> <span class=\"nf\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"no\">A</span> <span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">ImageVideoFetcher</span><span class=\"o\">(</span><span class=\"n\">streamFetcher</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptorFetcher</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>根据<strong>创建下载3</strong>过程得知, streamFetcher 是 <strong>下载1</strong> , fileDescriptorFetcher 是 <strong>下载2</strong> ,</li>\n  <li>那么 fetcher 是 <strong>ImageVideoFetcher</strong></li>\n</ul>\n\n<p>现在再回到调用 fetcher 的部分</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DecodeJob</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">//</span>\n        <span class=\"kd\">final</span> <span class=\"no\">A</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeFromSourceData</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n        <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">cleanup</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">decoded</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ImageVideoFetcher</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">ImageVideoWrapper</span> <span class=\"nf\">loadData</span><span class=\"o\">(</span><span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n            <span class=\"nc\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">...</span>\n            <span class=\"c1\">// 调用下载1的getResourceFetcher.loadData</span>\n            <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"n\">streamFetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n            <span class=\"o\">...</span>\n            <span class=\"nc\">ParcelFileDescriptor</span> <span class=\"n\">fileDescriptor</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">...</span>\n            <span class=\"c1\">// 调用下载2的getResourceFetcher.loadData</span>\n            <span class=\"n\">fileDescriptor</span> <span class=\"o\">=</span> <span class=\"n\">fileDescriptorFetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n            <span class=\"o\">....</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">ImageVideoWrapper</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptor</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>先看 <strong>下载1</strong>的 loadData</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// StreamStringLoader</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Uri</span> <span class=\"n\">uri</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">TextUtils</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"s\">\"/\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">toFileUri</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getScheme</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">toFileUri</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\t\t<span class=\"c1\">// uriLoader 是一个 HttpUrlGlideUrlLoader 下载1构建的时候有提到</span>\n        <span class=\"k\">return</span> <span class=\"n\">uriLoader</span><span class=\"o\">.</span><span class=\"na\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// HttpUrlGlideUrlLoader</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"nc\">InputStream</span><span class=\"o\">&gt;</span> <span class=\"nf\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"nc\">GlideUrl</span> <span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">HttpUrlFetcher</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// HttpUrlFetcher</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">InputStream</span> <span class=\"nf\">loadData</span><span class=\"o\">(</span><span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">loadDataWithRedirects</span><span class=\"o\">(</span><span class=\"n\">glideUrl</span><span class=\"o\">.</span><span class=\"na\">toURL</span><span class=\"o\">(),</span> <span class=\"mi\">0</span> <span class=\"cm\">/*redirects*/</span><span class=\"o\">,</span> <span class=\"kc\">null</span> <span class=\"cm\">/*lastUrl*/</span><span class=\"o\">,</span> <span class=\"n\">glideUrl</span><span class=\"o\">.</span><span class=\"na\">getHeaders</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"c1\">// 终于找到了, 一个标准的 HttpURLConnection 下载</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">InputStream</span> <span class=\"nf\">loadDataWithRedirects</span><span class=\"o\">(</span><span class=\"no\">URL</span> <span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">redirects</span><span class=\"o\">,</span> <span class=\"no\">URL</span> <span class=\"n\">lastUrl</span><span class=\"o\">,</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">headers</span><span class=\"o\">)</span>\n            <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">urlConnection</span> <span class=\"o\">=</span> <span class=\"n\">connectionFactory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">headerEntry</span> <span class=\"o\">:</span> <span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n          <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">addRequestProperty</span><span class=\"o\">(</span><span class=\"n\">headerEntry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">(),</span> <span class=\"n\">headerEntry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">setConnectTimeout</span><span class=\"o\">(</span><span class=\"mi\">2500</span><span class=\"o\">);</span>\n        <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">setReadTimeout</span><span class=\"o\">(</span><span class=\"mi\">2500</span><span class=\"o\">);</span>\n        <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">setUseCaches</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n        <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">setDoInput</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// Connect explicitly to avoid errors in decoders if connection fails.</span>\n        <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">connect</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isCancelled</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">statusCode</span> <span class=\"o\">=</span> <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">getResponseCode</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">statusCode</span> <span class=\"o\">/</span> <span class=\"mi\">100</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 读取流</span>\n            <span class=\"k\">return</span> <span class=\"nf\">getStreamForSuccessfulRequest</span><span class=\"o\">(</span><span class=\"n\">urlConnection</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">InputStream</span> <span class=\"nf\">getStreamForSuccessfulRequest</span><span class=\"o\">(</span><span class=\"nc\">HttpURLConnection</span> <span class=\"n\">urlConnection</span><span class=\"o\">)</span>\n            <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">urlConnection</span><span class=\"o\">.</span><span class=\"na\">getInputStream</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">stream</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li><strong>下载1</strong>的下载任务看完, 就是一个标准的 HttpURLConnection 下载</li>\n  <li>下面来看看 <strong>下载2</strong> 都干了啥?</li>\n</ul>\n\n<p><strong>下载2</strong>类型是 <strong>FileDescriptorStringLoader&lt;String, ParcelFileDescriptor&gt;</strong>\n<img src=\"https://img-blog.csdnimg.cn/2021031316185379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// FileDescriptorStringLoader</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Uri</span> <span class=\"n\">uri</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">TextUtils</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"s\">\"/\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">toFileUri</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getScheme</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">toFileUri</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">uriLoader</span><span class=\"o\">.</span><span class=\"na\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// FileDescriptorUriLoader</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">final</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"nc\">Uri</span> <span class=\"n\">model</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">getScheme</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isLocalUri</span><span class=\"o\">(</span><span class=\"n\">scheme</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">AssetUriParser</span><span class=\"o\">.</span><span class=\"na\">isAssetUri</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">String</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nc\">AssetUriParser</span><span class=\"o\">.</span><span class=\"na\">toAssetPath</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">);</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">getAssetPathFetcher</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">path</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">getLocalUriFetcher</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">model</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">urlLoader</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"s\">\"http\"</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">scheme</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"s\">\"https\"</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">scheme</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">urlLoader</span><span class=\"o\">.</span><span class=\"na\">getResourceFetcher</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">GlideUrl</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()),</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>得 <strong>下载2</strong>的 loaData 最后返回 null , 因为我们要下载的是一个网络资源</li>\n  <li>回到上面<strong>下载3</strong> 的下载</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// ImageVideoFetcher</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">ImageVideoWrapper</span> <span class=\"nf\">loadData</span><span class=\"o\">(</span><span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n            <span class=\"nc\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">...</span>\n            <span class=\"c1\">// 调用下载1的getResourceFetcher.loadData</span>\n            <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"n\">streamFetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n            <span class=\"o\">...</span>\n            <span class=\"nc\">ParcelFileDescriptor</span> <span class=\"n\">fileDescriptor</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">...</span>\n            <span class=\"c1\">// 调用下载2的getResourceFetcher.loadData</span>\n            <span class=\"n\">fileDescriptor</span> <span class=\"o\">=</span> <span class=\"n\">fileDescriptorFetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n            <span class=\"o\">....</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">ImageVideoWrapper</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">fileDescriptor</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li><strong>下载3</strong>的下载结果为: new ImageVideoWrapper(“下载1下载的流”, null)\n下载这一小节结束, 下一个流程: <strong>解码</strong></li>\n</ul>\n\n<h3 id=\"343-解码\">[3.4.3] 解码</h3>\n<p>让我们先回到上面刚刚开始切换线程的地方</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DecodeJob</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n\t    <span class=\"c1\">// 分支1, 下载 &amp;&amp; 解码</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeSource</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 分支2, 转码</span>\n        <span class=\"k\">return</span> <span class=\"nf\">transformEncodeAndTranscode</span><span class=\"o\">(</span><span class=\"n\">decoded</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">...</span>\n        <span class=\"kd\">final</span> <span class=\"no\">A</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">loadData</span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeFromSourceData</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">fetcher</span><span class=\"o\">.</span><span class=\"na\">cleanup</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">decoded</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>现在我们来看看<strong>分支1 解码</strong></li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DecodeJob</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeFromSourceData</span><span class=\"o\">(</span><span class=\"no\">A</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span><span class=\"o\">;</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">loadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">().</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">decoded</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>这里 <strong>data</strong> 类型是 <strong>ImageVideoWrapper</strong> (参考 [ 3.4.2 ] 下载)</li>\n  <li><strong>loadProvider</strong> 的类型是 <strong>构建 FixedLoadProvider &lt; String , ImageVideoWrapper , GifBitmapWrapper , GlideDrawable&gt;</strong> ( 参考 [ 3.2.4 ] 工具集合1 )</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// FixedLoadProvider</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">ResourceDecoder</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">getSourceDecoder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">dataLoadProvider</span><span class=\"o\">.</span><span class=\"na\">getSourceDecoder</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li><strong>dataLoadProvider</strong> 类型是 **ImageVideoGifDrawableLoadProvider &lt;ImageVideoWrapper ,GifBitmapWrapper &gt; ** ( 参考编/解码1 )</li>\n  <li>其中 <strong>SourceDecoder</strong> 是 <strong>GifBitmapWrapperResourceDecoder</strong></li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GifBitmapWrapperResourceDecoder</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">&gt;</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">tempBytes</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapperResource</span><span class=\"o\">(</span><span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">GifBitmapWrapper</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">GifBitmapWrapper</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"na\">getStream</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">decodeStream</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">bytes</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">decodeBitmapWrapper</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>参考<strong>下载</strong>流程, 得, source = new ImageVideoWrapper(“下载1下载的流”, null)</li>\n  <li>走 decodeStream 函数</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GifBitmapWrapperResourceDecoder</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">GifBitmapWrapper</span> <span class=\"nf\">decodeStream</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span><span class=\"o\">)</span>\n            <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">InputStream</span> <span class=\"n\">bis</span> <span class=\"o\">=</span> <span class=\"n\">streamFactory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"na\">getStream</span><span class=\"o\">(),</span> <span class=\"n\">bytes</span><span class=\"o\">);</span>\n        <span class=\"n\">bis</span><span class=\"o\">.</span><span class=\"na\">mark</span><span class=\"o\">(</span><span class=\"no\">MARK_LIMIT_BYTES</span><span class=\"o\">);</span>\n        <span class=\"nc\">ImageHeaderParser</span><span class=\"o\">.</span><span class=\"na\">ImageType</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">bis</span><span class=\"o\">);</span>\n        <span class=\"n\">bis</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">GifBitmapWrapper</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"nc\">ImageHeaderParser</span><span class=\"o\">.</span><span class=\"na\">ImageType</span><span class=\"o\">.</span><span class=\"na\">GIF</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">decodeGifWrapper</span><span class=\"o\">(</span><span class=\"n\">bis</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"o\">...</span>\n            <span class=\"nc\">ImageVideoWrapper</span> <span class=\"n\">forBitmapDecoder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ImageVideoWrapper</span><span class=\"o\">(</span><span class=\"n\">bis</span><span class=\"o\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"na\">getFileDescriptor</span><span class=\"o\">());</span>\n            <span class=\"c1\">// 显然我们不是个gif , 走这里</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">decodeBitmapWrapper</span><span class=\"o\">(</span><span class=\"n\">forBitmapDecoder</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">GifBitmapWrapper</span> <span class=\"nf\">decodeBitmapWrapper</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span> <span class=\"n\">toDecode</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">GifBitmapWrapper</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n\t\t<span class=\"c1\">// 参考[编/解码1]可得 bitmapDecoder = ImageVideoBitmapDecoder</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">bitmapResource</span> <span class=\"o\">=</span> <span class=\"n\">bitmapDecoder</span><span class=\"o\">.</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">toDecode</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bitmapResource</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">(</span><span class=\"n\">bitmapResource</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// ImageVideoBitmapDecoder</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"nc\">ImageVideoWrapper</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"nc\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"na\">getStream</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">try</span> <span class=\"o\">{</span>\n            \t<span class=\"c1\">// 我们是标准流, 应该走这里</span>\n            \t<span class=\"c1\">// 参考[编/解码1]可得 streamDecoder = StreamBitmapDecoder</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">streamDecoder</span><span class=\"o\">.</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">v</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Failed to load image from stream, trying FileDescriptor\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">ParcelFileDescriptor</span> <span class=\"n\">fileDescriptor</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"na\">getFileDescriptor</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fileDescriptor</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">fileDescriptorDecoder</span><span class=\"o\">.</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">fileDescriptor</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// StreamBitmapDecoder</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"nf\">decode</span><span class=\"o\">(</span><span class=\"nc\">InputStream</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 层次太深, 这里就不做分析了, downsampler是一个工具类, 专门用作原始资源流转换成图片的</span>\n        <span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span> <span class=\"o\">=</span> <span class=\"n\">downsampler</span><span class=\"o\">.</span><span class=\"na\">decode</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">decodeFormat</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"nc\">BitmapResource</span><span class=\"o\">.</span><span class=\"na\">obtain</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// BitmapResource</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">BitmapResource</span> <span class=\"nf\">obtain</span><span class=\"o\">(</span><span class=\"nc\">Bitmap</span> <span class=\"n\">bitmap</span><span class=\"o\">,</span> <span class=\"nc\">BitmapPool</span> <span class=\"n\">bitmapPool</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bitmap</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">BitmapResource</span><span class=\"o\">(</span><span class=\"n\">bitmap</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>解码之后我们得到了一个 <strong>BitmapResource</strong>实例, 里面封存了一张 Bitmap, 是 Resource &lt; Bitmap &gt; 类型</li>\n  <li>最后返回给上面的时候是一个 <strong>GifBitmapWrapper</strong> 实例, 里面封存了一个 <strong>BitmapResource</strong> 实例 (参考 GifBitmapWrapperResourceDecoder.decodeBitmapWrapper 这个函数)</li>\n</ul>\n\n<p>下面来看看转码做了些啥?</p>\n\n<h3 id=\"344-转码\">[3.4.4] 转码</h3>\n<p>回到之前的 DecodeJob , 这次我们来看<strong>分支2</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DecodeJob</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n\t    <span class=\"c1\">// 分支1, 下载 &amp;&amp; 解码</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeSource</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 分支2, 转码</span>\n        <span class=\"k\">return</span> <span class=\"nf\">transformEncodeAndTranscode</span><span class=\"o\">(</span><span class=\"n\">decoded</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">transformEncodeAndTranscode</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">long</span> <span class=\"n\">startTime</span> <span class=\"o\">=</span> <span class=\"nc\">LogTime</span><span class=\"o\">.</span><span class=\"na\">getLogTime</span><span class=\"o\">();</span>\n\t\t<span class=\"c1\">// 这里的 T 是 GifBitmapWrapper , 这个函数是进行图形变换的, 和主线无关,跳过</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">transform</span><span class=\"o\">(</span><span class=\"n\">decoded</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 转码</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">transcode</span><span class=\"o\">(</span><span class=\"n\">transformed</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">logWithTimeAndKey</span><span class=\"o\">(</span><span class=\"s\">\"Transcoded transformed from source\"</span><span class=\"o\">,</span> <span class=\"n\">startTime</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">transcode</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">transformed</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">transformed</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 查看[转码1]工具, transcoder ==</span>\n        <span class=\"c1\">// GifBitmapWrapperDrawableTranscoder &lt; GifBitmapWrapper,GlideDrawable &gt;</span>\n        <span class=\"k\">return</span> <span class=\"n\">transcoder</span><span class=\"o\">.</span><span class=\"na\">transcode</span><span class=\"o\">(</span><span class=\"n\">transformed</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GifBitmapWrapperDrawableTranscoder</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;</span> <span class=\"nf\">transcode</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">GifBitmapWrapper</span><span class=\"o\">&gt;</span> <span class=\"n\">toTranscode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">GifBitmapWrapper</span> <span class=\"n\">gifBitmap</span> <span class=\"o\">=</span> <span class=\"n\">toTranscode</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">bitmapResource</span> <span class=\"o\">=</span> <span class=\"n\">gifBitmap</span><span class=\"o\">.</span><span class=\"na\">getBitmapResource</span><span class=\"o\">();</span>\n\n        <span class=\"kd\">final</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bitmapResource</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 上面我们解码出来一个bitmap, 所以走这里</span>\n        \t<span class=\"c1\">// 查看[转码1]工具, bitmapDrawableResourceTranscoder ==</span>\n        \t<span class=\"c1\">// GlideBitmapDrawableTranscoder</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bitmapDrawableResourceTranscoder</span><span class=\"o\">.</span><span class=\"na\">transcode</span><span class=\"o\">(</span><span class=\"n\">bitmapResource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">gifBitmap</span><span class=\"o\">.</span><span class=\"na\">getGifResource</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;)</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideBitmapDrawableTranscoder</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">GlideBitmapDrawable</span><span class=\"o\">&gt;</span> <span class=\"nf\">transcode</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"nc\">Bitmap</span><span class=\"o\">&gt;</span> <span class=\"n\">toTranscode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// bitmap 拿出来 封装成 GlideBitmapDrawable</span>\n        <span class=\"nc\">GlideBitmapDrawable</span> <span class=\"n\">drawable</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GlideBitmapDrawable</span><span class=\"o\">(</span><span class=\"n\">resources</span><span class=\"o\">,</span> <span class=\"n\">toTranscode</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">());</span>\n        <span class=\"c1\">// 再加一层装饰 GlideBitmapDrawableResource</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">GlideBitmapDrawableResource</span><span class=\"o\">(</span><span class=\"n\">drawable</span><span class=\"o\">,</span> <span class=\"n\">bitmapPool</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<ul>\n  <li>最终转码过程为 <strong>GifBitmapWrapper »&gt; GlideBitmapDrawableResource 的过程</strong></li>\n  <li>返回到外面的对象类型是 <strong>Resource&lt; GlideBitmapDrawable &gt;</strong></li>\n  <li>其中 GlideBitmapDrawableResource 的结构参考如下图\n<img src=\"https://img-blog.csdnimg.cn/20210313173100170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1Nzc4MzY5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n最后一步, 加载图片到界面上显示出来</li>\n</ul>\n\n<h3 id=\"345-加载\">[3.4.5] 加载</h3>\n<p>看看转码完成之后如何通知界面的, 下面的代码是一个逆序调用过程, 追溯下转码成功后的代码走向</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// DecodeJob</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n\t    <span class=\"c1\">// 分支1, 下载 &amp;&amp; 解码</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decodeSource</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 分支2, 转码</span>\n        <span class=\"k\">return</span> <span class=\"nf\">transformEncodeAndTranscode</span><span class=\"o\">(</span><span class=\"n\">decoded</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// EngineRunnable</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">decodeFromSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">decodeJob</span><span class=\"o\">.</span><span class=\"na\">decodeFromSource</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">decode</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isDecodingFromCache</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">decodeFromCache</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nf\">decodeFromSource</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isCancelled</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nc\">Exception</span> <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 终于绕出来了</span>\n            <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">isLoggable</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">VERBOSE</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"na\">v</span><span class=\"o\">(</span><span class=\"no\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"Exception decoding\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isCancelled</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resource</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">recycle</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">resource</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">onLoadFailed</span><span class=\"o\">(</span><span class=\"n\">exception</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        \t<span class=\"c1\">// 这应该就是上抛结果的回调了</span>\n            <span class=\"n\">onLoadComplete</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">onLoadComplete</span><span class=\"o\">(</span><span class=\"nc\">Resource</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// manager 是在 EngineRunnable 初始化时赋的值</span>\n        <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"nf\">EngineRunnable</span><span class=\"o\">(</span><span class=\"nc\">EngineRunnableManager</span> <span class=\"n\">manager</span><span class=\"o\">,</span> <span class=\"nc\">DecodeJob</span><span class=\"o\">&lt;?,</span> <span class=\"o\">?,</span> <span class=\"o\">?&gt;</span> <span class=\"n\">decodeJob</span><span class=\"o\">,</span> <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">manager</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">decodeJob</span> <span class=\"o\">=</span> <span class=\"n\">decodeJob</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">stage</span> <span class=\"o\">=</span> <span class=\"nc\">Stage</span><span class=\"o\">.</span><span class=\"na\">CACHE</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">priority</span> <span class=\"o\">=</span> <span class=\"n\">priority</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n <span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">LoadStatus</span> <span class=\"nf\">load</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">Transformation</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n            <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"nc\">DiskCacheStrategy</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">...</span>\n        <span class=\"nc\">EngineJob</span> <span class=\"n\">engineJob</span> <span class=\"o\">=</span> <span class=\"n\">engineJobFactory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 得 engineJob == manager , 此处代码也可在[3.4.2]下载流程中找到</span>\n        <span class=\"nc\">EngineRunnable</span> <span class=\"n\">runnable</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EngineRunnable</span><span class=\"o\">(</span><span class=\"n\">engineJob</span><span class=\"o\">,</span> <span class=\"n\">decodeJob</span><span class=\"o\">,</span> <span class=\"n\">priority</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>现在<strong>转码结果</strong>被上抛到 EngineJob , 跟进去看看</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// EngineJob</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">resource</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"o\">;</span>\n        <span class=\"no\">MAIN_THREAD_HANDLER</span><span class=\"o\">.</span><span class=\"na\">obtainMessage</span><span class=\"o\">(</span><span class=\"no\">MSG_COMPLETE</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">).</span><span class=\"na\">sendToTarget</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">MainThreadCallback</span> <span class=\"kd\">implements</span> <span class=\"nc\">Handler</span><span class=\"o\">.</span><span class=\"na\">Callback</span> <span class=\"o\">{</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">handleMessage</span><span class=\"o\">(</span><span class=\"nc\">Message</span> <span class=\"n\">message</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"no\">MSG_COMPLETE</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">what</span> <span class=\"o\">||</span> <span class=\"no\">MSG_EXCEPTION</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">what</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">EngineJob</span> <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">EngineJob</span><span class=\"o\">)</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">obj</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"no\">MSG_COMPLETE</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">what</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                \t<span class=\"c1\">// 走这</span>\n                    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"na\">handleResultOnMainThread</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"na\">handleExceptionOnMainThread</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">handleResultOnMainThread</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// resource == Resource&lt; GlideBitmapDrawable &gt;</span>\n        <span class=\"c1\">// 这里又给resource 包了一层, 就不展开了, 最后是个 EngineResource</span>\n        <span class=\"n\">engineResource</span> <span class=\"o\">=</span> <span class=\"n\">engineResourceFactory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"n\">isCacheable</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 此处开始上抛结果, 此处的listener通过addCallback来赋值</span>\n        <span class=\"c1\">// 可在[3.4.2]下载流程中查到, 此赋值代码</span>\n        <span class=\"n\">cb</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">engineResource</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// Engine</span>\n <span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"nc\">LoadStatus</span> <span class=\"nf\">load</span><span class=\"o\">(</span><span class=\"nc\">Key</span> <span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"nc\">DataFetcher</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">fetcher</span><span class=\"o\">,</span>\n            <span class=\"nc\">DataLoadProvider</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"nc\">Transformation</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"nc\">ResourceTranscoder</span><span class=\"o\">&lt;</span><span class=\"no\">Z</span><span class=\"o\">,</span> <span class=\"no\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n            <span class=\"nc\">Priority</span> <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"nc\">DiskCacheStrategy</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"nc\">ResourceCallback</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n\t\t<span class=\"nc\">EngineJob</span> <span class=\"n\">engineJob</span> <span class=\"o\">=</span> <span class=\"n\">engineJobFactory</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">);</span>\n      \t<span class=\"o\">...</span>\n        <span class=\"n\">engineJob</span><span class=\"o\">.</span><span class=\"na\">addCallback</span><span class=\"o\">(</span><span class=\"n\">cb</span><span class=\"o\">);</span>\n        <span class=\"n\">engineJob</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">(</span><span class=\"n\">runnable</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GenericRequest</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onSizeReady</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 这里, 所以应追溯到 GenericRequest.onResourceReady</span>\n        <span class=\"n\">loadStatus</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"na\">load</span><span class=\"o\">(</span><span class=\"n\">signature</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">,</span> <span class=\"n\">dataFetcher</span><span class=\"o\">,</span> <span class=\"n\">loadProvider</span><span class=\"o\">,</span> <span class=\"n\">transformation</span><span class=\"o\">,</span> <span class=\"n\">transcoder</span><span class=\"o\">,</span>\n                <span class=\"n\">priority</span><span class=\"o\">,</span> <span class=\"n\">isMemoryCacheable</span><span class=\"o\">,</span> <span class=\"n\">diskCacheStrategy</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n\n    <span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">...</span>\n\t\t<span class=\"c1\">// 前文提到 resource 是个 EngineResource, 里面包了一个Resource&lt; GlideBitmapDrawable &gt;</span>\n        <span class=\"nc\">Object</span> <span class=\"n\">received</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// 最后上抛了一个 received (new GlideBitmapDrawable(null, BitmapState))</span>\n        <span class=\"n\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"no\">R</span><span class=\"o\">)</span> <span class=\"n\">received</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// EngineResource</span>\n\t<span class=\"kd\">public</span> <span class=\"no\">Z</span> <span class=\"nf\">get</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideBitmapDrawableResource</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">final</span> <span class=\"no\">T</span> <span class=\"nf\">get</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"no\">T</span><span class=\"o\">)</span> <span class=\"n\">drawable</span><span class=\"o\">.</span><span class=\"na\">getConstantState</span><span class=\"o\">().</span><span class=\"na\">newDrawable</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideBitmapDrawable</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">ConstantState</span> <span class=\"nf\">getConstantState</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// BitmapState</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Drawable</span> <span class=\"nf\">newDrawable</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">GlideBitmapDrawable</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>继续看 GenericRequest 的上抛</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// GenericRequest</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"nc\">Resource</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"no\">R</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\">// result == new GlideBitmapDrawable(null, BitmapState)</span>\n        <span class=\"c1\">// 还记得在[3.4.1]构建了一个 GlideDrawableImageViewTarget &lt; GlideDrawable &gt; ?</span>\n        <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">animation</span><span class=\"o\">);</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideDrawableImageViewTarget</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"nc\">GlideDrawable</span> <span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"nc\">GlideAnimation</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"nc\">GlideDrawable</span><span class=\"o\">&gt;</span> <span class=\"n\">animation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onResourceReady</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"n\">animation</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideDrawableImageViewTarget.super</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onResourceReady</span><span class=\"o\">(</span><span class=\"no\">Z</span> <span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"nc\">GlideAnimation</span><span class=\"o\">&lt;?</span> <span class=\"kd\">super</span> <span class=\"no\">Z</span><span class=\"o\">&gt;</span> <span class=\"n\">glideAnimation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">glideAnimation</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">glideAnimation</span><span class=\"o\">.</span><span class=\"na\">animate</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">setResource</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">// GlideDrawableImageViewTarget</span>\n\t<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">setResource</span><span class=\"o\">(</span><span class=\"nc\">GlideDrawable</span> <span class=\"n\">resource</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">setImageDrawable</span><span class=\"o\">(</span><span class=\"n\">resource</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>最后调用 ImageView 的 setImageDrawable 方法, 完成图片资源的展示</p>\n",
      "desc"     : "一、加载图片代码1Glide.with(activity).load(url).into(imageView);二、流程图      Glide.with 方法, 创建 RequestManager 实例          RequestManager.load 方法, 创建 GenericRequestBuilder 实例, 并打包编/解码, 转码, 图形转换, 下载等工具解码: File..."
} ,
  
  
  
    {
      "title"    : "Android Glide 3.7.0 源码解析(一), 准备工作",
      "title-lower"    : "android glide 3.7.0 源码解析(一), 准备工作",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "glide3.7.0, 源码",
      "url"      : "/2021/03/14/markdown-glide3.7.0_1/",
      "date"     : "2021-03-14 23:02:28 +0800",
      "content": "<h1 id=\"一前言\">一、前言</h1>\n\n<h2 id=\"1-关于源码阅读\">1. 关于源码阅读</h2>\n<ul>\n  <li>不要妄图一下子窥得全貌, 一个开源项目是由很多人同时维护, 一个人不可能一下子掌握每个细节, 可以先从一个特定流程入手, 这样会使得源码阅读事半功倍.</li>\n  <li>阅读的过程中尽量不要过分纠结主线之外的细节, 可能会给整个主线的分析带来极大难度</li>\n</ul>\n\n<h2 id=\"2-关于glide的使用\">2. 关于Glide的使用</h2>\n<blockquote>\n  <p><a href=\"https://muyangmin.github.io/glide-docs-cn/\">官方文档中文版传送门</a>\n<a href=\"https://bumptech.github.io/glide/\">官方文档英文版传送门</a>\n<a href=\"https://github.com/bumptech/glide\">github地址</a></p>\n</blockquote>\n\n<h1 id=\"二源代码准备\">二、源代码准备</h1>\n<blockquote>\n  <p><a href=\"https://github.com/bumptech/glide/tree/v3.7.0\">Glide 3.7.0 源代码官方链接</a>\n<a href=\"https://github.com/bumptech/glide\">Glide github地址</a></p>\n</blockquote>\n\n<h2 id=\"1-下载\">1. 下载</h2>\n<p>github 如果同步较慢点击<a href=\"https://summer-zhoujie.github.io/2021/03/13/markdown-github_speed/\">这里</a></p>\n\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"nx\">clone</span><span class=\"w\"> </span><span class=\"nx\">https://github.com/bumptech/glide.git</span><span class=\"w\">\n</span></pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"2-切换到v370分支\">2. 切换到v3.7.0分支</h2>\n\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"nx\">checkout</span><span class=\"w\"> </span><span class=\"nx\">v3.7.0</span><span class=\"w\"> </span><span class=\"nt\">-b</span><span class=\"w\"> </span><span class=\"nx\">v3.7.0</span><span class=\"w\">\n</span></pre></td></tr></tbody></table></code></pre></div></div>\n<h1 id=\"三文章传送门\">三、文章传送门</h1>\n\n<ol>\n  <li>Android Glide 3.7.0 源码详解 (一) , 准备工作</li>\n  <li><a href=\"/2021/03/14/markdown-glide3.7.0_2/index.html\">Android Glide 3.7.0 源码解析 (二) , 从一次图片加载流程看源码</a></li>\n  <li><a href=\"/2021/03/20/markdown-glide3.7.0_3/index.html\">Android Glide 3.7.0 源码解析(三), 生命周期绑定</a></li>\n  <li><a href=\"/2021/03/20/markdown-glide3.7.0_4/index.html\">Android Glide 3.7.0 源码解析(四), BitmapPool作用及原理</a></li>\n  <li><a href=\"/2021/03/20/markdown-glide3.7.0_5/index.html\">Android Glide 3.7.0 源码解析(五) , 如何获得ImageView的宽高</a></li>\n  <li><a href=\"/2021/03/27/markdown-glide3.7.0_6/index.html\">Android Glide 3.7.0 源码解析(六) , 缓存结构详述</a></li>\n  <li><a href=\"/2021/03/31/markdown-glide3.7.0_7/index.html\">Android Glide 3.7.0 源码解析(七) , 细说图形变换和解码</a></li>\n  <li><a href=\"/2021/04/01/markdown-glide3.7.0_8/index.html\">Android Glide 3.7.0 源码解析(八) , RecyclableBufferedInputStream 的 mark/reset 实现</a></li>\n  <li><a href=\"/2021/04/07/markdown-glide3.7.0_9/index.html\">Android Glide 3.7.0 源码解析(九) ,  gif 的加载实现</a></li>\n</ol>\n\n<h1 id=\"四参考\">四、参考</h1>\n\n<ul>\n  <li>Glide最全解析: <a href=\"https://blog.csdn.net/guolin_blog/category_9268670.html\">https://blog.csdn.net/guolin_blog/category_9268670.html</a></li>\n</ul>\n",
      "desc"     : "一、前言1. 关于源码阅读  不要妄图一下子窥得全貌, 一个开源项目是由很多人同时维护, 一个人不可能一下子掌握每个细节, 可以先从一个特定流程入手, 这样会使得源码阅读事半功倍.  阅读的过程中尽量不要过分纠结主线之外的细节, 可能会给整个主线的分析带来极大难度2. 关于Glide的使用  官方文档中文版传送门官方文档英文版传送门github地址二、源代码准备  Glide 3.7.0 源..."
} ,
  
  
  
    {
      "title"    : "Markdown介绍",
      "title-lower"    : "markdown介绍",
      "sub-titile" : "Markdown是一种轻量级标记语言",
      "sub-titile-lower" : "markdown是一种轻量级标记语言",
      "categories" : "",
      "tags"     : "Markdown, 标记语言",
      "url"      : "/2016/03/07/markdown-demo/",
      "date"     : "2016-03-07 00:00:00 +0800",
      "content": "<h2 id=\"主要内容\">主要内容</h2>\n<ul>\n  <li><a href=\"#Markdown是什么\">Markdown是什么</a></li>\n  <li><a href=\"#谁创造了它\">谁创造了它</a></li>\n  <li><a href=\"#为什么要使用它\">为什么要使用它</a></li>\n  <li><a href=\"#怎么使用\">怎么使用</a></li>\n  <li><a href=\"#谁在用\">谁在用</a></li>\n  <li><a href=\"#尝试一下\">尝试一下</a></li>\n  <li><a href=\"#其它\">其它</a></li>\n</ul>\n\n<h2 id=\"正文\">正文</h2>\n\n<h3 id=\"markdown是什么\">Markdown是什么</h3>\n<p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。  <br />\n<strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>\n\n<h3 id=\"谁创造了它\">谁创造了它</h3>\n<p>它由<a href=\"http://www.aaronsw.com/\"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href=\"http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8\">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p>\n\n<p>他有着足以让你跪拜的人生经历：</p>\n<ul>\n  <li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li>\n  <li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li>\n  <li><strong>2005</strong>年创建<a href=\"http://infogami.org/\">Infogami</a>，之后与<a href=\"http://www.reddit.com/\">Reddit</a>合并成为其合伙人。</li>\n  <li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li>\n  <li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li>\n  <li><strong>2013</strong>年1月自杀身亡。</li>\n</ul>\n\n<p><img src=\"https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg\" alt=\"Aaron Swartz\" /></p>\n\n<p>天才都有早逝的归途。</p>\n\n<h3 id=\"为什么要使用它\">为什么要使用它</h3>\n<ul>\n  <li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>\n  <li>兼容HTML，可以转换为HTML格式发布。</li>\n  <li>跨平台使用。</li>\n  <li>越来越多的网站支持Markdown。</li>\n  <li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>\n  <li>摆脱Word（我不是认真的）。</li>\n</ul>\n\n<h3 id=\"怎么使用\">怎么使用</h3>\n<p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>\n\n<p>Markdown语法主要分为如下几大部分：\n<strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code class=\"language-plaintext highlighter-rouge\">\\</code></strong>，<strong>符号’`‘</strong>。</p>\n\n<h4 id=\"41-标题\">4.1 标题</h4>\n<p>两种形式：<br />\n1）使用<code class=\"language-plaintext highlighter-rouge\">=</code>和<code class=\"language-plaintext highlighter-rouge\">-</code>标记一级和二级标题。</p>\n<blockquote>\n  <p>一级标题 <br />\n<code class=\"language-plaintext highlighter-rouge\">=========</code> <br />\n二级标题  <br />\n<code class=\"language-plaintext highlighter-rouge\">---------</code></p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <h1 id=\"一级标题\">一级标题</h1>\n  <p>二级标题\n———</p>\n</blockquote>\n\n<p>2）使用<code class=\"language-plaintext highlighter-rouge\">#</code>，可表示1-6级标题。</p>\n<blockquote>\n  <p># 一级标题 <br />\n## 二级标题 <br />\n### 三级标题 <br />\n#### 四级标题 <br />\n##### 五级标题 <br />\n###### 六级标题</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <h1 id=\"一级标题-1\">一级标题</h1>\n  <h2 id=\"二级标题\">二级标题</h2>\n  <h3 id=\"三级标题\">三级标题</h3>\n  <h4 id=\"四级标题\">四级标题</h4>\n  <h5 id=\"五级标题\">五级标题</h5>\n  <h6 id=\"六级标题\">六级标题</h6>\n</blockquote>\n\n<h4 id=\"42-段落\">4.2 段落</h4>\n<p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>\n\n<h4 id=\"43-区块引用\">4.3 区块引用</h4>\n<p>在段落的每行或者只在第一行使用符号<code class=\"language-plaintext highlighter-rouge\">&gt;</code>,还可使用多个嵌套引用，如：</p>\n<blockquote>\n  <p>&gt; 区块引用<br />\n&gt;&gt; 嵌套引用</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p>区块引用</p>\n  <blockquote>\n    <p>嵌套引用</p>\n  </blockquote>\n</blockquote>\n\n<h4 id=\"44-代码区块\">4.4 代码区块</h4>\n<p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如  <br />\n普通段落：</p>\n\n<p>void main()  <br />\n{  <br />\n    printf(“Hello, Markdown.”);  <br />\n}</p>\n\n<p>代码区块：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre>void main()\n{\n    printf(\"Hello, Markdown.\");\n}\n</pre></td></tr></tbody></table></code></pre></div></div>\n\n<p><strong>注意</strong>:需要和普通段落之间存在空行。</p>\n\n<h4 id=\"45-强调\">4.5 强调</h4>\n<p>在强调内容两侧分别加上<code class=\"language-plaintext highlighter-rouge\">*</code>或者<code class=\"language-plaintext highlighter-rouge\">_</code>，如：</p>\n<blockquote>\n  <p>*斜体*，_斜体_  <br />\n**粗体**，__粗体__</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><em>斜体</em>，<em>斜体</em>  <br />\n<strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n\n<h4 id=\"46-列表\">4.6 列表</h4>\n<p>使用<code class=\"language-plaintext highlighter-rouge\">·</code>、<code class=\"language-plaintext highlighter-rouge\">+</code>、或<code class=\"language-plaintext highlighter-rouge\">-</code>标记无序列表，如：</p>\n<blockquote>\n  <p>-（+*） 第一项\n-（+*） 第二项\n- （+*）第三项</p>\n</blockquote>\n\n<p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>\n\n<p>效果：</p>\n<blockquote>\n  <ul>\n    <li>第一项</li>\n    <li>第二项</li>\n    <li>第三项</li>\n  </ul>\n</blockquote>\n\n<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code class=\"language-plaintext highlighter-rouge\">.</code>，如：</p>\n<blockquote>\n  <p>1 . 第一项 <br />\n2 . 第二项  <br />\n3 . 第三项</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <ol>\n    <li>第一项</li>\n    <li>第二项</li>\n    <li>第三项</li>\n  </ol>\n</blockquote>\n\n<h4 id=\"47-分割线\">4.7 分割线</h4>\n<p>分割线最常使用就是三个或以上<code class=\"language-plaintext highlighter-rouge\">*</code>，还可以使用<code class=\"language-plaintext highlighter-rouge\">-</code>和<code class=\"language-plaintext highlighter-rouge\">_</code>。</p>\n\n<h4 id=\"48-链接\">4.8 链接</h4>\n<p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。  <br />\n<strong>行内式</strong>：</p>\n<blockquote>\n  <p>[caojiele的Markdown库](https:://github.com/caojiele/Markdown “Markdown”)。</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><a href=\"https:://github.com/caojiele/Markdown\" title=\"Markdown\">caojiele的Markdown库</a>。</p>\n</blockquote>\n\n<p><strong>参考式</strong>：</p>\n<blockquote>\n  <p>[caojiele的Markdown库1][1]  <br />\n[caojiele的Markdown库2][2]  <br />\n[1]:https:://github.com/caojiele/Markdown “Markdown”  <br />\n[2]:https:://github.com/caojiele/Markdown “Markdown”</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><a href=\"https:://github.com/caojiele/Markdown\" title=\"Markdown\">caojiele的Markdown库1</a>  <br />\n<a href=\"https:://github.com/caojiele/Markdown\" title=\"Markdown\">caojiele的Markdown库2</a></p>\n</blockquote>\n\n<p><strong>注意</strong>：上述的<code class=\"language-plaintext highlighter-rouge\">[1]:https:://github.com/caojiele/Markdown \"Markdown\"</code>不出现在区块中。</p>\n\n<h4 id=\"49-图片\">4.9 图片</h4>\n<p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code class=\"language-plaintext highlighter-rouge\">！</code>。</p>\n<h4 id=\"410-反斜杠\">4.10 反斜杠<code class=\"language-plaintext highlighter-rouge\">\\</code></h4>\n<p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>\n<h4 id=\"411-符号\">4.11 符号’`’</h4>\n<p>起到标记作用。如：</p>\n<blockquote>\n  <p>`ctrl+a`</p>\n</blockquote>\n\n<p>效果：</p>\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">ctrl+a</code></p>\n</blockquote>\n\n<h4 id=\"谁在用\">谁在用？</h4>\n<p>Markdown的使用者：</p>\n<ul>\n  <li>GitHub</li>\n  <li>简书</li>\n  <li>Stack Overflow</li>\n  <li>Apollo</li>\n  <li>Moodle</li>\n  <li>Reddit</li>\n  <li>等等</li>\n</ul>\n\n<h4 id=\"尝试一下\">尝试一下</h4>\n<ul>\n  <li><strong>Chrome</strong>下的插件诸如<code class=\"language-plaintext highlighter-rouge\">stackedit</code>与<code class=\"language-plaintext highlighter-rouge\">markdown-here</code>等非常方便，也不用担心平台受限。</li>\n  <li><strong>在线</strong>的dillinger.io评价也不错</li>\n  <li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li>\n  <li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>\n  <li><strong>Linux</strong>下的ReText不错。</li>\n</ul>\n\n<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>\n\n<hr />\n<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\n<em>**</em>\n以上基本是所有traditonal markdown的语法。</p>\n\n<h4 id=\"其它\">其它</h4>\n<p>列表的使用(非traditonal markdown)：</p>\n\n<p>用<code class=\"language-plaintext highlighter-rouge\">|</code>表示表格纵向边界，表头和表内容用<code class=\"language-plaintext highlighter-rouge\">-</code>隔开，并可用<code class=\"language-plaintext highlighter-rouge\">:</code>进行对齐设置，两边都有<code class=\"language-plaintext highlighter-rouge\">:</code>则表示居中，若不加<code class=\"language-plaintext highlighter-rouge\">:</code>则默认左对齐。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">代码库</th>\n      <th>链接</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">MarkDown</td>\n      <td><a href=\"https://github.com/caojiele/Markdown\" title=\"Markdown\">https://github.com/caojiele/Markdown</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">MarkDownCopy</td>\n      <td><a href=\"https://github.com/caojiele/Markdown\" title=\"Markdown\">https://github.com/caojiele/Markdown</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>关于其它扩展语法可参见具体工具的使用说明。</p>\n",
      "desc"     : "主要内容  Markdown是什么  谁创造了它  为什么要使用它  怎么使用  谁在用  尝试一下  其它正文Markdown是什么Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。  Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。谁创造了它它由Aaron Swartz和John Grub..."
} 
  
  
]
